using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UTL
{
    /// <summary>
    /// 
    /// </summary>
    class FPub
    {
        #region FPub
       using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace DAL.EntitiesDAL
{
    class FPub
    {
        // Generated by .NET Reflector from I:\01 Cong Viec\07 Cong viec dang lam\01 My Job\NienLuan-HTTT-2015-12-16\NienLuan-HTTT\Phan chuong trinh\QLTV\UTL\NFunc.DLL
namespace NFunc
{
    using NConn;
    using NMess;
    using SysInfo;
    using System;
    using System.Data;
    
    
    public class FPub
    {
        private readonly conn_pg c;
        private readonly conn_pg c1;
        private DataTable dt;
        private readonly FUlti f;
        private readonly PInfo pinfo;
        private readonly Info sys_info;
        private readonly YesNo yn;
        
        public FPub(Info s_info, PInfo p_info, conn_pg conn)
        {
            this.sys_info = s_info;
            this.c = conn;
            this.c1 = conn;
            this.f = new FUlti();
            this.pinfo = p_info;
            this.yn = new YesNo();
        }
        
        public string Add_RelatedDiagnosis(long PatientID, long MedID, int DiagType, string ICD, string DiagName, int ExamRoom, int DoctorID)
        {
            this.c.setSql(string.Format("SELECT addnew_relateddiagnosis('{0};{1};{2};{3};{4};{5};{6};{7}')", new object[] { PatientID, MedID, DiagType, ICD, DiagName, ExamRoom, DoctorID, this.sys_info.getSID() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string AddNewInternalTreatment(DateTime DateMake, long PatID, long MedID, int RoomID, int GroupID, int ServiceID, int DoctorID, bool isEmergency, bool isPayCard, bool isService, string Description)
        {
            this.c.setSql(string.Format("select hm_fee_addnew_internaltreatment('{0};{1};{2};{3};{4};{5};0;{6};{7};{8};{9};{10};{11}')", new object[] { this.f.getDValue(DateMake, "YMD"), PatID, MedID, RoomID, GroupID, ServiceID, this.f.Boolean2Int(isEmergency), DoctorID, this.sys_info.getSID(), this.f.Boolean2Int(isPayCard), this.f.Boolean2Int(isService), Description }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string AddNewParaclinical(DateTime DateMake, long PatID, long MedID, int RoomID, int GroupID, string ParaclinicalID, int DoctorID, bool isEmergency, bool isPayCard, string Description, bool isService)
        {
            string sql = string.Format("select hm_fee_addnew_paraclinical('{0};{1};{2};{3};{4};{5};0;{6};{7};{8};{9};{10};{11}')", new object[] { this.f.getDValue(DateMake, "YMD"), PatID, MedID, RoomID, GroupID, ParaclinicalID, this.f.Boolean2Int(isEmergency), DoctorID, this.sys_info.getSID(), this.f.Boolean2Int(isPayCard), Description, this.f.Boolean2Int(isService) });
            this.c.setSql(sql);
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string AddNewReception(long PatID, int RoomExamID, int ServiceID, int isLine, int isDoubleExam, int CardID, int Hospital, string ICD, string ListExam)
        {
            string sql = string.Format("SELECT hm_addnew_exam('{0};0;{1};{2};{3};;0;O;{4};150;{5};{6};{7};{8};0;{9}')", new object[] { PatID, RoomExamID, ServiceID, this.sys_info.getSID(), isLine, isDoubleExam, CardID, Hospital, ICD, ListExam });
            this.c.setSql(sql);
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string AddNewReception(long MedID, long PatID, int RoomExamID, int ServiceID, int isLine, int isDoubleExam, int CardID, int Hospital, string ICD, string ListExam)
        {
            string sql = string.Format("SELECT hm_addnew_exam('{0};{9};{1};{2};{3};;0;O;{4};150;{5};{6};{7};{8};{9};{10}')", new object[] { PatID, RoomExamID, ServiceID, this.sys_info.getSID(), isLine, isDoubleExam, CardID, Hospital, ICD, MedID, ListExam });
            this.c.setSql(sql);
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string AddNewSurgicalTreatment(DateTime DateMake, long PatID, long MedID, int RoomID, int GroupID, int ServiceID, int DoctorID, bool isEmergency, bool isPayCard, bool isService, string Description)
        {
            this.c.setSql(string.Format("select hm_fee_addnew_surgicaltreatment('{0};{1};{2};{3};{4};{5};0;{6};{7};{8};{9};{10};{11}')", new object[] { this.f.getDValue(DateMake, "YMD"), PatID, MedID, RoomID, GroupID, ServiceID, this.f.Boolean2Int(isEmergency), DoctorID, this.sys_info.getSID(), this.f.Boolean2Int(isPayCard), this.f.Boolean2Int(isService), Description }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public int BackupData(DateTime To)
        {
            this.c.setSql(string.Format("SELECT hm_backupdata('{0}'::timestamp)", this.f.getDValue(To, "YMDT")));
            return int.Parse(this.c.FillData().Rows[0][0].ToString());
        }
        
        public string ChangeDivision(long MedID, int NewDivision)
        {
            this.c.setSql(string.Format("SELECT hm_tool_changedivision({0},{1},{2})", MedID, NewDivision, this.sys_info.getSID()));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string changePrepaid(long PrepaidID, long MedID)
        {
            this.c.setSql(string.Format("SELECT hm_tool_changeprepaid('{0};{1};{2};{3}')", new object[] { PrepaidID, MedID, this.sys_info.getSID(), this.sys_info.getIP() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public bool ChangeYear()
        {
            this.c.setSql("SELECT general_newyear()");
            return this.c.RunSql();
        }
        
        public bool chgLiveMedical(long MedID)
        {
            this.c.setSql("UPDATE hms_medicalrecord SET tmpstatus = 'L' WHERE id = " + MedID);
            return this.c.RunSql();
        }
        
        public bool ChooseArchives(long MedID)
        {
            this.c.setSql(string.Format("UPDATE hms_medicalrecord SET isclose = 2 WHERE id = {0} AND archives_number IS NULL AND isclose <> 1", MedID));
            return this.c.RunSql();
        }
        
        public bool Close_ChiDaoTuyen(long MedID)
        {
            this.c.setSql(string.Format("update hm_chidaotuyen set status='T' where medicalrecordid={0}", MedID));
            return this.c.RunSql();
        }
        
        public string CopyDrugBill(long MedSource, long MedDestination, long PatDestinationID, int DoctorID, int ExamRoom, int ExamRoomSource)
        {
            this.c.setSql(string.Format("SELECT hm_copy_drug('{0};{1};{2};{3};{4};{5};{6}')", new object[] { MedSource, MedDestination, PatDestinationID, DoctorID, this.sys_info.getSID(), ExamRoom, ExamRoomSource }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string CopyRole(int UserID, int DesUser)
        {
            this.c.setSql(string.Format("SELECT hm_tool_copyrole({0},{1},{2})", UserID, DesUser, this.sys_info.getSID()));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string del_Bill_Detail(long MedID, long DrugID, long StockImexID, long PatDrgID)
        {
            string sql = string.Format("SELECT pharma_DeleteDrug('{0};{1};{2};{3};{4};{5}')", new object[] { StockImexID, DrugID, MedID, PatDrgID, this.sys_info.getSID(), this.sys_info.getIP() });
            this.c.setSql(sql);
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public bool del_drug(int ID)
        {
            this.c.setSql("UPDATE hms_drug SET hide = 1 WHERE id = " + ID);
            return this.c.RunSql();
        }
        
        public bool del_drugselection(string Zone, int ID)
        {
            this.c.setSql(string.Format("UPDATE hms_drugselection SET hide = 1 WHERE zone = '{0}' AND  code = {1}", Zone, ID));
            return this.c.RunSql();
        }
        
        public string del_examroom(int ID)
        {
            this.c.setSql("UPDATE hms_examroom SET hide = 1 WHERE id = " + ID);
            if (this.c.RunSql())
            {
                return "OK";
            }
            return "Err:Lỗi khi hủy danh mục dịch vụ";
        }
        
        public bool Del_RelatedDiagnosis(long PatientID, long MedID, int DiagType)
        {
            this.c.setSql(string.Format("DELETE FROM hms_relateddiagnosis WHERE patientid = {0} AND medicalrecordid = {1} AND diagnosistype = {2}", PatientID, MedID, DiagType));
            return this.c.RunSql();
        }
        
        public string del_selection(string Zone, string Sector, int Line)
        {
            this.c.setSql(string.Format("UPDATE hms_selection SET hide = 1 WHERE zone = {0} AND sector = {1} AND line = {2}", this.f.getValue(Zone), this.f.getValue(Sector), Line));
            if (this.c.RunSql())
            {
                return "OK";
            }
            return "Err:Lỗi khi hủy danh mục dịch vụ";
        }
        
        public string delBill(long StockImex, long MedID)
        {
            this.c.setSql(string.Format("SELECT pharma_delete_bill('{0};{1};{2}')", StockImex, MedID, this.sys_info.getSID()));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public bool delDrugClassStock(int StockID, long UsingDrugID)
        {
            this.c.setSql(string.Format("DELETE FROM hms_instock WHERE stockid = {0} AND usingdrugid = {1}", StockID, UsingDrugID));
            this.c.RunSql();
            this.c.setSql(string.Format("DELETE FROM hms_instockmonthly WHERE stockid = {0} AND usingdrugid = {1}", StockID, UsingDrugID));
            return this.c.RunSql();
        }
        
        public bool Delete_ChiDaoTuyen(long ID)
        {
            this.c.setSql(string.Format("Delete from hm_chidaotuyen where medicalrecordid={0}", ID));
            return this.c.RunSql();
        }
        
        public string DeleteAllPaid(long MedID, long PatID)
        {
            this.c.setSql(string.Format("SELECT hm_tool_delete_allpaid('{0};{1};{2};{3}')", new object[] { MedID, PatID, this.sys_info.getSID(), this.sys_info.getIP() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string DeleteArchives(long MedID)
        {
            this.c.setSql(string.Format("SELECT hm_delarchives('{0};{1}')", MedID, this.sys_info.getSID()));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string DeleteBed(long PatientBedID, long PatID, long MedID, int DivisionID, int BedID)
        {
            this.c.setSql(string.Format("SELECT fee_delete_bed('{0};{1};{2};{3};{4};{5}')", new object[] { PatID, MedID, DivisionID, BedID, PatientBedID, this.sys_info.getSID() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public bool DeleteExambookReport(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("DELETE FROM rep_exambook WHERE exam_date::date BETWEEN '{0}'::date AND '{1}'::date", this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD")));
            return this.c.RunSql();
        }
        
        public string DeleteInternalTreatment(long ServiceID)
        {
            this.c.setSql(string.Format("select fee_delete_internaltreatment('{0};{1}')", ServiceID, this.sys_info.getSID()));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string DeleteMedical(long MedID, long PatID)
        {
            this.c.setSql(string.Format("SELECT hm_tool_delete_medical('{0};{1};{2};{3}')", new object[] { MedID, PatID, this.sys_info.getSID(), this.sys_info.getIP() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string DeleteParaclinical(long ID, long ServiceID, long GroupID)
        {
            string sql = string.Format("SELECT hm_fee_delete_paraclinical('{0};{1};{2};{3}')", new object[] { ID, GroupID, ServiceID, this.sys_info.getSID() });
            this.c.setSql(sql);
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public bool DeleteParaclinicalReport(DateTime From, DateTime To, int DivisionID)
        {
            this.c.setSql(string.Format("DELETE FROM rep_paraclinical WHERE servicedate BETWEEN '{0}'::date AND '{1}'::date AND divisionid = {2}", this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD"), DivisionID));
            this.c.RunSql();
            this.c.setSql(string.Format("UPDATE hms_paraclinical SET issaverep = 0 WHERE '{0}'::date AND '{1}'::date AND issaverep = 1 AND status = 'P' AND serviceid IN (SELECT id FROM hms_service WHERE divisionid = {2})", this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD"), DivisionID));
            return this.c.RunSql();
        }
        
        public string DeleteSurgicalTreatment(long ServiceID)
        {
            this.c.setSql(string.Format("select fee_delete_surgicaltreatment('{0};{1}')", ServiceID, this.sys_info.getSID()));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public bool delNote(long ID)
        {
            this.c.setSql("DELETE FROM rep_general_notes WHERE id = " + ID);
            return this.c.RunSql();
        }
        
        public bool DelOrtherDiagnose(long DiagID)
        {
            this.c.setSql("DELETE FROM hms_relateddiagnosis WHERE id = " + DiagID);
            return this.c.RunSql();
        }
        
        public string delParaclinical_Barcode(long MedID, string ParaID)
        {
            this.c.setSql(string.Format("SELECT hm_para_del_barcode('{0};{1};{2};{3}')", new object[] { MedID, ParaID, this.sys_info.getSID(), this.sys_info.getIP() }));
            return this.c.ExecuteScalar();
        }
        
        public bool delPermission(int UserID)
        {
            this.c.setSql("DELETE FROM hm_user_relation WHERE userid = " + UserID);
            return this.c.RunSql();
        }
        
        public bool delRole(int UserID)
        {
            this.c.setSql("DELETE FROM hm_userrole WHERE userid = " + UserID);
            return this.c.RunSql();
        }
        
        public string delService(long FeeID)
        {
            this.c.setSql(string.Format("SELECT hm_del_service('{0};{1};{2}')", FeeID, this.sys_info.getSID(), this.sys_info.getIP()));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public bool delStockPermission(int UserID, int StockID)
        {
            this.c.setSql(string.Format("DELETE FROM hm_user_stockrole WHERE userid = {0} AND stockid = {1}", UserID, StockID));
            return this.c.RunSql();
        }
        
        public bool delUser(int UserID)
        {
            this.c.setSql("UPDATE hm_user SET pass = null WHERE id = " + UserID);
            return (this.c.RunSql() && this.delPermission(UserID));
        }
        
        public string Division2Exam(long MedID)
        {
            this.c.setSql(string.Format("SELECT hm_tool_division2exam({0}, {1})", MedID, this.sys_info.getSID()));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string FeePaid(long MedID)
        {
            this.c.setSql("DELETE FROM rep_bhyt WHERE sohoso = " + MedID);
            this.c.RunSql();
            this.c.setSql(string.Format("SELECT hm_insert_insurereport({0})", MedID));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string FeePaid(long MedID, long PatID, bool isSaveInsure, int FeeType)
        {
            if (isSaveInsure)
            {
                this.c.setSql(string.Format("SELECT hm_fee_paid('{0};{1};{2};1;0;0;0;{3};{4}')", new object[] { MedID, PatID, this.sys_info.getSID(), this.sys_info.getSub(), FeeType }));
            }
            else
            {
                this.c.setSql(string.Format("SELECT hm_fee_paid('{0};{1};{2};0;0;0;0;{3};{4}')", new object[] { MedID, PatID, this.sys_info.getSID(), this.sys_info.getSub(), FeeType }));
            }
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        private DataTable FeeSearchList(long Values, long PatID)
        {
            this.c.setSql(string.Format("select a.id, fullname, a.status, 1 AS keys from hms_medicalrecord a JOIN (SELECT id, hm_getname(fname, mname, lname) AS fullname FROM hms_patient WHERE id = " + PatID + ") b ON a.patientid = b.id WHERE a.id = {0}", Values));
            return this.c.FillData();
        }
        
        private DataTable FeeSearchListBackup(long Values, long PatID)
        {
            this.c.setSql(string.Format("select a.id, fullname, a.status, 2 AS keys from hms_medicalrecordbackup a JOIN (SELECT id, hm_getname(fname, mname, lname) AS fullname FROM hms_patient WHERE id = " + PatID + ") b ON a.patientid = b.id WHERE a.id = {0}", Values));
            return this.c.FillData();
        }
        
        public string GeneralData(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT hm_insert_rep_general('{0}'::timestamp, '{1}'::timestamp, {2})", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), this.sys_info.getSID()));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public DataTable get_bed(bool isHide)
        {
            if (isHide)
            {
                this.c.setSql("SELECT a.id AS line, a.name, a.id || '.' || a.name AS sname, price, b.name AS roomname, b.divisionid, insprice FROM hms_bed a JOIN hms_patientroom b ON a.patientroomid = b.id ");
            }
            else
            {
                this.c.setSql("SELECT a.id AS line, a.name, a.id || '.' || a.name AS sname, price, b.name AS roomname, b.divisionid, insprice FROM hms_bed a JOIN hms_patientroom b ON a.patientroomid = b.id WHERE hide = 0");
            }
            return this.c.FillData();
        }
        
        public DataTable Get_ChiDaoTuyen(DateTime fromdate, DateTime todate)
        {
            this.c.setSql(string.Format("select * from hm_chidaotuyen where createdate::date between '{0}' and '{1}'", this.f.getDValue(fromdate, "YMD"), this.f.getDValue(todate, "YMD")));
            return this.c.FillData();
        }
        
        public string Get_ChiDaoTuyen_CacKyThuatSuDung(long MedID)
        {
            this.c.setSql(string.Format("select array_to_string(array(select distinct c.note from hms_paraclinical a join (select id,shorttext from hms_service) b on b.id = a.serviceid left join (select line,note,report from hms_selection where sector='chidaotuyen') c on c.report::text = b.shorttext::text where a.medicalrecordid = {0}), ', ')", MedID));
            return this.c.ExecuteScalar();
        }
        
        public DataTable get_data_selection(string TableName)
        {
            this.c.setSql(string.Format("SELECT id AS line, name, id || '.' || lower(name) || CASE WHEN lower(note) IS NULL THEN '' ELSE '-' || lower(note) END AS sname FROM {0} ORDER BY ID", TableName));
            switch (TableName)
            {
                case "hms_examroom":
                    this.c.setSql(string.Format("SELECT id AS line, name, code || '.' || lower(name) || CASE WHEN lower(note) IS NULL THEN '' ELSE '-' || lower(note) END AS sname, code, note, feepolicy, divisionid, SUBSTR(policy,1,1) AS n1, SUBSTR(policy,3,1) AS n3, SUBSTR(policy,5,1) AS n5, SUBSTR(policy,7,1) AS n7, SUBSTR(policy,9,1) AS n9, SUBSTR(policy,11,1) AS n11 FROM {0} WHERE hide = 0 ORDER BY ID", TableName));
                    break;
                
                case "hm_precintview":
                    this.c.setSql(string.Format("SELECT id AS line, name, id || '.' || lower(name) || CASE WHEN lower(note) IS NULL THEN '' ELSE '-' || lower(note) END || lower(abbreviation) AS sname, districtid FROM {0} ORDER BY ID", TableName));
                    break;
            }
            return this.c.FillData();
        }
        
        public DataTable get_data_selection(string TableName, bool isHide)
        {
            this.c.setSql(string.Format("SELECT id AS line, name, id || '.' || lower(name) || CASE WHEN lower(note) IS NULL THEN '' ELSE '-' || lower(note) END AS sname FROM {0} ORDER BY ID", TableName));
            string str = TableName;
            if ((str != null) && (str == "hms_examroom"))
            {
                if (isHide)
                {
                    this.c.setSql(string.Format("SELECT id AS line, name, code || '.' || lower(name) || CASE WHEN lower(note) IS NULL THEN '' ELSE '-' || lower(note) END AS sname, code, note, feepolicy, SUBSTR(policy,1,1) AS n1, SUBSTR(policy,3,1) AS n3, SUBSTR(policy,5,1) AS n5, SUBSTR(policy,7,1) AS n7, SUBSTR(policy,9,1) AS n9, SUBSTR(policy,11,1) AS n11 FROM {0} WHERE hide = 1 ORDER BY ID", TableName));
                }
                else
                {
                    this.c.setSql(string.Format("SELECT id AS line, name, code || '.' || lower(name) || CASE WHEN lower(note) IS NULL THEN '' ELSE '-' || lower(note) END AS sname, code, note, feepolicy, SUBSTR(policy,1,1) AS n1, SUBSTR(policy,3,1) AS n3, SUBSTR(policy,5,1) AS n5, SUBSTR(policy,7,1) AS n7, SUBSTR(policy,9,1) AS n9, SUBSTR(policy,11,1) AS n11 FROM {0} WHERE hide = 0 ORDER BY ID", TableName));
                }
            }
            return this.c.FillData();
        }
        
        public DataTable get_data_service()
        {
            this.c.setSql("SELECT id AS line, servicename AS name, id || '.' || lower(servicename) || CASE WHEN lower(shorttext) IS NULL THEN '' ELSE '-' || lower(shorttext) END AS sname, category FROM hms_service ORDER BY ID");
            return this.c.FillData();
        }
        
        public DataTable get_data_service(string ServiceType)
        {
            this.c.setSql(string.Format("SELECT id AS line, servicename AS name, id || '.' || lower(servicename) || CASE WHEN lower(shorttext) IS NULL THEN '' ELSE '-' || lower(shorttext) END AS sname, category, note FROM hms_service WHERE servicetype = '{0}' AND hide = 0 ORDER BY ID", ServiceType));
            return this.c.FillData();
        }
        
        public DataTable get_data_value(string TableName)
        {
            this.c.setSql(string.Format("SELECT * FROM {0}", TableName));
            return this.c.FillData();
        }
        
        public DataTable get_data_value(string TableName, string ConditionValue)
        {
            this.c.setSql(string.Format("SELECT * FROM {0} WHERE {1} LIMIT 1", TableName, ConditionValue));
            return this.c.FillData();
        }
        
        public DataTable get_data_value(string TableName, string ColumeName, int SearchValue)
        {
            if (TableName.CompareTo("hm_fee_summary") == 0)
            {
                this.c.setSql(string.Format("SELECT sum(summoney) AS summoney, sum(sumpaid) AS sumpaid, sum(sumoutpay) AS sumoutpay, sum(sumnonpay) AS sumnonpay, sum(sumfree) AS sumfree, sum(sumdiscount) AS sumdiscount, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid, sum(sumreturn) AS sumreturn, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid FROM {0} WHERE {1} = {2} LIMIT 1", TableName, ColumeName, SearchValue));
            }
            else
            {
                this.c.setSql(string.Format("SELECT * FROM {0} WHERE {1} = {2} LIMIT 1", TableName, ColumeName, SearchValue));
            }
            return this.c.FillData();
        }
        
        public DataTable get_data_value(string TableName, string ColumeName, long SearchValue)
        {
            if (TableName.CompareTo("hm_fee_summary") == 0)
            {
                this.c.setSql(string.Format("SELECT sum(summoney) AS summoney, sum(sumpaid) AS sumpaid, sum(sumoutpay) AS sumoutpay, sum(sumnonpay) AS sumnonpay, sum(sumfree) AS sumfree, sum(sumdiscount) AS sumdiscount, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid, sum(sumreturn) AS sumreturn, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid FROM {0} WHERE {1} = {2} LIMIT 1", TableName, ColumeName, SearchValue));
            }
            else
            {
                this.c.setSql(string.Format("SELECT * FROM {0} WHERE {1} = {2} LIMIT 1", TableName, ColumeName, SearchValue));
            }
            return this.c.FillData();
        }
        
        public DataTable get_data_value(string TableName, string ColumeName, string SearchValue)
        {
            if (TableName.CompareTo("hm_fee_summary") == 0)
            {
                this.c.setSql(string.Format("SELECT sum(summoney) AS summoney, sum(sumpaid) AS sumpaid, sum(sumoutpay) AS sumoutpay, sum(sumnonpay) AS sumnonpay, sum(sumfree) AS sumfree, sum(sumdiscount) AS sumdiscount, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid, sum(sumreturn) AS sumreturn, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid FROM {0} WHERE {1} = {2} LIMIT 1", TableName, ColumeName, this.f.getValue(SearchValue)));
            }
            else
            {
                this.c.setSql(string.Format("SELECT * FROM {0} WHERE {1} = {2} LIMIT 1", TableName, ColumeName, this.f.getValue(SearchValue)));
            }
            return this.c.FillData();
        }
        
        public DataTable get_division(bool isHide)
        {
            if (isHide)
            {
                this.c.setSql("SELECT line, name, line || '.' || name AS sname, substr(note,1,1)::integer AS n1, substr(note,3,1)::integer AS n3, substr(note,5,1)::integer AS n5, substr(note,7,1)::integer AS n7, substr(note,9,1)::integer AS n9, reportid, 0 AS choose FROM hms_selection WHERE zone = 'general' AND sector = 'division' AND hide = 1 ORDER BY line");
            }
            else
            {
                this.c.setSql("SELECT line, name, line || '.' || name AS sname, substr(note,1,1)::integer AS n1, substr(note,3,1)::integer AS n3, substr(note,5,1)::integer AS n5, substr(note,7,1)::integer AS n7, substr(note,9,1)::integer AS n9, reportid, 0 AS choose FROM hms_selection WHERE zone = 'general' AND sector = 'division' AND hide = 0 ORDER BY line");
            }
            return this.c.FillData();
        }
        
        public DataTable get_doctor(bool isHide)
        {
            if (isHide)
            {
                this.c.setSql("SELECT a.id AS line, hm_getname(fname, mname, lname) AS name, a.id || '.' || lower(hm_getname(fname, mname, lname)) AS sname, title, b.note, c.divisionid, turnover, d.name AS divisionname FROM hm_employee a JOIN (SELECT * FROM hms_selection WHERE sector = 'title') b ON a.title = b.line JOIN hm_employee_task c ON a.id = c.employeeid JOIN (SELECT line, name FROM hms_selection WHERE sector = 'division') d ON c.divisionid = d.line WHERE b.note::integer in (1,2) AND a.status = 'O'");
            }
            else
            {
                this.c.setSql("SELECT a.id AS line, hm_getname(fname, mname, lname) AS name, a.id || '.' || lower(hm_getname(fname, mname, lname)) AS sname, title, b.note, c.divisionid, turnover, d.name AS divisionname FROM hm_employee a JOIN (SELECT * FROM hms_selection WHERE sector = 'title') b ON a.title = b.line JOIN hm_employee_task c ON a.id = c.employeeid JOIN (SELECT line, name FROM hms_selection WHERE sector = 'division') d ON c.divisionid = d.line WHERE a.hide = 0 and b.note::integer in (1,2) AND a.status = 'O'");
            }
            return this.c.FillData();
        }
        
        public DataTable get_drug(bool isHide)
        {
            if (isHide)
            {
                this.c.setSql("SELECT * FROM hm_drugview WHERE hide = 1");
            }
            else
            {
                this.c.setSql("SELECT * FROM hm_drugview WHERE hide = 0");
            }
            return this.c.FillData();
        }
        
        public DataTable get_drug(long DrugID)
        {
            this.c.setSql("SELECT * FROM hm_drugview WHERE id = " + DrugID);
            return this.c.FillData();
        }
        
        public DataTable get_drug_list(long StockID)
        {
            this.c.setSql(string.Format("SELECT usingdrugid, price, expireddate, drugname || '-' || content AS drugname, content, unit, companyproducername, country, note, sourcename, companydeliveryid, origin, sum(quantity - preparatory) AS instock_quantity FROM hms_instockview WHERE stockid = {0} and (quantity - preparatory) <> 0 GROUP BY usingdrugid, price, expireddate, drugname || '-' || content, content, unit, companyproducername, country, note, sourcename, companydeliveryid, origin", StockID));
            return this.c.FillData();
        }
        
        public DataTable get_drugselection(string zone)
        {
            this.c.setSql(string.Format("SELECT code AS line, name, selectiontype, note || name AS sname, 0 AS chk FROM hms_drugselection WHERE zone = {0} AND hide = 0 ORDER BY code", this.f.getValue(zone)));
            return this.c.FillData();
        }
        
        public DataTable get_drugselection(string Zone, bool isHide)
        {
            if (isHide)
            {
                this.c.setSql(string.Format("SELECT code AS line, name, selectiontype, note || name AS sname, 0 AS chk FROM hms_drugselection WHERE zone = '{0}'", Zone));
            }
            else
            {
                this.c.setSql(string.Format("SELECT code AS line, name, selectiontype, note || name AS sname, 0 AS chk FROM hms_drugselection WHERE zone = '{0}' AND hide = 0", Zone));
            }
            return this.c.FillData();
        }
        
        public DataTable get_drugselection(string zone, int Line)
        {
            this.c.setSql(string.Format("SELECT code AS line, name, hide::integer AS ishide FROM hms_drugselection WHERE zone = {0} AND code = {1} ORDER BY code", this.f.getValue(zone), Line));
            return this.c.FillData();
        }
        
        public DataTable get_drugselection(string zone, string StockType, string StockControl)
        {
            this.c.setSql(string.Format("SELECT code, name, selectiontype, selectionindepenid, other, note, 0 AS ischeck FROM hms_drugselection WHERE zone = {0} AND INSTR({1},selectiontype) AND INSTR({2}, code::text) AND hide = 0 ORDER BY code", this.f.getValue(zone), this.f.getValue(StockType), this.f.getValue(StockControl)));
            return this.c.FillData();
        }
        
        public DataTable get_drugselection(string zone, string StockType, string StockControl, string Note)
        {
            this.c.setSql(string.Format("SELECT code, name, selectiontype, selectionindepenid, other FROM hms_drugselection WHERE zone = {0} AND INSTR({1},selectiontype) AND INSTR({2}, code::text) AND hide = 0 AND note IN ({3}) ORDER BY code", new object[] { this.f.getValue(zone), this.f.getValue(StockType), this.f.getValue(StockControl), Note }));
            return this.c.FillData();
        }
        
        public DataTable get_employee(bool isHide)
        {
            if (isHide)
            {
                this.c.setSql("SELECT id AS line, hm_getname(fname, mname, lname) AS name, id || '.' || lower(hm_getname(fname, mname, lname)) AS sname, title FROM hm_employee a JOIN (SELECT * FROM hms_selection WHERE sector = 'title') b ON a.title = b.line");
            }
            else
            {
                this.c.setSql("SELECT id AS line, hm_getname(fname, mname, lname) AS name, id || '.' || lower(hm_getname(fname, mname, lname)) AS sname, title FROM hm_employee a JOIN (SELECT * FROM hms_selection WHERE sector = 'title') b ON a.title = b.line WHERE a.hide = 0");
            }
            return this.c.FillData();
        }
        
        public DataTable get_examroom(int RoomType)
        {
            this.c.setSql(string.Format("SELECT id AS line, name, code || '.' || lower(name) || CASE WHEN lower(note) IS NULL THEN '' ELSE '-' || lower(note) END AS sname, code, note, feepolicy, divisionid FROM hms_examroom WHERE hide = 0 AND feepolicy = {0} ORDER BY ID", RoomType));
            return this.c.FillData();
        }
        
        public int get_Instock(int StockID, long UsingdrugID)
        {
            try
            {
                this.c.setSql(string.Format("SELECT quantity-preparatory FROM hms_instockview WHERE stockid = {0} AND usingdrugid = {1}", StockID, UsingdrugID));
                return int.Parse(this.c.FillData().Rows[0][0].ToString());
            }
            catch
            {
                return 0;
            }
        }
        
        public DataTable Get_Patient_General(DateTime fromdate, DateTime todate)
        {
            this.c.setSql(string.Format("select distinct sohoso,hoten,ngayra,trangthai from test_chidaotuyen where ngayra between '{0}' and '{1}' and trangthai <> 'T'", this.f.getDValue(fromdate, "YMD"), this.f.getDValue(todate, "YMD")));
            return this.c.FillData();
        }
        
        public DataTable Get_PatientInfo_General(long MedID)
        {
            this.c.setSql(string.Format("select * from test_chidaotuyen where sohoso={0}", MedID));
            return this.c.FillData();
        }
        
        public DataTable Get_RelatedDiagnosis(long MedID)
        {
            this.c.setSql("select a.* , b.name AS groupname, c.vnname FROM hms_relateddiagnosis a JOIN (SELECT line, name FROM hms_selection WHERE zone='general' AND sector ='diagnosis') b ON a.diagnosistype = b.line JOIN hms_icd10 c ON a.diagnosisicd = c.icdcode WHERE a.medicalrecordid = " + MedID);
            return this.c.FillData();
        }
        
        public DataTable get_selection(string zone, bool isHide)
        {
            if (isHide)
            {
                this.c.setSql(string.Format("SELECT * FROM hms_selection WHERE zone = {0} AND hide = 1 ORDER BY line", this.f.getValue(zone)));
            }
            else
            {
                this.c.setSql(string.Format("SELECT * FROM hms_selection WHERE zone = {0} AND hide = 0 ORDER BY line", this.f.getValue(zone)));
            }
            return this.c.FillData();
        }
        
        public DataTable get_selection(string zone, string sector, bool isHide)
        {
            if (isHide)
            {
                this.c.setSql(string.Format("SELECT line, name, line || '.' || lower(name) || '.' || note AS sname, note, reportid, report, 0 AS choose FROM hms_selection WHERE zone = {0} AND sector = {1} AND hide = 1 ORDER BY line", this.f.getValue(zone), this.f.getValue(sector)));
            }
            else
            {
                this.c.setSql(string.Format("SELECT line, name, line || '.' || lower(name) || '.' || note AS sname, note, reportid, report, 0 AS choose FROM hms_selection WHERE zone = {0} AND sector = {1} AND hide = 0 ORDER BY line", this.f.getValue(zone), this.f.getValue(sector)));
            }
            return this.c.FillData();
        }
        
        public DataTable get_selection(string zone, string sector, bool isHide, string Condition)
        {
            if (sector.CompareTo("autotext") == 0)
            {
                if (isHide)
                {
                    this.c.setSql(string.Format("SELECT line, name, line || '.' || lower(name) || '.' || note AS sname, note, reportid, report, 0 AS choose FROM hms_selection WHERE zone = {0} AND sector = {1} AND hide = 1 {2} ORDER BY length(name) desc, name desc", this.f.getValue(zone), this.f.getValue(sector), Condition));
                }
                else
                {
                    this.c.setSql(string.Format("SELECT line, name, line || '.' || lower(name) || '.' || note AS sname, note, reportid, report, 0 AS choose FROM hms_selection WHERE zone = {0} AND sector = {1} AND hide = 0 {2} ORDER BY length(name) desc, name desc", this.f.getValue(zone), this.f.getValue(sector), Condition));
                }
            }
            else if (isHide)
            {
                this.c.setSql(string.Format("SELECT line, name, line || '.' || lower(name) || '.' || note AS sname, note, reportid, report, 0 AS choose FROM hms_selection WHERE zone = {0} AND sector = {1} AND hide = 1 {2} ORDER BY line", this.f.getValue(zone), this.f.getValue(sector), Condition));
            }
            else
            {
                this.c.setSql(string.Format("SELECT line, name, line || '.' || lower(name) || '.' || note AS sname, note, reportid, report, 0 AS choose FROM hms_selection WHERE zone = {0} AND sector = {1} AND hide = 0 {2} ORDER BY line", this.f.getValue(zone), this.f.getValue(sector), Condition));
            }
            return this.c.FillData();
        }
        
        public DataTable get_selection(string zone, string sector, string note, string condition)
        {
            this.c.setSql(string.Format("select * FROM hms_selection WHERE zone = '{0}' AND sector = '{1}' {2}", zone, sector, condition));
            return this.c.FillData();
        }
        
        public string get_selection_description(string zone, string sector, int Line, bool isHide)
        {
            if (isHide)
            {
                this.c.setSql(string.Format("SELECT description FROM hms_selection WHERE zone = {0} AND sector = {1} AND line = {2} AND hide = 1 ORDER BY line", this.f.getValue(zone), this.f.getValue(sector), Line));
            }
            else
            {
                this.c.setSql(string.Format("SELECT description FROM hms_selection WHERE zone = {0} AND sector = {1} AND line = {2} AND hide = 0 ORDER BY line", this.f.getValue(zone), this.f.getValue(sector), Line));
            }
            try
            {
                return this.c.FillData().Rows[0][0].ToString();
            }
            catch
            {
            }
            return "";
        }
        
        public string get_selection_name(string zone, string sector, int Line, bool isHide)
        {
            if (isHide)
            {
                this.c.setSql(string.Format("SELECT name FROM hms_selection WHERE zone = {0} AND sector = {1} AND line = {2} AND hide = 1 ORDER BY line", this.f.getValue(zone), this.f.getValue(sector), Line));
            }
            else
            {
                this.c.setSql(string.Format("SELECT name FROM hms_selection WHERE zone = {0} AND sector = {1} AND line = {2} AND hide = 0 ORDER BY line", this.f.getValue(zone), this.f.getValue(sector), Line));
            }
            try
            {
                return this.c.ExecuteScalar();
            }
            catch
            {
            }
            return "";
        }
        
        public string get_selection_note(string zone, string sector, int Line, bool isHide)
        {
            if (isHide)
            {
                this.c.setSql(string.Format("SELECT note FROM hms_selection WHERE zone = {0} AND sector = {1} AND line = {2} AND hide = 1 ORDER BY line", this.f.getValue(zone), this.f.getValue(sector), Line));
            }
            else
            {
                this.c.setSql(string.Format("SELECT note FROM hms_selection WHERE zone = {0} AND sector = {1} AND line = {2} AND hide = 0 ORDER BY line", this.f.getValue(zone), this.f.getValue(sector), Line));
            }
            try
            {
                return this.c.FillData().Rows[0][0].ToString();
            }
            catch
            {
            }
            return "";
        }
        
        public DataTable get_stock()
        {
            this.c.setSql("SELECT code AS line, name, code || '.' || name AS sname, selectiontype FROM hms_drugselection WHERE zone = 'stock'");
            return this.c.FillData();
        }
        
        public DataTable get_stockselection(string StockType)
        {
            string str = "";
            switch (StockType)
            {
                case "mainstock":
                    str = "M";
                    break;
                
                case "substock":
                    str = "S";
                    break;
                
                case "emergstock":
                    str = "E";
                    break;
                
                case "issuestock":
                    str = "R";
                    break;
            }
            this.c.setSql(string.Format("SELECT code AS line, name, selectiontype, note || name AS sname FROM hms_drugselection WHERE zone = 'stock' AND selectiontype = '{0}' AND hide = 0 ORDER BY code", str));
            return this.c.FillData();
        }
        
        public DataTable get_used()
        {
            this.c.setSql("SELECT b.id, hm_getname(fname, mname, lname) AS fullname FROM hm_user a JOIN hm_employee b ON a.employeeid = b.id");
            return this.c.FillData();
        }
        
        public DataTable getArchivesBook(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_archives_book WHERE rep_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getChangeHospitalReport(long MedID, long PatID)
        {
            this.c.setSql(string.Concat(new object[] { "select * from his_get_report_change_hospital('", MedID, ";", PatID, "')" }));
            return this.c.FillData();
        }
        
        public DataTable getClosePatientList(DateTime From, DateTime To, int PatientObject)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_report_treatment_patient_detail('{0};{1};4;{2}')", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), PatientObject));
            return this.c.FillData();
        }
        
        public DataTable getConcluctionExam(DateTime From, DateTime To, int ExamRoomID)
        {
            if (ExamRoomID <= 0)
            {
                this.c.setSql(string.Format("SELECT medicalrecordid, CASE WHEN insure = 1 THEN 'X' ELSE null END AS insure, insure AS isinsure, hm_getname(fname, mname, lname) AS fullname, birthyear, CASE WHEN female = 1 THEN 'Nữ' ELSE 'Nam' END AS sex, examdiagnosisicd, exam_date, c.name AS examroomname, examdiagnosisvn, CASE WHEN treatmentdivisionid <> 0 THEN 'X' ELSE null END AS inhosp, CASE WHEN chghosp <> 0 THEN 'X' ELSE null END AS chghosp, CASE WHEN treatmentdivisionid <> 0 THEN 1 ELSE 0 END AS isinhosp, CASE WHEN chghosp <> 0 THEN 1 ELSE 0 END AS ischghosp, CASE WHEN date_part('year', current_date) - birthyear < 15 THEN 'X' ELSE null END child, CASE WHEN date_part('year', current_date) - birthyear < 15 THEN 1 ELSE 0 END ischild, external_icd, external_vncode FROM hm_conclustion_exam_list a JOIN hms_patient b ON a.patientid = b.id JOIN hms_examroom c ON a.examroomid = c.id WHERE exam_date BETWEEN '{0}'::timestamp and '{1}'::timestamp", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            }
            else
            {
                this.c.setSql(string.Format("SELECT medicalrecordid, CASE WHEN insure = 1 THEN 'X' ELSE null END AS insure, insure AS isinsure, hm_getname(fname, mname, lname) AS fullname, birthyear, CASE WHEN female = 1 THEN 'Nữ' ELSE 'Nam' END AS sex, examdiagnosisicd, exam_date, c.name AS examroomname, examdiagnosisvn, CASE WHEN treatmentdivisionid <> 0 THEN 'X' ELSE null END AS inhosp, CASE WHEN chghosp <> 0 THEN 'X' ELSE null END AS chghosp, CASE WHEN treatmentdivisionid <> 0 THEN 1 ELSE 0 END AS isinhosp, CASE WHEN chghosp <> 0 THEN 1 ELSE 0 END AS ischghosp, CASE WHEN date_part('year', current_date) - birthyear < 15 THEN 'X' ELSE null END child, CASE WHEN date_part('year', current_date) - birthyear < 15 THEN 1 ELSE 0 END ischild, external_icd, external_vncode FROM hm_conclustion_exam_list a JOIN hms_patient b ON a.patientid = b.id JOIN hms_examroom c ON a.examroomid = c.id WHERE exam_date BETWEEN '{0}'::timestamp and '{1}'::timestamp and examroomid = {2}", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ExamRoomID));
            }
            return this.c.FillData();
        }
        
        public DataTable getConcluctionExam(DateTime From, DateTime To, int ExamRoomID, string PatientType)
        {
            string str = "";
            switch (PatientType)
            {
                case "1":
                    str = " AND insure = 1 ";
                    break;
                
                case "2":
                    str = " AND insure = 0 ";
                    break;
            }
            if (ExamRoomID <= 0)
            {
                this.c.setSql(string.Format("SELECT medicalrecordid, CASE WHEN insure = 1 THEN 'X' ELSE null END AS insure, insure AS isinsure, hm_getname(fname, mname, lname) AS fullname, birthyear, CASE WHEN female = 1 THEN 'Nữ' ELSE 'Nam' END AS sex, examdiagnosisicd, exam_date, c.name AS examroomname, examdiagnosisvn, CASE WHEN treatmentdivisionid <> 0 THEN 'X' ELSE null END AS inhosp, CASE WHEN chghosp <> 0 THEN 'X' ELSE null END AS chghosp, CASE WHEN treatmentdivisionid <> 0 THEN 1 ELSE 0 END AS isinhosp, CASE WHEN chghosp <> 0 THEN 1 ELSE 0 END AS ischghosp, CASE WHEN date_part('year', current_date) - birthyear < 15 THEN 'X' ELSE null END child, CASE WHEN date_part('year', current_date) - birthyear < 15 THEN 1 ELSE 0 END ischild, external_icd, external_vncode FROM hm_conclustion_exam_list a JOIN hms_patient b ON a.patientid = b.id JOIN hms_examroom c ON a.examroomid = c.id WHERE exam_date BETWEEN '{0}'::timestamp and '{1}'::timestamp {2}", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), str));
            }
            else
            {
                this.c.setSql(string.Format("SELECT medicalrecordid, CASE WHEN insure = 1 THEN 'X' ELSE null END AS insure, insure AS isinsure, hm_getname(fname, mname, lname) AS fullname, birthyear, CASE WHEN female = 1 THEN 'Nữ' ELSE 'Nam' END AS sex, examdiagnosisicd, exam_date, c.name AS examroomname, examdiagnosisvn, CASE WHEN treatmentdivisionid <> 0 THEN 'X' ELSE null END AS inhosp, CASE WHEN chghosp <> 0 THEN 'X' ELSE null END AS chghosp, CASE WHEN treatmentdivisionid <> 0 THEN 1 ELSE 0 END AS isinhosp, CASE WHEN chghosp <> 0 THEN 1 ELSE 0 END AS ischghosp, CASE WHEN date_part('year', current_date) - birthyear < 15 THEN 'X' ELSE null END child, CASE WHEN date_part('year', current_date) - birthyear < 15 THEN 1 ELSE 0 END ischild, external_icd, external_vncode FROM hm_conclustion_exam_list a JOIN hms_patient b ON a.patientid = b.id JOIN hms_examroom c ON a.examroomid = c.id WHERE exam_date BETWEEN '{0}'::timestamp and '{1}'::timestamp and examroomid = {2} {3}", new object[] { this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ExamRoomID, str }));
            }
            return this.c.FillData();
        }
        
        public static string getConditionICDStatisticsValue(string Value)
        {
            string str = "";
            if (Value.CompareTo("") != 0)
            {
                if (Value.IndexOf(";") < 0)
                {
                    return Value;
                }
                string[] strArray = Value.Split(new char[] { ';' });
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (str.CompareTo("") == 0)
                    {
                        str = string.Format("initialdiagnosisicd like '{0}%'", strArray[i]);
                    }
                    else
                    {
                        str = str + string.Format(" OR initialdiagnosisicd like '{0}%'", strArray[i]);
                    }
                }
                return str;
            }
            return "initialdiagnosisicd like '%'";
        }
        
        public DataTable getConfig(string Zone)
        {
            this.c.setSql(string.Format("SELECT * FROM hms_selection WHERE zone = {0}", this.f.getValue(Zone)));
            return this.c.FillData();
        }
        
        public DataTable getConfig(string Zone, string Sector)
        {
            this.c.setSql(string.Format("SELECT line, name FROM hms_selection WHERE zone = {0} AND sector = {1} ", this.f.getValue(Zone), this.f.getValue(Sector)));
            return this.c.FillData();
        }
        
        public string getConfig(string Zone, string Sector, int Line)
        {
            this.c.setSql(string.Format("SELECT name FROM hms_selection WHERE zone = {0} AND sector = {1} AND line = {2}", this.f.getValue(Zone), this.f.getValue(Sector), Line));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public DataTable getConfigList()
        {
            string sql = "";
            sql = (sql + "SELECT a.note::integer AS groupid, b.name AS groupname, a.id, a.name, report ") + "FROM (SELECT line AS id, name, note, report FROM hms_selection WHERE zone = 'config' AND sector = 'config' AND hide = 0) a JOIN " + "(select line AS id, name FROM hms_selection WHERE zone = 'config' AND sector = 'config' AND note::integer = 0) b ON a.note::integer = b.id";
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public int getCountEmergencyNow(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT count(id) FROM rep_general WHERE repdate between '{0}'::timestamp and '{1}'::timestamp AND keys = 10", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return int.Parse(this.c.FillData().Rows[0][0].ToString());
        }
        
        public string getCountMedicalDrugStore(int DivisionID)
        {
            this.c.setSql(string.Format("SELECT count(medicalrecordid) FROM (SELECT medicalrecordid FROM hms_patientdrug WHERE ischgdstore = 0 AND supplyid = {0} AND stockid = 599 GROUP BY medicalrecordid) a ", DivisionID));
            return this.c.ExecuteScalar();
        }
        
        public string getCountMedicalDrugStore(int DivisionID, string Array_MedID)
        {
            this.c.setSql(string.Format("SELECT count(id) FROM hms_medicalrecord WHERE id IN ({0})", Array_MedID));
            return this.c.ExecuteScalar();
        }
        
        public bool getCurrentQueuePaid(int TableNumber, int Zone, long MedID, int CallNumber)
        {
            this.c.setSql(string.Format("SELECT hm_make_current_reception('{0};{1};{2};{3}')", new object[] { Zone, TableNumber, MedID, CallNumber }));
            return this.c.RunSql();
        }
        
        public DataTable getDependence(bool isHide)
        {
            if (isHide)
            {
                this.c.setSql("select id, servicename, unit, price, insprice, servicetype, id || ':' || lower(servicename) || CASE WHEN shorttext IS NOT NULL THEN '(' || shorttext ||')' ELSE '' END AS sname FROM hms_service");
            }
            else
            {
                this.c.setSql("select id, servicename, unit, price, insprice, servicetype, id || ':' || lower(servicename) || CASE WHEN shorttext IS NOT NULL THEN '(' || shorttext ||')' ELSE '' END AS sname FROM hms_service WHERE hide = 0");
            }
            return this.c.FillData();
        }
        
        public DataTable getDependence(string Keys, bool isHide)
        {
            if (isHide)
            {
                this.c.setSql(string.Format("select id, servicename, unit, price, insprice FROM hms_service WHERE servicetype = '{0}'", Keys));
            }
            else
            {
                this.c.setSql(string.Format("select id, servicename, unit, price, insprice FROM hms_service WHERE servicetype = '{0}' AND hide = 0", Keys));
            }
            return this.c.FillData();
        }
        
        public DataTable getDrug(bool isHide)
        {
            if (isHide)
            {
                this.c.setSql("select drugid AS id, drugname AS name, unit, content, lower(drugname) || ' ' || lower(unit) || ' ' || lower(content) AS sname, price, regid FROM hm_drugview");
            }
            else
            {
                this.c.setSql("select drugid AS id, drugname AS name, unit, content, lower(drugname) || ' ' || lower(unit) || ' ' || lower(content) AS sname, price, regid FROM hm_drugview WHERE hide = 0");
            }
            return this.c.FillData();
        }
        
        public DataTable getDrugAllStore(string Values, string InStockType, string InControl)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_drug_all_store WHERE sname LIKE '%{0}%' AND stocktype IN ({1}) AND signcontrol IN ({2})", Values.ToLower(), InStockType, InControl));
            return this.c.FillData();
        }
        
        public DataTable getDrugCheck(long MedID)
        {
            this.c.setSql("SELECT * FROM hm_drug_stockreceiver WHERE medicalrecordid = " + MedID);
            return this.c.FillData();
        }
        
        public DataTable getDrugClass()
        {
            this.c.setSql("SELECT 0 AS chs, id, drugname AS name FROM hm_usingdrugview where drugid IN (SELECT id FROM hms_drug where drugidentityid = 999999998)");
            return this.c.FillData();
        }
        
        public DataTable getDrugClassDetail(long DrugClass)
        {
            this.c.setSql("SELECT a.groupclassid AS id, drugid, b.name AS drugname, c.name AS unitname, quantity FROM hms_drugclass a JOIN hms_drug b ON a.drugid = b.id JOIN (SELECT * FROM hms_drugselection WHERE zone = 'unit') c ON b.unitid = c.code WHERE a.groupclassid = " + DrugClass);
            return this.c.FillData();
        }
        
        public DataTable getDrugClassStock(int StockID)
        {
            this.c.setSql(string.Format("SELECT 1 AS chs, id, drugname AS name FROM hm_usingdrugview where drugid IN (SELECT id FROM hms_drug where drugidentityid = 999999998) AND id IN (SELECT usingdrugid FROM hms_instock WHERE stockid = {0})", StockID));
            return this.c.FillData();
        }
        
        public int getDrugInStock(long Values, int StockID)
        {
            this.c.setSql(string.Format("SELECT instock FROM hm_drug_instock_view WHERE id = {0} AND stockid = {1}", Values, StockID));
            return int.Parse(this.c.FillData().Rows[0][0].ToString());
        }
        
        public DataTable getDrugInStock(string Values, int StockID)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_drug_instock_view WHERE sname LIKE '%{0}%' AND stockid = {1}", Values.ToLower(), StockID));
            return this.c.FillData();
        }
        
        public DataTable getDrugInStock(string Values, int StockID, int TypeInStock)
        {
            switch (TypeInStock)
            {
                case 0:
                    this.c.setSql(string.Format("SELECT * FROM hm_drug_instock_view WHERE sname LIKE '%{0}%' AND stockid = {1}", Values.ToLower(), StockID));
                    break;
                
                case 1:
                    this.c.setSql(string.Format("SELECT id, name, unit, content, sname, stockname, stockid, reback AS instock, stocktype, signcontrol, expireddate, note, origin, price, countryname, sourcename FROM hm_drug_instock_view WHERE sname LIKE '%{0}%' AND stockid = {1}", Values.ToLower(), StockID));
                    break;
            }
            return this.c.FillData();
        }
        
        public DataTable getDrugStoreBill(long MedID)
        {
            this.c.setSql(string.Format("SELECT a.*, general_num2text(summoney) AS moneytext FROM hm_patientdrug_bill_1 a JOIN (SELECT medicalrecordid, sum(money) AS summoney FROM hm_patientdrug_bill_1 WHERE medicalrecordid = {0} AND (ischgdstore = 1 OR supplyid IN (SELECT code FROM hms_drugselection WHERE note = 'NT' AND selectiontype = 'S')) GROUP BY medicalrecordid) b ON a.medicalrecordid = b.medicalrecordid WHERE a.medicalrecordid = {0} AND (ischgdstore = 1 OR supplyid IN (SELECT code FROM hms_drugselection WHERE note = 'NT' AND selectiontype = 'S'))", MedID));
            return this.c.FillData();
        }
        
        public int getDrugStoreID()
        {
            this.c.setSql("SELECT code FROM hms_drugselection WHERE zone = 'stock' AND note IN ('NT','BL') AND othername = '1' AND code IN (" + this.sys_info.getStockControl() + ") LIMIT 1");
            return int.Parse(this.c.ExecuteScalar());
        }
        
        public int getEmployeeCard()
        {
            this.c.setSql("SELECT count(id) FROM hm_employee_card");
            return int.Parse(this.c.ExecuteScalar());
        }
        
        public DataTable getEmployeeCard1(int xRow)
        {
            this.c.setSql("SELECT * FROM hm_employee_card ORDER BY divisionid, id LIMIT " + xRow);
            return this.c.FillData();
        }
        
        public DataTable getEmployeeCard2(int xRow)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_employee_card ORDER BY divisionid, id OFFSET {0}", xRow));
            return this.c.FillData();
        }
        
        public DataTable getExamBill(long MedID, long ReceptionID, string Ticket)
        {
            object obj2;
            string sql = "";
            if (ReceptionID == 0L)
            {
                if (Ticket.CompareTo("") == 0)
                {
                    sql = "SELECT price - CASE WHEN feemode < 400 THEN discountvalue ELSE 0 END AS price, CASE WHEN paidbycard = 1 AND insname IS NOT NULL THEN insname ELSE servicename END servicename, cashierid, invoidid, d.fullname AS username ";
                    sql = (sql + "FROM hms_fee a LEFT JOIN hm_userinfoview d ON a.cashierid = d.id ") + "WHERE feetype = 'E' AND status = 'P' AND medicalrecordid = " + MedID;
                }
                else
                {
                    sql = "SELECT price - CASE WHEN feemode < 400 THEN discountvalue ELSE 0 END AS price, CASE WHEN paidbycard = 1 AND insname IS NOT NULL THEN insname ELSE servicename END servicename, cashierid, invoidid, d.fullname AS username ";
                    obj2 = sql;
                    sql = string.Concat(new object[] { obj2, "FROM hms_fee a JOIN (SELECT feeid FROM hms_reception WHERE ticketnumber = '", Ticket, "' AND medicalrecordid = ", MedID, ") b ON a.id = b.feeid  LEFT JOIN hm_userinfoview d ON a.cashierid = d.id " }) + "WHERE feetype = 'E' AND status = 'P' AND medicalrecordid = " + MedID;
                }
            }
            else
            {
                sql = "SELECT price - CASE WHEN feemode < 400 THEN discountvalue ELSE 0 END AS price, CASE WHEN paidbycard = 1 AND insname IS NOT NULL THEN insname ELSE servicename END servicename, cashierid, invoidid, d.fullname AS username ";
                obj2 = sql + "FROM hms_fee a LEFT JOIN hm_userinfoview d ON a.cashierid = d.id ";
                sql = string.Concat(new object[] { obj2, "WHERE feetype = 'E' AND status = 'P' AND medicalrecordid = ", MedID, " AND servicecode IN (SELECT feeid::text FROM hms_reception WHERE id = ", ReceptionID, ")" });
            }
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getExamBook(DateTime From, DateTime To, int ExamRoomID, string Patient_Object, bool SumLastRoom)
        {
            if (!SumLastRoom)
            {
                this.c.setSql(string.Format("SELECT id, patientid, code, fullname, male, female, drugexam AS drugall, fulladdress, examdiagnosisicd, outhosp, uphosp, sphosp, inhosp, homehosp, downhosp, surgery, doctorname, examtypename, otherhospitalicd, otherhospital, close_date::date, examroomid, examroomname, exam_date::date, medicalrecordid || chr(13) || chr(10) || fullname AS medicalname, examdiagnosisicd AS diagall FROM rep_exambook WHERE exam_date::date BETWEEN '{0}'::date AND '{1}'::date AND receptionstatus = 'T' AND examroomid = {2} AND patient_object IN ({3}) ORDER BY id", new object[] { this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD"), ExamRoomID, Patient_Object }));
            }
            else
            {
                string sql = "";
                sql = sql + "SELECT a.id, a.patientid, a.code, fullname, male, female, fulladdress, outhosp, uphosp, sphosp, inhosp, homehosp, downhosp, surgery, doctorname, examtypename, a.otherhospitalicd, a.otherhospital, a.close_date::date, b.examroomid, c.name AS examroomname, b.close_date::date AS exam_date, b.id || chr(13) || chr(10) || fullname AS medicalname, a.medicalrecordid, CASE WHEN drugall IS NULL THEN drugexam ELSE drugall END AS drugall, examdiagnosisicd AS diagall " + string.Format("FROM rep_exambook a JOIN hms_medicalrecord b ON a.medicalrecordid = b.id AND a.examroomid = b.examroomid join hms_examroom c ON b.examroomid = c.id where b.close_date::date BETWEEN '{0}'::date AND '{1}'::date AND receptionstatus = 'T' AND patient_object IN ({2}) AND a.examroomid = {3} ORDER BY b.close_date::date, b.examroomid, a.medicalrecordid, id", new object[] { this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD"), Patient_Object, ExamRoomID });
                this.c.setSql(sql);
            }
            return this.c.FillData();
        }
        
        public DataTable getExamBook_Diag(long MedID)
        {
            this.c.setSql("SELECT drugexam, examdiagnosisicd FROM rep_exambook WHERE medicalrecordid = " + MedID);
            return this.c.FillData();
        }
        
        public DataTable getExamConclusion(long ReceptionID)
        {
            this.c.setSql("SELECT * FROM hm_exam_conclusion WHERE id = " + ReceptionID);
            return this.c.FillData();
        }
        
        public DataTable getExamEmergency(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT * from hm_exam_emergency WHERE creationdate BETWEEN '{0}'::timestamp AND '{1}'::timestamp", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getExamICD(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT a.examroomid, b.name, examdiagnosisicd, outdiagnosisicd, c.vnname, c.vncode, sum(sum_exam) AS sum_exam, sum(insure) AS insure, sum(die) AS die, sum(child) AS child, sum(female) AS female FROM rep_exam_list a JOIN hms_examroom b ON a.examroomid = b.id JOIN hms_icd10 c ON a.examdiagnosisicd = c.icdcode WHERE exam_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp GROUP BY a.examroomid, b.name, examdiagnosisicd, outdiagnosisicd, c.vnname, c.vncode", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getExamICD(DateTime From, DateTime To, int ExamroomID)
        {
            this.c.setSql(string.Format("SELECT a.examroomid, b.name, examdiagnosisicd, outdiagnosisicd, c.vnname, c.vncode, sum(sum_exam) AS sum_exam, sum(insure) AS insure, sum(die) AS die, sum(child) AS child, sum(female) AS female FROM rep_exam_list a JOIN hms_examroom b ON a.examroomid = b.id JOIN hms_icd10 c ON a.examdiagnosisicd = c.icdcode WHERE exam_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp AND a.examroomid = {2} GROUP BY a.examroomid, b.name, examdiagnosisicd, outdiagnosisicd, c.vnname, c.vncode", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ExamroomID));
            return this.c.FillData();
        }
        
        public DataTable getExamICD_General(DateTime From, DateTime To, string ExamRoom)
        {
            this.c.setSql(string.Format("SELECT examdiagnosisicd, outdiagnosisicd, c.vnname, c.vncode, sum(sum_exam) AS sum_exam, sum(insure) AS insure, sum(die) AS die, sum(child) AS child, sum(female) AS female FROM rep_exam_list a JOIN hms_examroom b ON a.examroomid = b.id JOIN hms_icd10 c ON a.examdiagnosisicd = c.icdcode WHERE exam_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp AND a.examroomid IN ({2}) GROUP BY examdiagnosisicd, outdiagnosisicd, c.vnname, c.vncode", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ExamRoom));
            return this.c.FillData();
        }
        
        public DataTable getExamInsurance(DateTime From, DateTime To)
        {
            int num = this.pinfo.getProvince();
            int num2 = this.pinfo.getDefHospital();
            this.c.setSql(string.Format("SELECT count(sohoso) AS sumpat, CASE WHEN uline = 1 THEN 'Tr\x00e1i Tuyến' ELSE 'Đ\x00fang Tuyến' END AS line, c.name as doituong FROM rep_bhyt a JOIN (SELECT signal, levelnum, reportid FROM hms_cardchar WHERE validitydate = '2009-10-01'::date) b ON a.kytu = b.signal JOIN (SELECT note, name FROM hms_selection where zone='report' and sector='config1') c ON CASE WHEN matinh = {0} THEN CASE WHEN manoidkbd::integer = {1} THEN CASE WHEN nvyte = 1 THEN 'F' ELSE 'A' END ELSE 'B' END ELSE 'C' END = c.note WHERE repdate BETWEEN '{2}'::timestamp AND '{3}'::timestamp AND noitru = 0 GROUP BY c.name, CASE WHEN uline = 1 THEN 'Tr\x00e1i Tuyến' ELSE 'Đ\x00fang Tuyến' END, CASE WHEN matinh = {0} THEN CASE WHEN manoidkbd::integer = {1} THEN CASE WHEN nvyte = 1 THEN 'F' ELSE 'A' END ELSE 'B' END ELSE 'C' END, CASE WHEN uline = 1 THEN 'Tr\x00e1i Tuyến' ELSE 'Đ\x00fang Tuyến' END", new object[] { num, num2, this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT") }));
            return this.c.FillData();
        }
        
        public DataTable getExamOccupation(DateTime From, DateTime To, string ID, bool Insure)
        {
            if (Insure)
            {
                this.c.setSql(string.Format("SELECT 1 AS keys, occupationname || CASE WHEN insure = 1 THEN ' - BHYT' ELSE '' END AS name, SUM(quantity) AS quantity FROM hm_exam_percent WHERE exam_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp AND occupationid IN ({2}) GROUP BY occupationname, occupationname || CASE WHEN insure = 1 THEN ' - BHYT' ELSE '' END ORDER BY occupationname", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ID));
            }
            else
            {
                this.c.setSql(string.Format("SELECT 1 AS keys, occupationname AS name, SUM(quantity) AS quantity FROM hm_exam_percent WHERE exam_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp AND occupationid IN ({2}) GROUP BY occupationname ORDER BY occupationname", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ID));
            }
            return this.c.FillData();
        }
        
        public DataTable getExamPatientIssue(int StockID, string Status)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_exampatient_issue WHERE requestdate::date = current_date and delivererstockid = {0} and drugstatus = '{1}'", StockID, Status));
            return this.c.FillData();
        }
        
        public DataTable getExamPatientIssue(int StockID, DateTime From, DateTime To, string Status)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_exampatient_issue WHERE requestdate::date BETWEEN '{0}'::date AND '{1}'::date and delivererstockid = {2} and drugstatus = '{3}'", new object[] { this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD"), StockID, Status }));
            return this.c.FillData();
        }
        
        public DataTable getExamPatientIssueAccept(int StockID, string Status)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_exampatient_issue_accept WHERE requestdate::date = current_date and delivererstockid = {0} and drugstatus = '{1}'", StockID, Status));
            return this.c.FillData();
        }
        
        public DataTable getExamPatientIssueAccept(int StockID, DateTime From, DateTime To, string Status)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_exampatient_issue_accept WHERE requestdate::date BETWEEN '{0}'::date AND '{1}'::date and delivererstockid = {2} and drugstatus = '{3}'", new object[] { this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD"), StockID, Status }));
            return this.c.FillData();
        }
        
        public DataTable getExamRoomChoose()
        {
            this.c.setSql("SELECT id, name, code, 0 AS choose, feepolicy FROM hms_examroom WHERE hide = 0");
            return this.c.FillData();
        }
        
        public DataTable getExportHosp(DateTime From, DateTime To, int PatientObject)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_report_treatment_patient('{0};{1};2;{2}')", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), PatientObject));
            return this.c.FillData();
        }
        
        public DataTable getExportPatientList(DateTime From, DateTime To, int PatientObject)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_report_treatment_patient_detail('{0};{1};7;{2}')", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), PatientObject));
            return this.c.FillData();
        }
        
        public DataTable getFeeFromDivision()
        {
            this.c.setSql("select *, 0 AS new_prepaid from hm_fee_general_division");
            return this.c.FillData();
        }
        
        public DataTable getFeeFromDivision(int DivisionID)
        {
            if (DivisionID == 0x27)
            {
                this.c.setSql(string.Format("select *, 0 AS new_prepaid from hm_fee_general_division where treatmentdivisionid IN (SELECT id FROM hms_examroom WHERE divisionid = {0})", DivisionID));
            }
            else
            {
                this.c.setSql("select *, 0 AS new_prepaid from hm_fee_general_division where treatmentdivisionid = " + DivisionID);
            }
            return this.c.FillData();
        }
        
        public DataTable getFeeGeneral(long MedID, bool isCallBackup, int FeeType, bool isPaid)
        {
            this.c.setSql(string.Format("select * from his_get_fee_general('{0};0;{1};{2}')", MedID, this.f.Boolean2Int(isCallBackup), FeeType));
            return this.c.FillData();
        }
        
        public DataTable getFeeGeneral(long MedID, bool isCallBackup, int FeeType, long PaidID)
        {
            this.c.setSql(string.Format("select * from his_get_fee_general('{0};{1};{2};{3}')", new object[] { MedID, PaidID, this.f.Boolean2Int(isCallBackup), FeeType }));
            return this.c.FillData();
        }
        
        public DataTable getFeeGeneral(long MedID, long PaidID, bool isCallBackup, int FeeType, bool isAll)
        {
            string str = "";
            switch (FeeType)
            {
                case 0:
                    str = " AND feemode NOT IN (SELECT code FROM hms_drugselection WHERE note IN ('BL','NT')) ";
                    break;
                
                case 1:
                    str = " AND feemode IN (SELECT code FROM hms_drugselection WHERE note IN ('BL','NT')) ";
                    break;
            }
            string str2 = "";
            if (isAll)
            {
                str2 = "";
            }
            else
            {
                str2 = " AND selfpaid <> 0 ";
            }
            if (!isCallBackup)
            {
                this.c.setSql(string.Format("SELECT medicalrecordid, servicename, unit, fprice, fullname, birthyear, sex, fulladdress, paidid, paiddate, invoidid, username, groupname, code, fromdate, todate, main_icd, sum(disparity_price) AS disparity_price, sum(selfpaid) AS selfpaid, sum(sum_quantity) AS sum_quantity, sum(sum_money) AS sum_money, sum(sum_money_disparity) AS sum_money_disparity, sum(insurediscount) AS insurediscount, sum(sum_money - (insurediscount + freemoney)) AS sum_selfpaid, invoidid, sum(freemoney) AS freemoney FROM hm_fee_general WHERE medicalrecordid = {0} AND invoidid = {1} {3} {2} GROUP BY medicalrecordid, servicename, unit, fprice, fullname, birthyear, sex, fulladdress, paidid, paiddate, invoidid, username, groupname, code, fromdate, todate, main_icd", new object[] { MedID, PaidID, str, str2 }));
            }
            else
            {
                this.c.setSql(string.Format("SELECT medicalrecordid, servicename, unit, fprice, fullname, birthyear, sex, fulladdress, paidid, paiddate, invoidid, username, groupname, code, fromdate, todate, main_icd, sum(disparity_price) AS disparity_price, sum(selfpaid) AS selfpaid, sum(sum_quantity) AS sum_quantity, sum(sum_money) AS sum_money, sum(sum_money_disparity) AS sum_money_disparity, sum(insurediscount) AS insurediscount, sum(sum_money - (insurediscount + freemoney)) AS sum_selfpaid, invoidid, sum(freemoney) AS freemoney FROM hm_fee_general_backup WHERE medicalrecordid = {0} AND invoidid = {1} {3} {2} GROUP BY medicalrecordid, servicename, unit, fprice, fullname, birthyear, sex, fulladdress, paidid, paiddate, invoidid, username, groupname, code, fromdate, todate, main_icd", new object[] { MedID, PaidID, str, str2 }));
            }
            return this.c.FillData();
        }
        
        public DataTable getFeeGeneralDiv(long MedID)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_fee_general_div WHERE medicalrecordid = {0} AND feemode NOT IN (SELECT code FROM hms_drugselection WHERE note IN ('BL','NT')) ", MedID));
            return this.c.FillData();
        }
        
        public DataTable getFeeGeneralDivSurg(long MedID)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_fee_general_div WHERE medicalrecordid = {0} AND feemode NOT IN (SELECT code FROM hms_drugselection WHERE note IN ('BL','NT')) AND supplierid IN (SELECT code FROM hms_drugselection WHERE zone = 'stock' AND note = '9') ", MedID));
            return this.c.FillData();
        }
        
        public DataTable getFeeInfo(long MedID, bool isCallBackup, int FeeType)
        {
            string str = "";
            switch (FeeType)
            {
                case 0:
                    str = " AND feemode NOT IN (SELECT code FROM hms_drugselection WHERE note IN ('BL','NT')) ";
                    break;
                
                case 1:
                    str = " AND feemode IN (SELECT code FROM hms_drugselection WHERE note IN ('BL','NT')) ";
                    break;
                
                case 2:
                    str = "";
                    break;
            }
            if (isCallBackup)
            {
                this.c.setSql(string.Format("SELECT id AS feeid, medicalrecordid, servicedate, servicename, unit, sum(quantity) AS sum_quantity, price, inspaid, sum(selfpaid) AS sum_selfpaid, sum(paidvalue) AS sum_paidvalue, sum(discountvalue) AS sum_discountvalue, status, feetypename, doctorname, suppliername FROM hm_fee_info_backup WHERE medicalrecordid = {0} {1} GROUP BY id, medicalrecordid, servicedate, servicename, unit, price, inspaid, status, feetypename, doctorname, suppliername", MedID, str));
            }
            else
            {
                this.c.setSql(string.Format("SELECT id AS feeid, medicalrecordid, servicedate, servicename, unit, sum(quantity) AS sum_quantity, price, inspaid, sum(selfpaid) AS sum_selfpaid, sum(paidvalue) AS sum_paidvalue, sum(discountvalue) AS sum_discountvalue, status, feetypename, doctorname, suppliername FROM hm_fee_info WHERE medicalrecordid = {0} {1} GROUP BY id, medicalrecordid, servicedate, servicename, unit, price, inspaid, status, feetypename, doctorname, suppliername", MedID, str));
            }
            return this.c.FillData();
        }
        
        public DataTable getFeePaid(long MedID, int Type, int FeeType)
        {
            if (Type == 0)
            {
                switch (FeeType)
                {
                    case 0:
                        this.c.setSql(string.Format("SELECT b.id, sum(summoney), amount AS money, paiddate, fullname AS username, status, b.checknumber  FROM hm_fee_summary a JOIN hm_patient_paid b ON a.medicalrecordid = b.medicalrecordid LEFT JOIN hm_userinfoview c ON b.cashierid = c.id WHERE a.medicalrecordid = {0} GROUP BY b.id, amount, paiddate, fullname, status, b.checknumber", MedID));
                        break;
                    
                    case 1:
                        this.c.setSql(string.Format("SELECT b.id, sum(summoney), amount AS money, paiddate, fullname AS username, status, b.checknumber  FROM hm_fee_summary_drugstore a JOIN hm_patient_paid b ON a.medicalrecordid = b.medicalrecordid LEFT JOIN hm_userinfoview c ON b.cashierid = c.id WHERE a.medicalrecordid = {0} GROUP BY b.id, amount, paiddate, fullname, status, b.checknumber", MedID));
                        break;
                }
            }
            if (Type < 1)
            {
                return this.c.FillData();
            }
            return null;
        }
        
        public DataTable getFeeSearchList(string Values)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_medicalrecord_shortview WHERE id::text LIKE '%{0}%' OR lower(fullname) LIKE '%{0}%'", Values.ToLower()));
            return this.c.FillData();
        }
        
        public DataTable getFeeSearchList(long Values, long PatID, bool isCallBackup)
        {
            if (!isCallBackup)
            {
                return this.FeeSearchList(Values, PatID);
            }
            return this.FeeSearchListBackup(Values, PatID);
        }
        
        public string getFromDivision(long MedID)
        {
            this.c.setSql(string.Format("select CASE WHEN a.name IS NULL THEN 'PK : ' || d.name ELSE 'Khoa : ' || a.name END AS divisionname FROM hms_treatmentrecord b LEFT JOIN (SELECT * FROM hms_selection WHERE sector = 'division' AND substr(note,1,1) = '1') a ON fromdivisionid = a.line  JOIN hms_medicalrecord c ON b.medicalrecordid = c.id LEFT JOIN hms_examroom d ON c.examroomid = d.id WHERE b.medicalrecordid = {0} AND b.status = 'S'", MedID));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public DataTable getFromPatientList(DateTime From, DateTime To, int PatientObject)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_report_treatment_patient_detail('{0};{1};1;{2}')", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), PatientObject));
            return this.c.FillData();
        }
        
        public DataTable getGeneralNote(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT repdate::date, divisionid, b.name, notes FROM rep_general_notes a JOIN (SELECT * FROM hms_selection WHERE sector = 'division') b ON a.divisionid = b.line WHERE repdate BETWEEN '{0}'::timestamp AND '{1}'::timestamp", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getGeneralPatient(DateTime From, DateTime To, int PatientObject)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_report_treatment_patient('{0};{1};3;{2}')", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), PatientObject));
            return this.c.FillData();
        }
        
        public DataTable getHealthExamination(long MedID)
        {
            this.c.setSql("SELECT * FROM hm_healthexamination WHERE id=" + MedID);
            return this.c.FillData();
        }
        
        public DataTable getICD()
        {
            this.c.setSql("SELECT icdcode, vnname AS name, lower(icdcode) || ':' || lower(vnname) AS sname, outdiag, groupid FROM hms_icd10 WHERE hide = 0");
            return this.c.FillData();
        }
        
        public DataTable getICD_Clinic(DateTime From, DateTime To, string ConditionValue)
        {
            string sql = "";
            sql = string.Format("SELECT * FROM hm_icd_clinic WHERE exam_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp {2}", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ConditionValue);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getICD_OutPatient(DateTime From, DateTime To, string Suffix, string ConditionValue)
        {
            string sql = "";
            sql = string.Format("SELECT * FROM hm_icd_outpatient{3} WHERE close_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp {2}", new object[] { this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ConditionValue, Suffix });
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getICD_OutPatient(DateTime From, DateTime To, string Suffix, string ConditionValue, bool isBackup, int Year)
        {
            string sql = "";
            if (!isBackup)
            {
                sql = string.Format("SELECT * FROM hm_icd_outpatient{3} WHERE close_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp {2}", new object[] { this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ConditionValue, Suffix });
            }
            else
            {
                switch (Year)
                {
                    case 0:
                        sql = string.Format("SELECT * FROM hm_icd_outpatient{3}_all WHERE close_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp {2}", new object[] { this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ConditionValue, Suffix });
                        break;
                    
                    case 11:
                        this.c1.setYearBackup(Year.ToString());
                        sql = string.Format("SELECT * FROM hm_icd_outpatient{3}_all WHERE close_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp {2}", new object[] { this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ConditionValue, Suffix });
                        this.c1.setSql(sql);
                        return this.c.FillData();
                }
            }
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getICD_Statistics(string Value)
        {
            string sql = "";
            sql = string.Format("SELECT a.id, patientid, fullname, birthyear, gender::integer, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, treatmentdivisionid, c.name AS divisionname, initialdiagnosisicd, code, age, paidbycard, CASE WHEN paidbycard = 1 THEN 'X' ELSE null END insure, vnname, creationdate FROM hm_medicalrecord_view a JOIN hm_patientview b ON a.patientid = b.id JOIN (SELECT * FROM hms_selection WHERE sector = 'division') c ON a.treatmentdivisionid = c.line JOIN hms_icd10 d ON a.initialdiagnosisicd = d.icdcode WHERE ({0}) and a.status IN ('I','B','M','F')", Value);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public string getICDArray(string Values)
        {
            this.c.setSql(string.Format("SELECT hm_geticd({0})", this.f.getValue(Values)));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public DataTable getICDChoose(int Type)
        {
            switch (Type)
            {
                case 0:
                    this.c.setSql("SELECT icdcode, vnname AS name, 0 AS choose FROM hms_icd10 WHERE groupid <> 999");
                    break;
                
                case 1:
                    this.c.setSql("SELECT b.id AS icdcode, b.vnname AS name, 0 AS choose FROM hms_icd10 a JOIN hms_icdvietnam b ON a.vncode = b.id WHERE groupid <> 999 GROUP BY b.id, b.vnname");
                    break;
            }
            return this.c.FillData();
        }
        
        public DataTable getICDen()
        {
            this.c.setSql("SELECT 0 AS chs, icdcode, vnname AS name FROM hms_icd10 WHERE groupid <> 999 GROUP BY icdcode, vnname");
            return this.c.FillData();
        }
        
        public string getICDName(string Values)
        {
            this.c.setSql(string.Format("SELECT vnname FROM hms_icd10 WHERE icdcode = {0} AND hide = 0", this.f.getValue(Values)));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public DataTable getICDvn()
        {
            this.c.setSql("SELECT 0 AS chs, vncode AS icdcode, vnname AS name FROM (SELECT * FROM hms_icd10 WHERE length(icdcode)=3) WHERE groupid <> 999 GROUP BY vncode, vnname");
            return this.c.FillData();
        }
        
        public DataTable getIgnoreCallList(int Zone)
        {
            this.c.setSql("SELECT queuenumber, numbercall, firstcall FROM hms_callreception WHERE checkstatus = 3 AND zoneplace = " + Zone);
            return this.c.FillData();
        }
        
        public DataTable getImportHosp(DateTime From, DateTime To, int PatientObject)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_report_treatment_patient('{0};{1};1;{2}')", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), PatientObject));
            return this.c.FillData();
        }
        
        public DataTable getImportPatientList(DateTime From, DateTime To, int PatientObject)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_report_treatment_patient_detail('{0};{1};6;{2}')", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), PatientObject));
            return this.c.FillData();
        }
        
        public DataTable getInsureAcident(DateTime From, DateTime To)
        {
            this.c.setSql("SELECT note FROM hms_selection WHERE zone = 'defrep' AND sector = 'examstatic' AND line = 3");
            string str = this.c.FillData().Rows[0][0].ToString().Replace("`", "'").Replace("[", "").Replace("]", "");
            this.c.setSql(string.Format("SELECT a.*, b.name AS report2, note, a, id || chr(13) || chr(10) || fullname AS idname FROM hm_accident a JOIN (SELECT line, name, note FROM hms_selection WHERE zone = 'defrep' AND sector = 'insacident') b ON a.keys = b.line WHERE receptiondate  BETWEEN '{0}'::timestamp AND '{1}'::timestamp AND examroomid = 524 AND {2}", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), str));
            return this.c.FillData();
        }
        
        public DataTable getInsureIssue(long MedID)
        {
            string sql = "";
            sql = ((((((((((((((((((((((((((((sql + "SELECT a.id, a.patientid, birthyear , CASE WHEN gender = 1 THEN 'Nam'::text ELSE 'Nữ'::text END AS sex ") + ", hm_getname(fname, mname, lname) AS fullname, hm_getaddress(homenumber, address, k.name) AS fulladdress " + ", code, m.name AS hospitalname, fromdate, todate, creationdate ") + ", CASE WHEN closedate IS NOT NULL THEN closedate ELSE current_timestamp END AS closedate " + ", CASE WHEN a.treatmentdivisionid = 0  ") + "THEN  " + "    CASE WHEN initialdiagnosisicd IN ('U999','0') THEN '' ELSE initialdiagnosisicd END ") + "ELSE \t " + "    CASE WHEN finaldiagnosisicd IN ('U999','0') THEN CASE WHEN initialdiagnosisicd IN ('U999','0') THEN '' ELSE initialdiagnosisicd END ELSE finaldiagnosisicd END ") + "END AS finaldiagnosis " + string.Format(", p.vnname || hm_getdiagnosis({0}) AS finaldiagnosisname, servicename, insprice, quantity ", MedID)) + ", insmoney, unit, general_num2text(inssummoney) AS summoneytext,  " + "general_num2text(discountsummoney) AS discountmoneytext, general_num2text(inssummoney-discountsummoney) AS paidmoneytext ") + ", f.name AS reportname, f.sector, ROUND(discountsummoney) AS discountmoney, ROUND(inssummoney-discountsummoney) AS paidmoney " + ", CASE WHEN a.treatmentdivisionid = 0 THEN 'Khoa Kh\x00e1m Bệnh'::character varying ELSE d.name END AS divisionname ") + ", o.name AS otherhospitalname, CASE WHEN archives_number IS NULL THEN '' ELSE 'SLT:' || archives_number END AS archives  " + "FROM hms_medicalrecord a  ") + "JOIN ( " + "    SELECT keys, medicalrecordid, servicename, price, insprice, sum(quantity) AS quantity ") + "    , unit, sum(money) AS money, sum(insmoney) AS insmoney, report, paidbycard, cardrate  " + string.Format("    FROM hm_fee_report WHERE medicalrecordid = {0} AND status <> 'S' AND calculate <> 2 AND paidbycard = 1 ", MedID)) + "    GROUP BY keys, medicalrecordid, servicename, price, insprice, unit, report, paidbycard, cardrate " + "    ) b  ON a.id = b.medicalrecordid  ") + "JOIN ( " + "    SELECT medicalrecordid, sum(quantity*insprice) AS inssummoney, sum(discountvalue) AS discountsummoney  ") + string.Format("    FROM hms_fee WHERE medicalrecordid = {0} AND status <> 'S' AND calculate <> 2 AND paidbycard = 1  ", MedID) + "    GROUP BY medicalrecordid ") + "    ) c ON a.id = c.medicalrecordid  " + "LEFT JOIN (SELECT sector, line, reportid, name FROM hms_selection WHERE zone = 'general' and sector = 'division') d ON a.treatmentdivisionid = d.line  ") + "JOIN (SELECT sector, line, reportid, name FROM hms_selection WHERE zone = 'report3') f ON b.report = f.reportid  " + "JOIN hms_patient g ON a.patientid = g.id ") + "LEFT JOIN hms_card h ON a.cardid = h.id " + "LEFT JOIN hm_resident j ON j.patientid = g.id AND j.id = g.moreresidentid ") + "LEFT JOIN hm_precintview k ON j.precintid = k.id " + "LEFT JOIN  ") + "    (\tSELECT hms_selection.line, hms_selection.name " + "\t    FROM hms_selection ") + "\t    WHERE hms_selection.zone::text = 'general'::text AND hms_selection.sector::text = 'hospital'::text " + "    ) m ON h.hospitalid = m.line ") + "LEFT JOIN  " + "    (\tSELECT hms_reception.medicalrecordid, hms_reception.otherhospital ") + "\t    FROM hms_reception " + "\t    WHERE (\thms_reception.id IN ( \tSELECT min(hms_reception.id) AS min ") + string.Format("\t\t\t\t\t    FROM hms_reception WHERE medicalrecordid = {0} ", MedID) + "\t\t\t\t\t    GROUP BY hms_reception.medicalrecordid)) ") + "    ) n ON a.id = n.medicalrecordid " + "LEFT JOIN  ") + "    (\tSELECT hms_selection.line, hms_selection.name " + "\t    FROM hms_selection ") + "\t    WHERE hms_selection.zone::text = 'general'::text AND hms_selection.sector::text = 'hospital'::text " + "    ) o ON n.otherhospital = o.line ") + "LEFT JOIN hms_icd10 p ON " + "CASE WHEN a.treatmentdivisionid = 0 THEN  ") + "\tCASE WHEN initialdiagnosisicd IN ('U999','0') THEN null ELSE initialdiagnosisicd END " + "    ELSE CASE WHEN finaldiagnosisicd IN ('U999','0') THEN CASE WHEN initialdiagnosisicd IN ('U999','0') THEN '' ELSE initialdiagnosisicd END ELSE finaldiagnosisicd END END = p.icdcode ") + "WHERE paidbycard = 1 AND a.id = " + MedID;
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getInsureIssueAll(long MedID, bool isDivision)
        {
            string str;
            if (isDivision)
            {
                str = "E";
            }
            else
            {
                str = "B";
            }
            string sql = (string.Format("SELECT f.id, f.patientid, birthyear, sex, f.fullname, f.fulladdress, f.code, f.hospitalname, f.fromdate, f.todate, f.creationdate, CASE WHEN f.closedate IS NOT NULL THEN f.closedate ELSE current_timestamp END AS closedate, finaldiagnosis, f.finaldiagnosisname || hm_getdiagnosis({0}) AS finaldiagnosisname, servicename, CASE WHEN insprice IS NULL THEN 0 ELSE insprice END AS insprice", MedID) + ", CASE WHEN quantity IS NULL THEN 0 ELSE quantity END AS quantity, CASE WHEN insmoney IS NULL THEN 0 ELSE insmoney END AS insmoney, unit, cardrate, d.sector, feeid, f.divisionname, f.otherhospitalname, general_num2text(summoney) AS summoneytext , general_num2text(sumdiscount) AS discountmoneytext, general_num2text(sumselfpaid) AS paidmoneytext " + ", d.name AS reportname, sector, sumdiscount AS  discountmoney, sumselfpaid AS paidmoney ") + string.Format("FROM (SELECT sector, name FROM hms_selection WHERE zone = 'report3' AND reportid <> '{0}' GROUP BY sector, name) d LEFT JOIN (SELECT * FROM hm_fee_report WHERE medicalrecordid = {1}) e ON e.keys = d.sector::integer , (SELECT a.*, summoney, sumdiscount, sumselfpaid, sumpaid, sumnotpaid FROM hm_insure_issue_patient a JOIN hm_feepaid_allview b ON a.id = b.medicalrecordid WHERE a.id = {1}) f ", str, MedID) + "ORDER BY d.sector, feeid";
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getInsureIssueBackup(long MedID)
        {
            string sql = "";
            sql = ((((((((((((((((((((((((((((sql + "SELECT a.id, a.patientid, birthyear , CASE WHEN gender = 1 THEN 'Nam'::text ELSE 'Nữ'::text END AS sex ") + ", hm_getname(fname, mname, lname) AS fullname, hm_getaddress(homenumber, address, k.name) AS fulladdress " + ", code, m.name AS hospitalname, fromdate, todate, creationdate ") + ", CASE WHEN closedate IS NOT NULL THEN closedate ELSE current_timestamp END AS closedate " + ", CASE WHEN a.treatmentdivisionid = 0  ") + "THEN  " + "    CASE WHEN initialdiagnosisicd IN ('U999','0') THEN '' ELSE initialdiagnosisicd END ") + "ELSE \t " + "    CASE WHEN finaldiagnosisicd IN ('U999','0') THEN CASE WHEN initialdiagnosisicd IN ('U999','0') THEN '' ELSE initialdiagnosisicd END ELSE initialdiagnosisicd END ") + "END AS finaldiagnosis " + string.Format(", p.vnname || hm_getdiagnosis({0}) AS finaldiagnosisname, servicename, insprice, quantity ", MedID)) + ", insmoney, unit, general_num2text(inssummoney) AS summoneytext,  " + "general_num2text(discountsummoney) AS discountmoneytext, general_num2text(inssummoney-discountsummoney) AS paidmoneytext ") + ", f.name AS reportname, f.sector, ROUND(discountsummoney) AS discountmoney, ROUND(inssummoney-discountsummoney) AS paidmoney " + ", CASE WHEN a.treatmentdivisionid = 0 THEN 'Khoa Kh\x00e1m Bệnh'::character varying ELSE d.name END AS divisionname ") + ", o.name AS otherhospitalname, CASE WHEN archives_number IS NULL THEN '' ELSE 'SLT:' || archives_number END AS archives " + "FROM hms_medicalrecordbackup a  ") + "JOIN ( " + "    SELECT keys, medicalrecordid, servicename, price, insprice, sum(quantity) AS quantity ") + "    , unit, sum(money) AS money, sum(insmoney) AS insmoney, report, paidbycard, cardrate  " + string.Format("    FROM hm_fee_report_backup WHERE medicalrecordid = {0} AND status <> 'S' AND calculate <> 2 AND paidbycard = 1 ", MedID)) + "    GROUP BY keys, medicalrecordid, servicename, price, insprice, unit, report, paidbycard, cardrate " + "    ) b  ON a.id = b.medicalrecordid  ") + "JOIN ( " + "    SELECT medicalrecordid, sum(quantity*insprice) AS inssummoney, sum(discountvalue) AS discountsummoney  ") + string.Format("    FROM hms_feebackup WHERE medicalrecordid = {0} AND status <> 'S' AND calculate <> 2 AND paidbycard = 1  ", MedID) + "    GROUP BY medicalrecordid ") + "    ) c ON a.id = c.medicalrecordid  " + "LEFT JOIN (SELECT sector, line, reportid, name FROM hms_selection WHERE zone = 'general' and sector = 'division') d ON a.treatmentdivisionid = d.line  ") + "JOIN (SELECT sector, line, reportid, name FROM hms_selection WHERE zone = 'report3') f ON b.report = f.reportid  " + "JOIN hms_patient g ON a.patientid = g.id ") + "LEFT JOIN hms_card h ON a.cardid = h.id " + "LEFT JOIN hm_resident j ON j.patientid = g.id AND j.id = g.moreresidentid ") + "LEFT JOIN hm_precintview k ON j.precintid = k.id " + "LEFT JOIN  ") + "    (\tSELECT hms_selection.line, hms_selection.name " + "\t    FROM hms_selection ") + "\t    WHERE hms_selection.zone::text = 'general'::text AND hms_selection.sector::text = 'hospital'::text " + "    ) m ON h.hospitalid = m.line ") + "LEFT JOIN  " + "    (\tSELECT medicalrecordid, otherhospital ") + "\t    FROM hms_receptionbackup " + "\t    WHERE (\tid IN ( \tSELECT min(id) AS min ") + string.Format("\t\t\t\t\t    FROM hms_receptionbackup WHERE medicalrecordid = {0} ", MedID) + "\t\t\t\t\t    GROUP BY medicalrecordid)) ") + "    ) n ON a.id = n.medicalrecordid " + "LEFT JOIN  ") + "    (\tSELECT hms_selection.line, hms_selection.name " + "\t    FROM hms_selection ") + "\t    WHERE hms_selection.zone::text = 'general'::text AND hms_selection.sector::text = 'hospital'::text " + "    ) o ON n.otherhospital = o.line ") + "LEFT JOIN hms_icd10 p ON " + "CASE WHEN a.treatmentdivisionid = 0 THEN  ") + "\tCASE WHEN initialdiagnosisicd IN ('U999','0') THEN null ELSE initialdiagnosisicd END " + "    ELSE CASE WHEN finaldiagnosisicd IN ('U999','0') THEN CASE WHEN initialdiagnosisicd IN ('U999','0') THEN '' ELSE initialdiagnosisicd END ELSE initialdiagnosisicd END END = p.icdcode ") + "WHERE paidbycard = 1 AND a.id = " + MedID;
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getListDetail(long MedID)
        {
            this.c.setSql(string.Format("select a.id, drugname, content, unit, deliveredquantity as quantity, price, note, expireddate, stockimexid, usingdrugid, stockid , deliveredquantity * price AS money, instruction, dailydosage, instalment, usage, usagename, doctorid, doctorname, a.status, dosage, drug_accept, stockimexid, 0 AS chs from hm_patientdrugview a JOIN hm_employee b ON a.doctorid = b.id  where medicalrecordid = {0} order by a.id", MedID));
            return this.c.FillData();
        }
        
        public DataTable getListDetail(long MedID, int StockID)
        {
            string sql = string.Format("select id, drugname, content, unit, deliveredquantity as quantity, price, note, expireddate, stockimexid, usingdrugid, stockid, deliveredquantity * price AS money, instruction, dailydosage, instalment, usage, usagename, doctorid, doctorname, preparedate::date, status, preparatory, dosage, 0 AS chk FROM hm_patientdrugview WHERE medicalrecordid = {0} AND stockid = {1} order by id", MedID, StockID);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getListDetail(long MedID, long StockImExID)
        {
            string sql = string.Format("select id, drugname, content, unit, deliveredquantity as quantity, price, note, expireddate, stockimexid, usingdrugid, stockid, deliveredquantity * price AS money, instruction, dailydosage, instalment, usage, doctorid, doctorname, preparedate::date, status, preparatory, dosage, drug_accept FROM hm_patientdrugview WHERE medicalrecordid = {0} AND stockimexid = {1} order by id", MedID, StockImExID);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public string getMedical_Barcode(string Values, bool isCurrentDate)
        {
            if (isCurrentDate)
            {
                this.c.setSql(string.Format("SELECT medicalrecordid FROM vw_paraclinical WHERE barcode::text = {0} OR numberid = {0} AND getnumbertime::date = current_date GROUP BY medicalrecordid", this.f.getValue(Values)));
            }
            else
            {
                this.c.setSql(string.Format("SELECT medicalrecordid FROM vw_paraclinical WHERE barcode::text = {0} OR numberid = {0} GROUP BY medicalrecordid", this.f.getValue(Values)));
            }
            return this.c.ExecuteScalar();
        }
        
        public DataTable getMedicalFinal(long MedID)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_medical_info({0})", MedID));
            return this.c.FillData();
        }
        
        public DataTable getMedicalrecordBedList(long MedID)
        {
            this.c.setSql("SELECT a.id, a.divisionid, fromdate, todate, chargedate, a.price, a.status, a.bedid, b.name AS bedname, c.name AS divisionname, a.doctorid, hm_getname(fname, mname, lname) AS doctorname, f.name AS roomname FROM hms_patientbed a JOIN hms_bed b ON a.bedid = b.id JOIN (SELECT line, name FROM hms_selection WHERE zone = 'general' AND sector = 'division') AS c ON a.divisionid = c.line LEFT JOIN hm_employee e ON a.doctorid = e.id JOIN hms_patientroom f ON b.patientroomid = f.id WHERE medicalrecordid = " + MedID);
            return this.c.FillData();
        }
        
        public DataTable getMedicalrecordDepend(long MedID, int Keys)
        {
            string sql = "";
            switch (Keys)
            {
                case 1:
                    sql = "SELECT a.id, a.medicalrecordid, a.serviceid, b.unit, a.supplyid, a.servicedate, a.doctorid, a.status, a.price, b.servicename, b.insprice, CASE WHEN isemergency = 1 THEN 'CC' ELSE CASE WHEN b.note = 'DV' THEN 'DV' ELSE 'KH' END END AS type, isservice, 0 AS chk, hm_getname(c.fname, mname, lname) AS doctorname ";
                    sql = ((sql + "FROM " + "(SELECT id, medicalrecordid, serviceid, supplyid, servicedate, doctorid, status, price, isemergency, isservice ") + string.Format("FROM hms_surgicaltreatment WHERE medicalrecordid = {0} ", MedID) + ") a JOIN hms_service b ON a.serviceid = b.id ") + "JOIN hm_employee c ON a.doctorid = c.id " + "ORDER BY servicedate, id DESC";
                    this.c.setSql(sql);
                    break;
                
                case 2:
                    sql = "SELECT a.id, a.medicalrecordid, a.serviceid, b.unit, a.supplyid, a.servicedate, a.doctorid, a.status, a.price, b.servicename, b.insprice, CASE WHEN isemergency = 1 THEN 'CC' ELSE CASE WHEN b.note = 'DV' THEN 'DV' ELSE 'KH' END END AS type, isservice, 0 AS chk, hm_getname(c.fname, mname, lname) AS doctorname ";
                    sql = ((sql + "FROM " + "(SELECT id, medicalrecordid, serviceid, supplyid, servicedate, doctorid, status, price, isemergency, isservice ") + string.Format("FROM hms_internaltreatment WHERE medicalrecordid = {0} ", MedID) + ") a JOIN hms_service b ON a.serviceid = b.id ") + "JOIN hm_employee c ON a.doctorid = c.id " + "ORDER BY servicedate, id DESC";
                    this.c.setSql(sql);
                    break;
            }
            return this.c.FillData();
        }
        
        public DataTable getMedicalrecordInfo(long MedID, bool isCallBackup)
        {
            if (isCallBackup)
            {
                return this.MedicalrecordInfoBackup(MedID);
            }
            return this.MedicalrecordInfo(MedID);
        }
        
        public DataTable getMedicalrecordInfo(long MedID, int DivisionID)
        {
            if (DivisionID == 0)
            {
                return this.MedicalrecordInfo(MedID);
            }
            return this.MedicalrecordInfo(MedID, DivisionID);
        }
        
        public DataTable getMedicalrecordParaclinical(long MedID, bool isSubitem)
        {
            if (isSubitem)
            {
                this.c.setSql(string.Format("SELECT *, CASE WHEN status = 'T' THEN 1 ELSE 0 END AS chk FROM hm_paraclinical_doctor_view WHERE medicalrecordid = {0} ORDER BY servicedate, id DESC", MedID));
            }
            else
            {
                this.c.setSql(string.Format("SELECT *, CASE WHEN status = 'T' THEN 1 ELSE 0 END AS chk FROM hm_paraclinical_doctor_view WHERE medicalrecordid = {0} AND category <> 'SUBITEM' ORDER BY servicedate, id DESC", MedID));
            }
            return this.c.FillData();
        }
        
        public DataTable getMedicalrecordParaclinical(long MedID, bool isSubitem, string ReportNumber)
        {
            if (isSubitem)
            {
                this.c.setSql(string.Format("SELECT *, CASE WHEN status = 'T' THEN 1 ELSE 0 END AS chk FROM hm_paraclinical_doctor_view WHERE medicalrecordid = {0} AND reportnumber IN ({1}) ORDER BY report", MedID, ReportNumber));
            }
            else
            {
                this.c.setSql(string.Format("SELECT *, CASE WHEN status = 'T' THEN 1 ELSE 0 END AS chk FROM hm_paraclinical_doctor_view WHERE medicalrecordid = {0} AND reportnumber IN ({1}) AND category <> 'SUBITEM' ORDER BY report", MedID, ReportNumber));
            }
            return this.c.FillData();
        }
        
        public DataTable getMedicalrecordParaclinical(long MedID, bool isSubitem, string ReportNumber, bool isCurrentDate, int Barcode)
        {
            string str = "";
            if (isCurrentDate)
            {
                if (Barcode == 0)
                {
                    str = "AND paragroupid IN (SELECT id FROM hms_paraclinical WHERE service_date::date = current_date)";
                }
                else
                {
                    str = "AND paragroupid IN (SELECT id FROM hms_paraclinical WHERE getnumbertime::date = current_date AND barcode = " + Barcode + ")";
                }
            }
            else if (Barcode != 0)
            {
                str = "AND paragroupid IN (SELECT id FROM hms_paraclinical WHERE barcode = " + Barcode + ")";
            }
            if (isSubitem)
            {
                this.c.setSql(string.Format("SELECT *, CASE WHEN status = 'T' THEN 1 ELSE 0 END AS chk FROM hm_paraclinical_doctor_view WHERE medicalrecordid = {0} AND reportnumber IN ({1}) {2} ORDER BY report", MedID, ReportNumber, str));
            }
            else
            {
                this.c.setSql(string.Format("SELECT *, CASE WHEN status = 'T' THEN 1 ELSE 0 END AS chk FROM hm_paraclinical_doctor_view WHERE medicalrecordid = {0} AND reportnumber IN ({1}) AND category <> 'SUBITEM' {2} ORDER BY report", MedID, ReportNumber, str));
            }
            return this.c.FillData();
        }
        
        public long getNextQueuePaid(bool NextJump, int TableNumber)
        {
            try
            {
                if (NextJump)
                {
                    this.c.setSql(string.Format("SELECT hm_get_nextnumberreception({0}, 1)", TableNumber));
                }
                else
                {
                    this.c.setSql(string.Format("SELECT hm_get_nextnumberreception({0}, 0)", TableNumber));
                }
                return long.Parse(this.c.FillData().Rows[0][0].ToString());
            }
            catch
            {
                return 0L;
            }
        }
        
        public bool getnFinishCurrentQueue(int TableNumber, int CallNumber)
        {
            this.c.setSql(string.Format("UPDATE hms_callreception SET checkstatus = 5 WHERE zoneplace = {0} AND tablenumber = {1} AND queuenumber = {2}", TableNumber / 100, TableNumber, CallNumber));
            return this.c.RunSql();
        }
        
        public DataTable getNonpaidInsure(DateTime From, DateTime To)
        {
            string sql = "";
            sql = (sql + "SELECT medicalrecordid, hm_getname(fname, mname, lname) AS fullname, birthyear, CASE WHEN gender = 1 THEN 0 ELSE 1 END AS gender, e.code, examroomid, d.name AS examroomname " + "FROM hms_fee a JOIN hms_medicalrecord b ON a.medicalrecordid = b.id JOIN hms_patient c ON b.patientid = c.id JOIN hms_examroom d ON b.examroomid = d.id JOIN hms_card e ON b.cardid = e.id ") + string.Format("WHERE medicalrecordid NOT IN (SELECT sohoso FROM rep_bhyt WHERE noitru = 0) AND paidbycard = 1 AND calculate <> 2 AND treatmentdivisionid = 0 AND servicedate BETWEEN '{0}' AND '{1}' ", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")) + "GROUP BY medicalrecordid, fname, mname, lname, birthyear, e.code, CASE WHEN gender = 1 THEN 0 ELSE 1 END, examroomid, d.name";
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getNotes(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT a.id, repdate, notes, divisionid, b.name AS divisionname, b.report AS divisionshortname FROM rep_general_notes a JOIN (SELECT * FROM hms_selection WHERE zone = 'general' AND sector = 'division') b ON a.divisionid = b.line WHERE repdate BETWEEN '{0}'::timestamp AND '{1}'::timestamp", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getNowPatient(DateTime From, DateTime To, int PatientObject)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_report_treatment_patient_detail('{0};{1};5;{2}')", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), PatientObject));
            return this.c.FillData();
        }
        
        public long getNowQueuePaid(int Zone)
        {
            this.c.setSql(string.Format("SELECT medicalrecordid, tablenumber FROM hms_callreception WHERE zoneplace = {0} AND checkstatus = 2 GROUP BY medicalrecordid, tablenumber", Zone));
            this.dt = this.c.FillData();
            if (this.dt.Rows.Count > 0)
            {
                return long.Parse(this.dt.Rows[0]["medicalrecordid"].ToString());
            }
            return 0L;
        }
        
        public DataTable getOutHosp(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT id, archives_number, fullname, male, female, insure, initialdiagnosisicd, finaldiagnosisicd, external_icd, rep_date, CASE WHEN stylemedical = 'TV' THEN 'X' ELSE null END AS die, CASE WHEN stylemedical = 'RV' THEN 'X' ELSE null END AS outhosp, CASE WHEN stylemedical = 'CV' THEN 'X' ELSE null END AS changehosp, divisionid, divisionname FROM hm_archives_book WHERE rep_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getOutHosp(DateTime From, DateTime To, int Type)
        {
            if (Type == 1)
            {
                this.c.setSql(string.Format("SELECT id, archives_number, fullname, male, female, insure, initialdiagnosisicd, finaldiagnosisicd, external_icd, rep_date, CASE WHEN stylemedical = 'TV' THEN 'X' ELSE null END AS die, CASE WHEN stylemedical = 'RV' THEN 'X' ELSE null END AS outhosp, CASE WHEN stylemedical = 'CV' THEN 'X' ELSE null END AS changehosp, divisionid, divisionname FROM hm_archives_book WHERE rep_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp AND insure = 'X'", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            }
            else
            {
                this.c.setSql(string.Format("SELECT id, archives_number, fullname, male, female, insure, initialdiagnosisicd, finaldiagnosisicd, external_icd, rep_date, CASE WHEN stylemedical = 'TV' THEN 'X' ELSE null END AS die, CASE WHEN stylemedical = 'RV' THEN 'X' ELSE null END AS outhosp, CASE WHEN stylemedical = 'CV' THEN 'X' ELSE null END AS changehosp, divisionid, divisionname FROM hm_archives_book WHERE rep_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp AND insure IS NULL", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            }
            return this.c.FillData();
        }
        
        public DataTable getOutHospPlan(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT id, archives_number, fullname, male, female, insure, initialdiagnosisicd, finaldiagnosisicd, external_icd, rep_date, close_date, divisionid, divisionname, status FROM hm_outhosp_plan WHERE rep_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public string getPara_ReportID(string ArrayParaID)
        {
            this.c.setSql(string.Format("SELECT hm_getpara_reportid('{0}')", ArrayParaID));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public DataTable getParaclinical(long MedID)
        {
            this.c.setSql(string.Format("SELECT *, 0 AS chk FROM vw_paraclinical WHERE medicalrecordid = {0} AND status <> 'T'", MedID));
            return this.c.FillData();
        }
        
        public string getParaclinical_Barcode(long MedID, string ParaID, long ParaOld)
        {
            this.c.setSql(string.Format("SELECT hm_para_make_barcode('{0};{1};{2};0;{3}')", new object[] { MedID, ParaID, this.sys_info.getSID(), ParaOld }));
            return this.c.ExecuteScalar();
        }
        
        public string getParaclinical_Barcode(long MedID, string ParaID, string BarCode)
        {
            this.c.setSql(string.Format("SELECT hm_para_make_barcode('{0};{1};{2};{3};0')", new object[] { MedID, ParaID, this.sys_info.getSID(), BarCode }));
            return this.c.ExecuteScalar();
        }
        
        public DataTable getParaclinical_Detail(long ParaID)
        {
            this.c.setSql(string.Format("SELECT * FROM vw_paraclinical_detail WHERE paraclinicalid = {0} AND status <> 'T' ORDER BY sort_ord", ParaID));
            return this.c.FillData();
        }
        
        public DataTable getParaclinicalBook(DateTime From, DateTime To, int DivisionID, string Patient_Object, int ExamRoomID)
        {
            string sql = "";
            if (Patient_Object.CompareTo("") == 0)
            {
                sql = string.Format("SELECT a.id, medicalrecordid, medicalrecordid || chr(13) || chr(10) || fullname AS fullname, male, female, address, insure, vnname, a.divisionname, doctorname, paraclinical, result, CASE WHEN a.divisionid = 0 THEN null ELSE b.name END as destination, servicedate, resultname FROM rep_paraclinical a LEFT JOIN hms_examroom b ON a.divisionid = b.code WHERE servicedate BETWEEN '{0}'::date AND '{1}'::date AND a.divisionid = {2} AND reportid IN (SELECT unnest(string_to_array(note, ',')) FROM hms_selection WHERE zone = 'paracli' AND sector = 'shwval' AND line = {3})", new object[] { this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD"), DivisionID, ExamRoomID });
            }
            else
            {
                sql = string.Format("SELECT a.id, medicalrecordid, medicalrecordid || chr(13) || chr(10) || fullname AS fullname, male, female, address, insure, vnname, a.divisionname, doctorname, paraclinical, result, CASE WHEN a.divisionid = 0 THEN null ELSE b.name END as destination, servicedate, resultname FROM rep_paraclinical a LEFT JOIN hms_examroom b ON a.divisionid = b.code WHERE servicedate BETWEEN '{0}'::date AND '{1}'::date AND a.divisionid = {2} AND reportid IN (SELECT unnest(string_to_array(note, ',')) FROM hms_selection WHERE zone = 'paracli' AND sector = 'shwval' AND line = {4}) AND patient_object IN ({3})", new object[] { this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD"), DivisionID, Patient_Object, ExamRoomID });
            }
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaclinicalRequest(long MedID)
        {
            this.c.setSql(string.Format("SELECT medicalrecordid, groupname, detailid, detailname, doctorname, fullname, birthyear, gender, code, fulladdress, price, price + CASE WHEN substr(subjectofpatient::text,6,1)::integer = 2 THEN optprice - price ELSE 0 END AS sumprice, CASE WHEN substr(subjectofpatient::text,6,1)::integer = 2 THEN optprice - price ELSE 0 END AS optprice FROM hm_paraclinical_bill WHERE medicalrecordid = {0} AND doctorid = {1}", MedID, this.sys_info.getSID()));
            return this.c.FillData();
        }
        
        public DataTable getParaclinicalRequest(long MedID, string ParaclinicalID)
        {
            this.c.setSql(string.Format("SELECT medicalrecordid, groupname, detailid, detailname, doctorname, fullname, birthyear, gender, code, fulladdress, price, price + CASE WHEN substr(subjectofpatient::text,6,1)::integer = 2 THEN optprice - price ELSE 0 END AS sumprice, CASE WHEN substr(subjectofpatient::text,6,1)::integer = 2 THEN optprice - price ELSE 0 END AS optprice FROM hm_paraclinical_bill WHERE medicalrecordid = {0} AND doctorid = {1} AND (groupid = {2} OR detailid = {2})", MedID, this.sys_info.getSID(), ParaclinicalID));
            return this.c.FillData();
        }
        
        public DataTable getParaclinicalResult(long MedID, long ParaGroupID)
        {
            this.c.setSql(string.Format("SELECT b.id, a.servicename AS groupname, b.servicename, b.result, a.servicedate, femalestandard, malestandard, paraclinicalid, report AS sort_order FROM (SELECT id, servicename, servicedate, paragroupid FROM hm_medicalparaclinical_view WHERE medicalrecordid = {0} AND paragroupid = {1} AND groupid = 0) a JOIN (SELECT id, groupid, servicename, result, femalestandard, malestandard, paraclinicalid, sort_order, paragroupid, report FROM hm_medicalparaclinical_view WHERE medicalrecordid = {0} AND paragroupid = {1} AND sort_order <> 0) b ON a.paragroupid = b.paragroupid ORDER BY report", MedID, ParaGroupID));
            return this.c.FillData();
        }
        
        public DataTable getParaGroup(long MedID, string ParaID)
        {
            this.c.setSql(string.Format("SELECT line, name, note, report, a.id, UPPER(a.fullname) AS fullname, a.birthyear, a.male, a.female, a.fulladdress, a.divisionname AS division, CASE WHEN feepolicy = 2 OR b.feepolicy2 = 2 THEN null ELSE a.code END AS code, CASE WHEN feepolicy = 2 OR b.feepolicy2 = 2 THEN null ELSE a.hospitalid END AS hospitalid, a.isunline, b.feepolicy, b.description, b.feepolicy2, servicename, nonins_address  FROM hms_selection, (SELECT * FROM hm_rpinsure01 WHERE id = {0}) a JOIN (SELECT medicalrecordid, a.feepolicy, a.description, b.feepolicy AS feepolicy2, c.servicename FROM hms_paraclinical a JOIN hms_paraclinicaldetail b ON a.id = b.paraclinicalid JOIN hms_service c ON b.serviceid = c.id WHERE b.id IN ({1})) b ON a.id = b.medicalrecordid WHERE note IN (SELECT substr(report,1,2) FROM hms_paraclinicaldetail a JOIN hms_service b ON a.serviceid = b.id WHERE a.id IN ({1}) GROUP BY substr(report,1,2)) AND sector= 'report' AND zone = 'paracli' GROUP BY line, name, note, report, a.id, a.fullname, a.birthyear, a.male, a.female, a.fulladdress, a.divisionname, CASE WHEN feepolicy = 2 OR b.feepolicy2 = 2 THEN null ELSE a.code END, CASE WHEN feepolicy = 2 OR b.feepolicy2 = 2 THEN null ELSE a.hospitalid END, a.isunline, b.feepolicy, b.description, b.feepolicy2, servicename, nonins_address ", MedID, ParaID));
            return this.c.FillData();
        }
        
        public DataTable getParaGroup(long MedID, string ParaID, string ReportNumber, int ReportType)
        {
            this.c.setSql(string.Concat(new object[] { "SELECT * from his_get_report_paraclinical_header('", MedID, ";", ParaID, ";", ReportNumber, ";", ReportType, "')" }));
            return this.c.FillData();
        }
        
        public DataTable getParaGroup_Result(string ParaID, string ReportNumber)
        {
            this.c.setSql(string.Format("SELECT * FROM (SELECT 1 AS keys, medicalrecordid AS id, UPPER(hm_getname(fname, mname, lname)) AS fullname, signal, a.id AS paraclinicalid, substr(report,1,2) AS reportid FROM hms_paraclinical a JOIN hm_user b ON a.userid_result = b.id JOIN hm_employee c ON b.employeeid = c.id JOIN hms_service d ON a.serviceid = d.id WHERE a.id = {1}) a JOIN (SELECT 1 AS keys, line, name, note, report FROM hms_selection WHERE sector= 'report' AND zone = 'paracli' AND note::integer IN ({0})) b ON a.keys = b.keys AND a.reportid = b.note WHERE a.paraclinicalid IN ({1})", ReportNumber, ParaID));
            return this.c.FillData();
        }
        
        public DataTable getParaGroup_Result(long MedID, string ParaID, string ReportNumber)
        {
            this.c.setSql(string.Format("SELECT line, name, note, report, a.id, UPPER(a.fullname) AS fullname, a.birthyear, a.male, a.female, a.fulladdress, a.divisionname, CASE WHEN feepolicy = 2 OR b.feepolicy2 = 2 THEN null ELSE a.code END AS code, CASE WHEN feepolicy = 2 OR b.feepolicy2 = 2 THEN null ELSE a.hospitalid END AS hospitalid, a.isunline, b.feepolicy, b.description, b.feepolicy2, d.fullname AS doctorname, hm_getdoctor_para_request('{1}') AS doctor_para_request, result_time FROM hms_selection, (SELECT * FROM hm_rpinsure01 WHERE id = {0}) a JOIN (SELECT medicalrecordid, a.feepolicy, a.description, b.feepolicy AS feepolicy2, b.userid, result_time FROM hms_paraclinical a JOIN hms_paraclinicaldetail b ON a.id = b.paraclinicalid JOIN hms_service c ON b.serviceid = c.id WHERE a.id IN ({1}) AND substr(c.report,1,2)::integer IN ({2})) b ON a.id = b.medicalrecordid JOIN hm_userinfoview_title d ON b.userid = d.id WHERE note IN (SELECT substr(report,1,2) FROM hms_paraclinicaldetail a JOIN hms_service b ON a.serviceid = b.id WHERE a.paraclinicalid IN ({1}) GROUP BY substr(report,1,2)) AND sector= 'report' AND zone = 'paracli' AND note::integer IN ({2}) GROUP BY line, name, note, report, a.id, a.fullname, a.birthyear, a.male, a.female, a.fulladdress, a.divisionname, CASE WHEN feepolicy = 2 OR b.feepolicy2 = 2 THEN null ELSE a.code END, CASE WHEN feepolicy = 2 OR b.feepolicy2 = 2 THEN null ELSE a.hospitalid END, a.isunline, b.feepolicy, b.description, b.feepolicy2, d.fullname, hm_getdoctor_para_request('{1}'), result_time", MedID, ParaID, ReportNumber));
            return this.c.FillData();
        }
        
        public DataTable getParaGroup5(long MedID, string ParaID)
        {
            this.c.setSql(string.Format("SELECT a.id, UPPER(a.fullname) AS fullname, a.birthyear, a.male, a.female, a.fulladdress, a.divisionname AS division, CASE WHEN feepolicy = 2 OR b.feepolicy2 = 2 THEN null ELSE a.code END AS code, CASE WHEN feepolicy = 2 OR b.feepolicy2 = 2 THEN null ELSE a.hospitalid END AS hospitalid, a.isunline, b.feepolicy, hm_get_para_description('{1}') AS description, b.feepolicy2, hm_getdoctor_para_request('{1}') AS doctorname FROM hms_selection, (SELECT * FROM hm_rpinsure01 WHERE id = {0}) a JOIN (SELECT medicalrecordid, a.feepolicy, a.description, b.feepolicy AS feepolicy2 FROM hms_paraclinical a JOIN hms_paraclinicaldetail b ON a.id = b.paraclinicalid JOIN hms_service c ON b.serviceid = c.id WHERE a.id IN ({1})) b ON a.id = b.medicalrecordid WHERE note IN (SELECT substr(report,1,2) FROM hms_paraclinicaldetail a JOIN hms_service b ON a.serviceid = b.id WHERE a.paraclinicalid IN ({1}) GROUP BY substr(report,1,2)) AND sector= 'report' AND zone = 'paracli' GROUP BY a.id, a.fullname, a.birthyear, a.male, a.female, a.fulladdress, a.divisionname, CASE WHEN feepolicy = 2 OR b.feepolicy2 = 2 THEN null ELSE a.code END, CASE WHEN feepolicy = 2 OR b.feepolicy2 = 2 THEN null ELSE a.hospitalid END, a.isunline, b.feepolicy, hm_get_para_description('{1}'), b.feepolicy2, hm_getdoctor_para_request('{1}')", MedID, ParaID));
            return this.c.FillData();
        }
        
        public DataTable getParaGroup7(long MedID, string ParaID, int ReportType)
        {
            string sql = "";
            sql = sql + "SELECT a.medicalrecordid, a.id, hm_getname(b.fname, b.mname, b.lname) AS fullname, b.birthyear, CASE WHEN b.gender = 1 THEN 1 ELSE 0 END male, CASE WHEN b.gender = 0 THEN 1 ELSE 0 END female, '' AS fulladdress, c.name AS division, CASE WHEN feepolicy = 2 THEN null ELSE e.code END AS code, CASE WHEN feepolicy = 2 THEN null ELSE e.hospitalid END AS hospitalid, CASE WHEN d.statustmp = 'U' THEN 1 ELSE 0 END AS isunline, a.feepolicy, '' AS description, hm_getname(f.fname, f.mname, f.lname) AS doctorname ";
            switch (ReportType)
            {
                case 5:
                    sql = sql + "FROM hms_surgicaltreatment a JOIN hms_patient b ON a.patientid = b.id ";
                    break;
                
                case 6:
                    sql = sql + "FROM hms_internaltreatment a JOIN hms_patient b ON a.patientid = b.id ";
                    break;
            }
            object obj2 = (sql + "JOIN (SELECT line, name FROM hms_selection WHERE sector = 'division' UNION ALL SELECT id AS line, name FROM hms_examroom) c ON a.supplyid = c.line " + "JOIN hms_medicalrecord d ON a.medicalrecordid = d.id ") + "LEFT JOIN hms_card e ON d.cardid = e.id " + "JOIN hm_employee f ON a.doctorid = f.id ";
            sql = string.Concat(new object[] { obj2, "WHERE a.medicalrecordid = ", MedID, " AND a.id IN (", ParaID, ")" });
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public string getParaReportNumber(long ParaGroupID)
        {
            this.c.setSql("SELECT SUBSTR(report,1,2) FROM hms_paraclinical a JOIN hms_service b ON a.serviceid = b.id WHERE a.id = " + ParaGroupID);
            return this.c.ExecuteScalar();
        }
        
        public DataTable getParaRequest(long MedID, string ReportType, long ParaID, int ReportNumber, string FeePolicy)
        {
            string sql = "";
            sql = (sql + "SELECT a.id, servicename, CASE WHEN femalestandard <> malestandard THEN malestandard || chr(13) || chr(10) || femalestandard ELSE malestandard END standard, SUBSTR(report,7,2)::integer AS sort, substr(report,4,2) AS report, CASE WHEN c.id IS NOT NULL THEN 1 ELSE 0 END AS check, CASE WHEN c.id IS NOT NULL THEN c.result ELSE null END AS result, service_unit, CASE WHEN c.id IS NOT NULL THEN 'X' ELSE '' END AS checktext " + string.Format("FROM (SELECT id FROM hms_service WHERE substr(report,4,2) = '{0}' AND substr(report,1,2) = '{3}') a LEFT JOIN (SELECT a.serviceid AS id, result FROM hms_paraclinicaldetail a JOIN hms_paraclinical c ON c.id = a.paraclinicalid WHERE c.medicalrecordid = {1} AND c.id IN ({2}) AND c.feepolicy = {4}) c ON a.id = c.id ", new object[] { ReportType, MedID, ParaID, ReportNumber, FeePolicy })) + "JOIN hms_service b ON a.id = b.id " + string.Format("WHERE substr(report,4,2) = '{0}' AND length(report)=8 AND substr(report,1,2) = '{1}' GROUP BY a.id, servicename, femalestandard, malestandard, report, c.id, c.result, service_unit", ReportType, ReportNumber);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaRequest(long MedID, string ReportType, string ParaID, int ReportNumber, string FeePolicy)
        {
            string sql = "";
            sql = sql + "SELECT a.id, servicename, CASE WHEN femalestandard <> malestandard THEN malestandard || chr(13) || chr(10) || femalestandard ELSE malestandard END standard, SUBSTR(report,7,2)::integer AS sort, substr(report,4,2) AS report, CASE WHEN c.id IS NOT NULL THEN 1 ELSE 0 END AS check, CASE WHEN c.id IS NOT NULL THEN c.result ELSE null END AS result, CASE WHEN c.id IS NOT NULL THEN 'X' ELSE '' END AS checktext ";
            if (FeePolicy.CompareTo("") == 0)
            {
                sql = sql + string.Format("FROM (SELECT id FROM hms_service WHERE substr(report,4,2) = '{0}' AND substr(report,1,2) = '{3}') a LEFT JOIN (SELECT a.serviceid AS id, result FROM hms_paraclinicaldetail a JOIN hms_paraclinical c ON c.id = a.paraclinicalid WHERE c.medicalrecordid = {1} AND c.id IN ({2})) c ON a.id = c.id ", new object[] { ReportType, MedID, ParaID, ReportNumber, FeePolicy });
            }
            else
            {
                sql = sql + string.Format("FROM (SELECT id FROM hms_service WHERE substr(report,4,2) = '{0}' AND substr(report,1,2) = '{3}') a LEFT JOIN (SELECT a.serviceid AS id, result FROM hms_paraclinicaldetail a JOIN hms_paraclinical c ON c.id = a.paraclinicalid WHERE c.medicalrecordid = {1} AND c.id IN ({2}) AND c.feepolicy = {4}) c ON a.id = c.id ", new object[] { ReportType, MedID, ParaID, ReportNumber, FeePolicy });
            }
            sql = sql + "JOIN hms_service b ON a.id = b.id " + string.Format("WHERE substr(report,4,2) = '{0}'  AND length(report)=8 AND substr(report,1,2) = '{1}' GROUP BY a.id, servicename, femalestandard, malestandard, report, c.id, c.result", ReportType, ReportNumber);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaRequest_Check(long MedID, int ReportTypeFrom, int ReportTypeTo, long ParaID)
        {
            string sql = "";
            sql = sql + string.Format("SELECT a.serviceid AS id, servicename, result FROM hms_paraclinicaldetail a JOIN hms_paraclinical c ON c.id = a.paraclinicalid JOIN hms_service b ON a.serviceid = b.id WHERE substr(report,4,2)::integer BETWEEN {0} AND {1} AND c.medicalrecordid = {2} AND c.id = {3} GROUP BY a.serviceid, servicename, result, femalestandard, malestandard, report", new object[] { ReportTypeFrom, ReportTypeTo, MedID, ParaID });
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaRequest_Check(long MedID, int ReportTypeFrom, int ReportTypeTo, string ParaID)
        {
            string sql = "";
            sql = sql + string.Format("SELECT a.serviceid AS id, servicename, result FROM hms_paraclinicaldetail a JOIN hms_paraclinical c ON c.id = a.paraclinicalid JOIN hms_service b ON a.serviceid = b.id WHERE substr(report,4,2)::integer BETWEEN {0} AND {1} AND c.medicalrecordid = {2} AND c.id IN ({3}) GROUP BY a.serviceid, servicename, result, femalestandard, malestandard, report", new object[] { ReportTypeFrom, ReportTypeTo, MedID, ParaID });
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaRequest_Type2(long MedID, long ParaID, string ReportNumber, string FeePolicy, string DetailFeePolicy)
        {
            string sql = "";
            sql = (sql + "SELECT a.id, b.servicename, CASE WHEN b.femalestandard <> b.malestandard THEN b.malestandard || chr(13) || chr(10) || b.femalestandard ELSE b.malestandard END standard, SUBSTR(b.report,7,2)::integer AS sort, substr(b.report,4,2) AS report, SUM(CASE WHEN keys = 2 THEN 1 ELSE 0 END) AS check, CASE WHEN keys = 2 AND result IS NOT NULL THEN result ELSE '' END AS result, d.price, c.servicename AS groupname ") + string.Format("FROM (SELECT 2 AS keys, a.serviceid AS id, result, c.id AS groupid, c.serviceid, c.medicalrecordid FROM hms_paraclinicaldetail a JOIN hms_paraclinical c ON c.id = a.paraclinicalid WHERE c.medicalrecordid = {0} AND c.id = {1} AND c.feepolicy = {2} AND a.feepolicy = {3}) a ", new object[] { MedID, ParaID, FeePolicy, DetailFeePolicy }) + string.Format("JOIN hms_service b ON a.id = b.id JOIN hms_service c ON a.serviceid = c.id JOIN (SELECT medicalrecordid, SUM(a.price) AS service_price, SUM(c.price) AS price FROM hms_paraclinicaldetail  a JOIN hms_paraclinical b ON a.paraclinicalid = b.id JOIN hms_service c ON a.serviceid = c.id WHERE paraclinicalid = {1} AND substr(report,1,2) = '{0}' GROUP BY medicalrecordid) d ON d.medicalrecordid = a.medicalrecordid WHERE substr(b.report,1,2) = '{0}' AND length(b.report)=8 GROUP BY a.id, b.servicename, b.femalestandard, b.malestandard, b.report, CASE WHEN keys = 2 AND result IS NOT NULL THEN result ELSE '' END, d.price, d.service_price, c.servicename", ReportNumber, ParaID);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaRequest_Type2(long MedID, string ParaID, string ReportNumber, string FeePolicy, string DetailFeePolicy)
        {
            string sql = "";
            sql = (sql + "SELECT a.id, b.servicename, CASE WHEN b.femalestandard <> b.malestandard THEN b.malestandard || chr(13) || chr(10) || b.femalestandard ELSE b. malestandard END standard, SUBSTR(b.report,7,2)::integer AS sort, substr(b.report,4,2) AS report, CASE WHEN SUM(CASE WHEN keys = 2 THEN 1 ELSE 0 END) > 0 THEN 1 ELSE 0 END AS check, CASE WHEN keys = 2 AND result IS NOT NULL THEN result ELSE '' END AS result, d.price, d.service_price - d.price AS serviceprice, c.servicename AS groupname, b.service_unit  ") + string.Format("FROM (SELECT 2 AS keys, a.serviceid AS id, result, c.id AS groupid, c.serviceid, c.medicalrecordid FROM hms_paraclinicaldetail a JOIN hms_paraclinical c ON c.id = a.paraclinicalid WHERE c.medicalrecordid = {0} AND c.id IN ({1}) AND c.feepolicy = {2} AND a.feepolicy = {3}) a ", new object[] { MedID, ParaID, FeePolicy, DetailFeePolicy }) + string.Format("JOIN hms_service b ON a.id = b.id JOIN hms_service c ON a.serviceid = c.id JOIN (SELECT medicalrecordid, SUM(a.price) AS service_price, SUM(c.price) AS price FROM hms_paraclinicaldetail  a JOIN hms_paraclinical b ON a.paraclinicalid = b.id JOIN hms_service c ON a.serviceid = c.id WHERE paraclinicalid IN ({1}) AND substr(report,1,2) = '{0}' GROUP BY medicalrecordid) d ON d.medicalrecordid = a.medicalrecordid WHERE substr(b.report,1,2) = '{0}' AND length(b.report)=8 GROUP BY a.id, b.servicename, b.femalestandard,b. malestandard, b.report, CASE WHEN keys = 2 AND result IS NOT NULL THEN result ELSE '' END, d.price, d.service_price, c.servicename, b.service_unit", ReportNumber, ParaID);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaRequest_Type6(long MedID, string ParaID, string FeePolicy, int Index)
        {
            string sql = "";
            sql = (((sql + "SELECT a.serviceid AS groupid, d.servicename AS groupname, c.id, c.servicename ") + "FROM hms_paraclinical a JOIN hms_paraclinicaldetail b ON a.id = b.paraclinicalid " + "JOIN hms_service c ON b.serviceid = c.id ") + "JOIN hms_service d ON a.serviceid = d.id " + string.Format("WHERE a.medicalrecordid = {0} AND a.id IN ({1}) AND a.feepolicy = {2}", MedID, ParaID, FeePolicy)) + "GROUP BY a.serviceid, d.servicename, c.id, c.servicename, c.femalestandard, c.malestandard, b.result " + "ORDER BY a.serviceid, c.id ";
            if (Index == 1)
            {
                sql = sql + string.Format("LIMIT (SELECT round(count(id)/2,0) FROM hms_paraclinicaldetail WHERE paraclinicalid IN ({0}))", ParaID);
            }
            else
            {
                sql = sql + string.Format("OFFSET (SELECT round(count(id)/2,0) FROM hms_paraclinicaldetail WHERE paraclinicalid IN ({0}))", ParaID);
            }
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaRequest_Type7(long MedID, string ParaID, int ReportType, string FeePolicy)
        {
            object obj2;
            string sql = "";
            switch (ReportType)
            {
                case 2:
                    obj2 = sql;
                    sql = string.Concat(new object[] { obj2, "SELECT a.id, b.servicename FROM hms_surgicaltreatment a JOIN hms_service b ON a.serviceid = b.id WHERE medicalrecordid = ", MedID, " AND a.id IN (", ParaID, ") AND feepolicy = ", FeePolicy });
                    break;
                
                case 3:
                    obj2 = sql;
                    sql = string.Concat(new object[] { obj2, "SELECT a.id, b.servicename FROM hms_internaltreatment a JOIN hms_service b ON a.serviceid = b.id WHERE medicalrecordid = ", MedID, " AND a.id IN (", ParaID, ") AND feepolicy = ", FeePolicy });
                    break;
            }
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaResult(long MedicalrecordID)
        {
            string sql = "SELECT medicalrecordid, paraclinicalid, d.servicename, c.malestandard, c.femalestandard, result, fullname,birthyear, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS gender, hm_getaddress(homenumber,address,precintname) as addressname, c.servicename AS groupname, a.servicedate FROM hms_paraclinical a JOIN hms_paraclinicaldetail b ON a.id = b.paraclinicalid JOIN hms_service c ON a.serviceid = c.id JOIN hms_service d ON b.serviceid = d.id JOIN hm_patient_info e ON a.patientid = e.id WHERE medicalrecordid = " + MedicalrecordID;
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaResult(long MedicalrecordID, long GroupID)
        {
            string sql = string.Format("SELECT medicalrecordid, paraclinicalid, d.servicename, c.malestandard, c.femalestandard, result, fullname,birthyear, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS gender, hm_getaddress(homenumber,address,precintname) as addressname, c.servicename AS groupname, a.servicedate FROM hms_paraclinical a JOIN hms_paraclinicaldetail b ON a.id = b.paraclinicalid JOIN hms_service c ON a.serviceid = c.id JOIN hms_service d ON b.serviceid = d.id JOIN hm_patient_info e ON a.patientid = e.id WHERE medicalrecordid = {0} AND a.id = {1}", MedicalrecordID, GroupID);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaResult_Type6(long MedID, string ParaID, string FeePolicy)
        {
            string sql = "";
            sql = (((((((((((((sql + "SELECT a.serviceid AS groupid, d.servicename AS groupname, c.id, c.servicename " + ", CASE WHEN c.femalestandard <> c.malestandard THEN c.malestandard || chr(13) || chr(10) || c.femalestandard ELSE c.malestandard END standard ") + ", b.result, j.result AS before_result " + "FROM hms_paraclinical a JOIN hms_paraclinicaldetail b ON a.id = b.paraclinicalid ") + "JOIN hms_service c ON b.serviceid = c.id " + "JOIN hms_service d ON a.serviceid = d.id ") + "LEFT JOIN  " + "( ") + "\tSELECT f.serviceid, result " + "\tFROM hms_paraclinical e JOIN hms_paraclinicaldetail f ON e.id = f.paraclinicalid ") + "\tJOIN  " + "\t( ") + "\t\tSELECT g.serviceid, max(g.id) AS paraid " + "\t\tFROM hms_paraclinical g ") + string.Format("\t\tWHERE medicalrecordid = {0} AND g.serviceid IN  ", MedID) + "\t\t( ") + "\t\t\tSELECT serviceid " + "\t\t\tFROM hms_paraclinical ") + string.Format("\t\t\tWHERE medicalrecordid = {0} AND id IN ({1}) ", MedID, ParaID) + "\t\t\tGROUP BY serviceid ") + "\t\t) " + string.Format("\t\tAND g.id NOT IN ({0}) AND g.id < (SELECT min(id) FROM hms_paraclinical WHERE id IN ({0})) ", ParaID)) + "\t\tGROUP BY g.serviceid " + "\t) h ON e.serviceid = h.serviceid AND e.id = h.paraid ") + ") j ON b.serviceid = j.serviceid " + string.Format("WHERE a.medicalrecordid = {0} AND a.id IN ({1}) AND a.feepolicy = {2} ", MedID, ParaID, FeePolicy)) + "GROUP BY a.serviceid, d.servicename, c.id, c.servicename, c.femalestandard, c.malestandard, b.result, j.result " + "ORDER BY a.serviceid, c.id";
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaResultInput(long ParaID, long MedID)
        {
            this.c.setSql(string.Concat(new object[] { "SELECT * FROM his_get_report_paraclinical_result('", MedID, ";", ParaID, "')" }));
            return this.c.FillData();
        }
        
        public DataTable getParaResultInput_Group(long ParaID)
        {
            string sql = "SELECT line, name, note, b.result, c.result AS para_result, tech, description, fullname FROM ";
            sql = ((sql + string.Format("(SELECT line, name, note, report::text, description FROM hms_selection WHERE sector IN (SELECT para_result FROM hms_service WHERE id IN (SELECT serviceid FROM hms_paraclinicaldetail WHERE id = {0}))) a LEFT JOIN ", ParaID)) + string.Format("(SELECT * FROM hm_paraclinicalresult WHERE paraclinicaldetailid = {0}) b ON a.line = b.reportid ", ParaID) + string.Format("LEFT JOIN (SELECT * FROM hm_para_result WHERE paraclinicaldetailid = {0}) c ON c.paraclinicaldetailid = c.paraclinicaldetailid ", ParaID)) + "LEFT JOIN hm_userinfoview_title d ON b.userid = d.id ORDER BY line" + "LEFT JOIN (SELECT line, name FROM hms_selection WHERE zone = 'paracli' AND sector = 'group') e ON a.report = e.line::text ";
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getParaSummary(DateTime From, DateTime To, string ExamRoom, string Patient_Object, int Report_Type)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_para_summary('{0};{1};{2};{3};{4}')", new object[] { this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ExamRoom, Patient_Object, Report_Type }));
            return this.c.FillData();
        }
        
        public DataTable getParaSummary_ParaDiv(DateTime From, DateTime To, string ReportNumber, int ReportType)
        {
            string str = "";
            if (ReportType == 2)
            {
                str = " AND supplyid >= 500 ";
            }
            else if (ReportType == 3)
            {
                str = " AND supplyid < 500 ";
            }
            if (ReportNumber.CompareTo("") == 0)
            {
                this.c.setSql(string.Format("SELECT servicename, sum(a.quantity) AS quantity, sum(CASE WHEN isservice = 0 THEN a.quantity ELSE 0 END) AS quantity_normal, sum(CASE WHEN isservice = 1 THEN a.quantity ELSE 0 END) AS quantity_service, SUM(CASE WHEN isservice = 0 THEN b.price ELSE b.optprice END * a.quantity) AS summary, SUM(b.price * a.quantity) AS normal, SUM(CASE WHEN isservice = 1 THEN (b.optprice - b.price) ELSE 0 END * a.quantity) AS service, SUBSTR(accesskey::text,1,5)::integer AS para_type, service_date::date FROM hms_paraclinical c JOIN hms_paraclinicaldetail a ON a.paraclinicalid = c.id JOIN ( SELECT hms_service.id, hms_service.code, hms_service.servicename, hms_service.price, hms_service.insprice, hms_service.optprice, hms_service.accesskey FROM hms_service WHERE servicetype = 'T'::text AND SUBSTR(accesskey::text,1,2)::integer IN (11) AND price <> 0) b ON a.serviceid = b.id WHERE a.status <> 'O' AND service_date BETWEEN '{0}' AND '{1}' {2} GROUP BY servicename, SUBSTR(accesskey::text,1,5)::integer, service_date::date", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), str));
            }
            else
            {
                this.c.setSql(string.Format("SELECT servicename, sum(a.quantity) AS quantity, sum(CASE WHEN isservice = 0 THEN a.quantity ELSE 0 END) AS quantity_normal, sum(CASE WHEN isservice = 1 THEN a.quantity ELSE 0 END) AS quantity_service, SUM(CASE WHEN isservice = 0 THEN b.price ELSE b.optprice END * a.quantity) AS summary, SUM(b.price * a.quantity) AS normal, SUM(CASE WHEN isservice = 1 THEN (b.optprice - b.price) ELSE 0 END * a.quantity) AS service, SUBSTR(accesskey::text,1,5)::integer AS para_type, service_date::date FROM hms_paraclinical c JOIN hms_paraclinicaldetail a ON a.paraclinicalid = c.id JOIN ( SELECT hms_service.id, hms_service.code, hms_service.servicename, hms_service.price, hms_service.insprice, hms_service.optprice, hms_service.accesskey FROM hms_service WHERE servicetype = 'T'::text AND SUBSTR(accesskey::text,1,2)::integer IN (11) AND price <> 0) b ON a.serviceid = b.id WHERE a.status <> 'O' AND service_date BETWEEN '{0}' AND '{1}' AND SUBSTR(accesskey::text,1,5)::integer IN ({2}) {3} GROUP BY servicename, SUBSTR(accesskey::text,1,5)::integer, service_date::date", new object[] { this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ReportNumber, str }));
            }
            return this.c.FillData();
        }
        
        public DataTable getParaSummary_ParaDiv_Detail(DateTime From, DateTime To, string ParaName, int ReportType)
        {
            string str = "";
            if (ReportType == 2)
            {
                str = " AND supplyid >= 500 ";
            }
            else if (ReportType == 3)
            {
                str = " AND supplyid < 500 ";
            }
            this.c.setSql(string.Format("SELECT medicalrecordid, hm_getname(fname, mname, null) AS fullname, lname, count(a.id) AS summary, isservice FROM hms_paraclinical c JOIN hms_paraclinicaldetail a ON a.paraclinicalid = c.id JOIN hms_patient b ON c.patientid = b.id WHERE a.status <> 'O' AND service_date BETWEEN '{0}' AND '{1}' AND a.serviceid IN (SELECT id FROM hms_service WHERE servicename = '{2}') {3} GROUP BY medicalrecordid, fname, mname, lname, isservice", new object[] { this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ParaName, str }));
            return this.c.FillData();
        }
        
        public DataTable getPatBarcode(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT * FROM hms_fee WHERE serviceid = 999999980 AND service_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getPatient_inhosp()
        {
            this.c.setSql("SELECT medicalrecordid, name FROM hm_patient_inhosp WHERE medicalrecordstatus IN ('I','B','M')");
            return this.c.FillData();
        }
        
        public DataTable getPatient_inhosp(int DivisionID)
        {
            this.c.setSql("SELECT medicalrecordid, name FROM hm_patient_inhosp WHERE medicalrecordstatus IN ('I','B','M') AND divisionid = " + DivisionID);
            return this.c.FillData();
        }
        
        public DataTable getPatientArchives()
        {
            this.c.setSql("SELECT a.id AS medicalrecordid, hm_getname(fname, mname, lname) AS name, hm_getname(fname, mname, null) AS prefixname, lname, a.status, age, birthyear, code, CASE WHEN code IS NULL THEN 0 ELSE 1 END AS insure , CASE WHEN gender = 1 THEN 1 ELSE 0 END male, CASE WHEN gender = 0 THEN 1 ELSE 0 END female, CASE WHEN length(subjectofpatient::text) <> 9 THEN 0 ELSE substr(subjectofpatient::text,7,3)::integer END AS cardrate , CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, CASE WHEN archives_number IS NOT NULL THEN 1 ELSE 0 END AS chs , archives_number, CASE WHEN d.name IS NULL THEN 1 ELSE 0 END changehosp, CASE WHEN archives_number IS NOT NULL THEN 1 ELSE 0 END AS isarchives, treatmentdivisionid FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id LEFT JOIN hms_card c ON a.cardid = c.id LEFT JOIN (SELECT * FROM hms_selection WHERE zone = 'hms' AND sector = 'ex_suggest' AND note = '1') d  ON a.finaltreatmentsuggestionid = d.line WHERE a.status IN ('T','W') AND treatmentdivisionid <> 0 AND isclose <> 1");
            return this.c.FillData();
        }
        
        public DataTable getPatientArchives(int DivisionID)
        {
            if (DivisionID == 0)
            {
                return this.getPatientArchives();
            }
            this.c.setSql(string.Format("SELECT a.id AS medicalrecordid, hm_getname(fname, mname, lname) AS name, hm_getname(fname, mname, null) AS prefixname, lname, a.status, age, birthyear, code, CASE WHEN code IS NULL THEN 0 ELSE 1 END AS insure , CASE WHEN gender = 1 THEN 1 ELSE 0 END male, CASE WHEN gender = 0 THEN 1 ELSE 0 END female, CASE WHEN length(subjectofpatient::text) <> 9 THEN 0 ELSE substr(subjectofpatient::text,7,3)::integer END AS cardrate , CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, CASE WHEN archives_number IS NOT NULL THEN 1 ELSE 0 END AS chs , archives_number, CASE WHEN d.name IS NULL THEN 1 ELSE 0 END changehosp, CASE WHEN archives_number IS NOT NULL THEN 1 ELSE 0 END AS isarchives, treatmentdivisionid FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id LEFT JOIN hms_card c ON a.cardid = c.id LEFT JOIN (SELECT * FROM hms_selection WHERE zone = 'hms' AND sector = 'ex_suggest' AND note = '1') d  ON a.finaltreatmentsuggestionid = d.line WHERE a.status IN ('T','W') AND treatmentdivisionid = {0} AND isclose <> 1", DivisionID));
            return this.c.FillData();
        }
        
        public DataTable getPatientArchives_short()
        {
            this.c.setSql("SELECT a.id AS medicalrecordid, hm_getname(fname, mname, lname) AS name, hm_getname(fname, mname, null) AS prefixname, lname, CASE WHEN main_icd IS NULL THEN 0 ELSE 1 END AS fullinfo FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id WHERE a.status IN ('T','W') AND treatmentdivisionid <> 0 AND isclose <> 1");
            return this.c.FillData();
        }
        
        public DataTable getPatientArchives_short(int DivisionID)
        {
            this.c.setSql(string.Format("SELECT a.id AS medicalrecordid, hm_getname(fname, mname, lname) AS name, hm_getname(fname, mname, null) AS prefixname, lname, CASE WHEN main_icd IS NULL THEN 0 ELSE 1 END AS fullinfo FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id WHERE a.status IN ('T','W') AND treatmentdivisionid = {0} AND isclose <> 1", DivisionID));
            return this.c.FillData();
        }
        
        public DataTable getPatientBill(long MedID)
        {
            this.c.setSql("SELECT * FROM hm_patientdrug_bill WHERE medicalrecordid = " + MedID);
            return this.c.FillData();
        }
        
        public DataTable getPatientCard(long PatID)
        {
            this.c.setSql("SELECT CASE WHEN id < 10000000 THEN '0' ELSE '' END || id AS id, hm_getname(fname, mname, lname) AS fullname FROM hms_patient WHERE id = " + PatID);
            return this.c.FillData();
        }
        
        public DataTable getPatientCard(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT id, hm_getname(fname, mname, lname) AS fullname FROM hms_patient WHERE id in (SELECT patientid FROM hms_fee WHERE service_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp AND serviceid = 999999980)", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getPatientCardList(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT d. medicalrecordid, d.patientid, d.supplyid AS supplierid, b.name AS divisionname, hm_getname(fname, mname, lname) AS fullname, birthyear, CASE WHEN gender = 1 THEN 0 ELSE 1 END AS female, CASE WHEN cardnumber <> 0 THEN 1 ELSE 0 END AS iscard, CASE WHEN a.status = 'P' THEN 1 ELSE 0 END ispaid FROM (SELECT medicalrecordid, supplyid, serviceid, patientid, feeid FROM hms_internaltreatment WHERE serviceid = 999999980 AND service_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp) d JOIN hms_fee a ON d.feeid = a.id JOIN (SELECT * FROM hms_selection WHERE sector = 'division') b ON a.supplierid = b.line JOIN hms_patient c ON a.patientid = c.id", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getPatientDrugBill(long MedID, string Array_Patient_Drug_ID)
        {
            this.c.setSql(string.Format("SELECT drugname || '(' || origin || '/' || content || ')' AS fulldrugname, unit, sum(deliveredquantity) AS quantity, instruction, hm_getdoctorname_title(doctorid) AS doctorname FROM hms_patientdrug a JOIN hm_usingdrugview b ON a.usingdrugid = b.id WHERE medicalrecordid = {0} AND a.id IN ({1}) GROUP BY a.id, drugname, origin, content, unit, instruction, hm_getdoctorname_title(doctorid) ORDER BY a.id", MedID, Array_Patient_Drug_ID));
            return this.c.FillData();
        }
        
        public DataTable getPatientDrugBill(long MedID, int Doctor, bool isOnlyDoctor)
        {
            if (isOnlyDoctor)
            {
                this.c.setSql(string.Format("SELECT drugname || '(' || origin || '/' || content || ')' AS fulldrugname, unit, sum(deliveredquantity) AS quantity, instruction, hm_getdoctorname_title({1}) AS doctorname, b.price, sum(deliveredquantity*b.price) AS money FROM hms_patientdrug a JOIN hm_usingdrugview b ON a.usingdrugid = b.id WHERE medicalrecordid = {0} AND doctorid = {1} AND supplyid >= 500 GROUP BY a.id, drugname, origin, content, unit, instruction, hm_getdoctorname_title({1}), b.price ORDER BY a.id", MedID, Doctor));
            }
            else
            {
                this.c.setSql(string.Format("SELECT drugname || '(' || origin || '/' || content || ')' AS fulldrugname, unit, sum(deliveredquantity) AS quantity, instruction, hm_getdoctorname_title(doctorid) AS doctorname, b.price, sum(deliveredquantity*b.price) AS money FROM hms_patientdrug a JOIN hm_usingdrugview b ON a.usingdrugid = b.id WHERE medicalrecordid = {0} AND supplyid >= 500 GROUP BY a.id, drugname, origin, content, unit, instruction, hm_getdoctorname_title(doctorid), b.price ORDER BY a.id", MedID));
            }
            return this.c.FillData();
        }
        
        public DataTable getPatientDrugBill_Surgery(long MedID)
        {
            this.c.setSql(string.Format("SELECT drugname || '(' || origin || '/' || content || ')' AS fulldrugname, unit, sum(deliveredquantity) AS quantity, b.price, sum(deliveredquantity*b.price) AS summary FROM hms_patientdrug a JOIN hm_usingdrugview b ON a.usingdrugid = b.id WHERE medicalrecordid = {0} AND a.stockid IN (SELECT code FROM hms_drugselection WHERE note = '4') GROUP BY a.id, drugname, origin, content, unit, b.price ORDER BY a.id", MedID));
            return this.c.FillData();
        }
        
        public DataTable getPatientDrugBill_Title(long MedID, long PatID, long PaidID, int Doctor)
        {
            string sql = (((((string.Format("SELECT hm_getname(fname, mname, lname) AS fullname, a.birthyear, age AS year_old, CASE WHEN a.gender =  1 THEN 'Nam' ELSE 'Nữ' END AS gender, e.fulladdress AS addressname, icdcode || ':' || vnname || '/' || hm_getdiagnosis({0}) AS diag, hm_getdoctorname_title({1}) AS doctorname , b.id AS medicalrecordid, CASE WHEN close_date IS NOT NULL THEN close_date ELSE current_timestamp END AS billdate, code, order_number1 AS order_number, seri_number1 AS seri_number, company, tax_id, paiddate ", MedID, Doctor) + "FROM hms_patient a LEFT JOIN hm_medicalrecord_view b ON a.id = b.patientid " + "LEFT JOIN hms_icd10 d ON b.initialdiagnosisicd = d.icdcode ") + "LEFT JOIN ( " + "\tSELECT a.id, a.patientid, a.homenumber, a.address, (((b.name::text || ', '::text) || d.name::text) || ', '::text) || c.name::text AS residentname, a.relatedinfo, hm_getaddress(a.homenumber::text, a.address::text, (((b.name::text || ', '::text) || d.name::text) || ', '::text) || c.name::text) AS fulladdress, a.company, a.tax_id ") + "\tFROM hm_resident a " + "\tJOIN hms_precint b ON a.precintid::text = b.id::text ") + "\tLEFT JOIN hms_province c ON b.provinceid = c.id " + "\tLEFT JOIN hms_district d ON b.districtid = d.id ") + string.Format("\tWHERE a.patientid = {0}) e ON a.id = e.patientid AND a.moreresidentid = e.id ", PatID) + string.Format("LEFT JOIN (SELECT * FROM hm_patient_paid WHERE id = {0}) f On b.id = f.medicalrecordid ", PaidID)) + string.Format("WHERE b.id = {0} ", MedID) + "GROUP BY fname, mname, lname, a.birthyear, age, a.gender, fulladdress, icdcode, vnname, b.id, CASE WHEN close_date IS NOT NULL THEN close_date ELSE current_timestamp END, code, order_number1, seri_number1, company, tax_id, paiddate";
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getPatientDrugBill_Title_Army(long MedID, int Doctor)
        {
            string sql = "SELECT hm_getname(fname, mname, lname) AS fullname, e.name AS addressname, hm_getdoctorname_title(doctorid) AS doctorname, b.id AS medicalrecordid, CASE WHEN close_date IS NOT NULL THEN close_date ELSE current_timestamp END AS billdate, f.name AS militaryname  ";
            sql = (((sql + "FROM hms_patient a ") + "LEFT JOIN hms_medicalrecord b ON a.id = b.patientid " + "LEFT JOIN hm_resident c ON a.moreresidentid = c.id ") + "LEFT JOIN hms_precint e ON e.id = c.precintid " + "LEFT JOIN (SELECT line, name FROM hms_selection WHERE sector = 'military') f ON a.militaryrankid = f.line ") + string.Format("WHERE b.id = {0} ", MedID) + "GROUP BY fname, mname, lname, a.birthyear, e.name, b.id, doctorid, CASE WHEN close_date IS NOT NULL THEN close_date ELSE current_timestamp END, f.name ";
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getPatientInfo(long PatID, bool ViewBackup)
        {
            if (ViewBackup)
            {
                this.c.setSql("SELECT * FROM hm_medicalrecord_history WHERE patientid = " + PatID);
            }
            else
            {
                this.c.setSql(string.Format("SELECT * FROM hm_medicalrecord_history WHERE patientid = {0} AND keys = 1", PatID));
            }
            return this.c.FillData();
        }
        
        public DataTable getPatientInfo_DrugStore(int DivisionID, int RecordNumber, int Type)
        {
            switch (Type)
            {
                case 1:
                    this.c.setSql(string.Format("SELECT id, UPPER(fullname) AS fullname, sex, birthyear FROM hm_medicalrecord_showinfo_view WHERE id IN (SELECT medicalrecordid FROM hms_patientdrug WHERE ischgdstore = 0 AND supplyid = {0} AND stockid = 599 GROUP BY medicalrecordid) ORDER BY id LIMIT {1}", DivisionID, RecordNumber));
                    break;
                
                case 2:
                    this.c.setSql(string.Format("SELECT id, UPPER(fullname) AS fullname, sex, birthyear FROM hm_medicalrecord_showinfo_view WHERE id IN (SELECT medicalrecordid FROM hms_patientdrug WHERE ischgdstore = 0 AND supplyid = {0} AND stockid = 599 GROUP BY medicalrecordid) ORDER BY id OFFSET {1}", DivisionID, RecordNumber));
                    break;
            }
            return this.c.FillData();
        }
        
        public DataTable getPatientInfo_DrugStore(int DivisionID, string Array_MedID, int RecordNumber, int Type)
        {
            switch (Type)
            {
                case 1:
                    this.c.setSql(string.Format("SELECT id, UPPER(fullname) AS fullname, sex, birthyear, divisionname FROM hm_medicalrecord_showinfo_view WHERE id IN ({2}) ORDER BY id LIMIT {1}", DivisionID, RecordNumber, Array_MedID));
                    break;
                
                case 2:
                    this.c.setSql(string.Format("SELECT id, UPPER(fullname) AS fullname, sex, birthyear, divisionname FROM hm_medicalrecord_showinfo_view WHERE id IN ({2}) ORDER BY id OFFSET {1}", DivisionID, RecordNumber, Array_MedID));
                    break;
            }
            return this.c.FillData();
        }
        
        public DataTable getPatientInHosp(long MedID, int TypePatient)
        {
            if (TypePatient == 1)
            {
                this.c.setSql(string.Format("SELECT a.id AS medicalrecordid, hm_getname(fname, mname, null) AS fullname, lname AS name, a.status, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, birthyear, c.code AS cardcode, CASE WHEN length(subjectofpatient::text) <> 9 THEN 0 ELSE substr(subjectofpatient::text,7,3)::integer END AS discount, age, b.id, a.examroomid, ticketnumber, queuenumber, 0 AS chs FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id LEFT JOIN hms_card c ON a.cardid = c.id JOIN hms_reception d ON a.id = d.medicalrecordid WHERE a.id = {0}", MedID));
            }
            else
            {
                this.c.setSql(string.Format("SELECT a.id AS medicalrecordid, hm_getname(fname, mname, null) AS fullname, lname AS name, a.status, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, birthyear, c.code AS cardcode, CASE WHEN length(subjectofpatient::text) <> 9 THEN 0 ELSE substr(subjectofpatient::text,7,3)::integer END AS discount, age, b.id, treatmentdivisionid, a.status, 0 AS chs FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id LEFT JOIN hms_card c ON a.cardid = c.id WHERE a.id = {0}", MedID));
            }
            return this.c.FillData();
        }
        
        public DataTable getPatientInHosp(bool isTreatment, int Division, bool isNow)
        {
            string str = "";
            if (isTreatment)
            {
                if (Division == 0)
                {
                    str = "WHERE (a.status <> 'T' OR close_date::date >= (current_date - 7)) AND treatmentdivisionid <> 0";
                }
                else
                {
                    str = "WHERE (a.status <> 'T' OR close_date::date >= (current_date - 7)) AND treatmentdivisionid = " + Division;
                }
                this.c.setSql(string.Format("SELECT a.id AS medicalrecordid, hm_getname(fname, mname, null) fullname, lname AS name, a.status, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, birthyear, c.code AS cardcode , CASE WHEN length(subjectofpatient::text) <> 9 THEN 0 ELSE substr(subjectofpatient::text,7,3)::integer END AS discount, age, b.id, treatmentdivisionid, 0 AS chs FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id LEFT JOIN hms_card c ON a.cardid = c.id {0}", str));
            }
            return this.c.FillData();
        }
        
        public DataTable getPatientInHosp(int TypePatient, int Division, bool isNow)
        {
            string str = "";
            if ((Division != 0) && (TypePatient == 1))
            {
                str = string.Format(" WHERE d.examroomid = {0} ", Division);
            }
            if (isNow && (TypePatient == 1))
            {
                if (str.CompareTo("") == 0)
                {
                    str = str + " WHERE creationdate::date = current_date ";
                }
                else
                {
                    str = str + " AND creationdate::date = current_date ";
                }
            }
            if (TypePatient == 1)
            {
                this.c.setSql(string.Format("SELECT a.id AS medicalrecordid, hm_getname(fname, mname, null) fullname, lname AS name, a.status, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, birthyear, c.code AS cardcode, CASE WHEN length(subjectofpatient::text) <> 9 THEN 0 ELSE substr(subjectofpatient::text,7,3)::integer END AS discount, age, b.id,  a.examroomid, d.id AS receptionid, d.status AS receptionstatus, ticketnumber, queuenumber, 0 AS chs FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id LEFT JOIN hms_card c ON a.cardid = c.id JOIN hms_reception d ON a.id = d.medicalrecordid {0}", str));
            }
            else
            {
                this.c.setSql(string.Format("SELECT a.id AS medicalrecordid, hm_getname(fname, mname, null) fullname, lname AS name, a.status, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, birthyear, c.code AS cardcode , CASE WHEN length(subjectofpatient::text) <> 9 THEN 0 ELSE substr(subjectofpatient::text,7,3)::integer END AS discount, age, b.id, treatmentdivisionid, 0 AS chs FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id LEFT JOIN hms_card c ON a.cardid = c.id WHERE a.status <> 'T' and treatmentdivisionid = {0}", Division));
            }
            return this.c.FillData();
        }
        
        public DataTable getPatientInsureOH(int StockID, int Division, bool isNow)
        {
            if (isNow)
            {
                this.c.setSql(string.Format("SELECT a.id AS medicalrecordid, b.id, hm_getname(fname, mname, lname) AS fullname, a.status, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, birthyear, c.code AS cardcode, CASE WHEN length(subjectofpatient::text) <> 9 THEN 0 ELSE substr(subjectofpatient::text,7,3)::integer END AS discount, age, b.id,  a.examroomid, ticketnumber, queuenumber FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id LEFT JOIN hms_card c ON a.cardid = c.id JOIN hms_reception d ON a.id = d.medicalrecordid WHERE a.id IN (SELECT medicalrecordid FROM hms_patientdrug WHERE stockimexid IN (SELECT id FROM hms_stockimex WHERE status = 'O' AND stockimextype = 'H' \tAND delivererstockid = {0}) AND status = 'O' GROUP BY medicalrecordid) AND creationdate::date = current_date", StockID));
            }
            else
            {
                this.c.setSql(string.Format("SELECT a.id AS medicalrecordid, b.id, hm_getname(fname, mname, lname) AS fullname, a.status, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, birthyear, c.code AS cardcode, CASE WHEN length(subjectofpatient::text) <> 9 THEN 0 ELSE substr(subjectofpatient::text,7,3)::integer END AS discount, age, b.id,  a.examroomid, ticketnumber, queuenumber FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id LEFT JOIN hms_card c ON a.cardid = c.id JOIN hms_reception d ON a.id = d.medicalrecordid WHERE a.id IN (SELECT medicalrecordid FROM hms_patientdrug WHERE stockimexid IN (SELECT id FROM hms_stockimex WHERE status = 'O' AND stockimextype = 'H' \tAND delivererstockid = {0}) AND status = 'O' GROUP BY medicalrecordid)", StockID));
            }
            return this.c.FillData();
        }
        
        public DataTable getPatientIssue(int StockID, DateTime From, DateTime To, string Status, int StockImExID)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_exampatient_issue WHERE requestdate::date BETWEEN '{0}'::date AND '{1}'::date and delivererstockid = {2} and drugstatus = '{3}' AND stockimexid = {4}", new object[] { this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD"), StockID, Status, StockImExID }));
            return this.c.FillData();
        }
        
        public DataTable getPatientPara_Request(string PatName, int DivisionID)
        {
            string str = "";
            if (DivisionID != 0)
            {
                str = string.Format(" WHERE treatmentdivisionid = {0} AND LOWER(hm_getname(fname, mname, lname)) LIKE '%{1}%' AND a.status NOT IN ('T','W') AND (c.donestatus IS NULL OR c.donestatus <> 'T') ", DivisionID, PatName.ToLower());
            }
            else
            {
                str = string.Format(" WHERE LOWER(hm_getname(fname, mname, lname)) LIKE '%{0}%' AND a.status NOT IN ('T','W') AND (c.donestatus IS NULL OR c.donestatus <> 'T') ", PatName.ToLower());
            }
            this.c.setSql(string.Format("SELECT a.id AS medicalrecordid, hm_getname(fname, mname, null) fullname, lname AS name, a.status FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id JOIN hms_paraclinical c ON a.id = c.medicalrecordid JOIN (SELECT * FROM hms_service WHERE reportid = 'T01') d ON c.serviceid = d.id {0} GROUP BY a.id, fname, mname, lname, a.status", str));
            return this.c.FillData();
        }
        
        public DataTable getPatientParaclinical(long MedID)
        {
            this.c.setSql("SELECT a.id AS medicalrecordid, patientid, hm_getname(fname, mname, lname) AS fullname, a.status FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id WHERE a.id = " + MedID);
            return this.c.FillData();
        }
        
        public DataTable getPatientParaclinical(bool isNow, string ReportNumber, bool isResult)
        {
            string str = "";
            if (isNow)
            {
                str = str + " servicedate::date = current_date ";
            }
            if (isResult)
            {
                if (str.CompareTo("") == 0)
                {
                    str = str + " result IS NULL ";
                }
                else
                {
                    str = str + " AND result IS NULL ";
                }
            }
            if (ReportNumber.CompareTo("") != 0)
            {
                if (str.CompareTo("") == 0)
                {
                    str = str + string.Format(" substr(report,1,2)::integer IN ({0}) ", ReportNumber);
                }
                else
                {
                    str = str + string.Format(" AND substr(report,1,2)::integer IN ({0}) ", ReportNumber);
                }
            }
            this.c.setSql(string.Format("SELECT a.id AS medicalrecordid, patientid, hm_getname(fname, mname, null) AS fullname, lname, a.status FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id WHERE a.status <> 'T' AND a.id IN (SELECT medicalrecordid FROM hms_paraclinical a JOIN hms_paraclinicaldetail b ON a.id = b.paraclinicalid JOIN hms_service c ON b.serviceid = c.id WHERE {0} GROUP BY medicalrecordid)", str));
            return this.c.FillData();
        }
        
        public DataTable getPermission(int UserID)
        {
            string sql = "SELECT typeid, typename, roleid, rolename, userid, permissionvalue, CASE WHEN permissionvalue IN (1,2,3,4,5,6,7,8) THEN 1 ELSE 0 END isread, CASE WHEN permissionvalue IN (2,3,6,7,8) THEN 1 ELSE 0 END iswrite, CASE WHEN permissionvalue IN (4,5,6,7,8) THEN 1 ELSE 0 END isdel, CASE WHEN permissionvalue IN (8) THEN 1 ELSE 0 END isfull ";
            sql = sql + "FROM(SELECT a.id AS typeid, a.name AS typename, b.id AS roleid, b.name AS rolename FROM hm_roletype a JOIN hm_role b ON a.id = b.roletype ) a " + string.Format("LEFT JOIN (SELECT * FROM hm_user_relation WHERE userid = {0}) b ON a.typeid = b.roletype AND a.roleid = b.role", UserID);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getPicResult_Type2(long MedID, string ParaID)
        {
            string sql = string.Format("SELECT upper(hm_getpara_result({0},';{1};',1)) AS result, hm_getpara_result({0},';{1};',2) AS tech, hm_getpara_result({0},';{1};',3) AS description", MedID, ParaID);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getPictureResultDetail(long ParaID)
        {
            this.c.setSql("SELECT servicename, paraclinicalid, a.result, a.tech, a.description, hm_getname(fname, mname, lname) AS doctorname FROM hm_medicalparaclinical_view a LEFT JOIN hm_employee b On a.userid_result = b.id WHERE a.paraclinicalid = " + ParaID);
            return this.c.FillData();
        }
        
        public DataTable getPrepaidInfo(long PrepaidID)
        {
            this.c.setSql("SELECT a.id, medicalrecordid, paiddate, amount, b.fullname FROM hms_prepaid a JOIN hms_user b ON a.cashierid = b.id WHERE a.id = " + PrepaidID);
            return this.c.FillData();
        }
        
        public string getQueueFromCheckNum(int CheckNumber)
        {
            this.c.setSql("SELECT queuenumber FROM hms_callreception WHERE checknum = " + CheckNumber);
            this.dt = this.c.FillData();
            if (this.dt.Rows.Count <= 0)
            {
                return "";
            }
            return this.dt.Rows[0][0].ToString();
        }
        
        public DataTable getQueueListPaid(int zoneplace)
        {
            this.c.setSql(string.Format("SELECT hm_getname(fname, mname, null) AS fullname, lname, a.id, queuenumber, a.status FROM hms_medicalrecord a JOIN hms_patient b ON a.patientid = b.id JOIN hms_callreception c ON a.id = c.medicalrecordid WHERE zoneplace = {0} and checkstatus < 5", zoneplace));
            return this.c.FillData();
        }
        
        public DataTable getQueueNumber(int TableZone)
        {
            this.c.setSql("SELECT * FROM hm_callreceptionview WHERE zoneplace = " + TableZone);
            return this.c.FillData();
        }
        
        public long getReceptionID(long MedID)
        {
            this.c.setSql("SELECT max(id) FROM hms_reception WHERE medicalrecordid = " + MedID);
            this.dt = this.c.FillData();
            if (this.dt.Rows[0][0].ToString().CompareTo("") == 0)
            {
                return 0L;
            }
            return long.Parse(this.dt.Rows[0][0].ToString());
        }
        
        public DataTable getReceptionList(DateTime From, DateTime To, int TypeReport, string Condition)
        {
            switch (TypeReport)
            {
                case 1:
                    this.c.setSql(string.Format("SELECT * FROM hm_reception_list_view WHERE receptiondate BETWEEN '{0}'::timestamp AND '{1}'::timestamp {2}", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), Condition));
                    break;
                
                case 2:
                    this.c.setSql(string.Format("SELECT * FROM hm_reception_list_view WHERE receptiondate BETWEEN '{0}'::timestamp AND '{1}'::timestamp AND status NOT IN ('R','E') {2}", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), Condition));
                    break;
                
                case 3:
                    this.c.setSql(string.Format("SELECT * FROM hm_reception_list_view WHERE receptiondate BETWEEN '{0}'::timestamp AND '{1}'::timestamp AND status = 'W' {2}", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), Condition));
                    break;
                
                case 4:
                    this.c.setSql(string.Format("SELECT * FROM hm_reception_list_view WHERE receptiondate BETWEEN '{0}'::timestamp AND '{1}'::timestamp AND status = 'T' {2}", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), Condition));
                    break;
            }
            return this.c.FillData();
        }
        
        public DataTable getReportHoliday(DateTime From, DateTime To, string Zone, string Sector)
        {
            string sql = "";
            sql = (sql + string.Format("SELECT name, sum(sumpat) AS sumpat, sum(die) AS die, repdate, sum(sum_hospchg) AS sum_hospchg, sum(sum_hospchg_die) AS sum_hospchg_die FROM ( SELECT b.name, count(a.medicalrecordid) AS sumpat, sum(a.die) AS die, repdate, sum(CASE WHEN hospitalchange <> 0 THEN 1 ELSE 0 END) AS sum_hospchg, sum(CASE WHEN hospitalchange <> 0 AND a.die = 1 THEN 1 ELSE 0 END) AS sum_hospchg_die FROM rep_exam_list a JOIN (SELECT * FROM hms_selection WHERE zone = '{0}' AND sector = '{1}') b ON a.examdiagnosisicd = substr(b.note::text, strpos(b.note::text, a.examdiagnosisicd), length(a.examdiagnosisicd)) WHERE exam_date BETWEEN '{2}'::timestamp AND '{3}'::timestamp AND oneday = 1 AND a.examdiagnosisicd <> '' GROUP BY b.name, b.report, repdate, substr(b.note::text, strpos(b.note::text, a.examdiagnosisicd), length(a.examdiagnosisicd)) ", new object[] { Zone, Sector, this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT") }) + " UNION ALL ") + string.Format("SELECT b.name, count(a.medicalrecordid) AS sumpat, sum(a.die) AS die, repdate, sum(CASE WHEN hospitalchange <> 0 THEN 1 ELSE 0 END) AS sum_hospchg, sum(CASE WHEN hospitalchange <> 0 AND a.die = 1 THEN 1 ELSE 0 END) AS sum_hospchg_die FROM rep_exam_list a JOIN (SELECT * FROM hms_selection WHERE zone = '{0}' AND sector = '{1}') b ON a.outdiagnosisicd = substr(b.note::text, strpos(b.note::text, a.outdiagnosisicd), length(a.outdiagnosisicd)) WHERE exam_date BETWEEN '{2}'::timestamp AND '{3}'::timestamp AND oneday = 1 AND a.outdiagnosisicd <> '' GROUP BY b.name, b.report, repdate, substr(b.note::text, strpos(b.note::text, a.examdiagnosisicd), length(a.examdiagnosisicd)) ", new object[] { Zone, Sector, this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT") }) + ") a GROUP BY name, repdate";
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getReportHoliday_Detail(DateTime From, DateTime To, string Zone, string Sector)
        {
            string sql = "";
            sql = (sql + string.Format("SELECT b.name, a.medicalrecordid, hm_getname(fname, mname, lname) AS patname, examdiagnosisicd, outdiagnosisicd, vncode, a.die::integer, repdate, vnname, e.name AS hospitalname, hospitalchange FROM rep_exam_list a JOIN (SELECT * FROM hms_selection WHERE zone = '{0}' AND sector = '{1}') b ON a.examdiagnosisicd = substr(b.note::text, strpos(b.note::text, a.examdiagnosisicd), length(a.examdiagnosisicd)) JOIN hms_patient c ON a.patientid = c.id JOIN hms_icd10 d ON a.examdiagnosisicd = d.icdcode LEFT JOIN (SELECT * FROM hms_selection WHERE zone = 'general' AND sector = 'hospital') e ON a.hospitalchange = e.line WHERE exam_date BETWEEN '{2}'::timestamp AND '{3}'::timestamp AND oneday = 1  AND oneday = 1 AND a.examdiagnosisicd <> ''", new object[] { Zone, Sector, this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT") })) + " UNION ALL " + string.Format("SELECT b.name, a.medicalrecordid, hm_getname(fname, mname, lname) AS patname, examdiagnosisicd, outdiagnosisicd, vncode, a.die::integer, repdate, vnname, e.name AS hospitalname, hospitalchange FROM rep_exam_list a JOIN (SELECT * FROM hms_selection WHERE zone = '{0}' AND sector = '{1}') b ON a.outdiagnosisicd = substr(b.note::text, strpos(b.note::text, a.outdiagnosisicd), length(a.outdiagnosisicd)) JOIN hms_patient c ON a.patientid = c.id JOIN hms_icd10 d ON a.outdiagnosisicd = d.icdcode LEFT JOIN (SELECT * FROM hms_selection WHERE zone = 'general' AND sector = 'hospital') e ON a.hospitalchange = e.line WHERE exam_date BETWEEN '{2}'::timestamp AND '{3}'::timestamp AND oneday = 1 AND a.outdiagnosisicd <> ''", new object[] { Zone, Sector, this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT") });
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getRepSel(string Zone)
        {
            this.c.setSql(string.Format("SELECT line, name, sort FROM hm_report_selection WHERE zone = '{0}'", Zone));
            return this.c.FillData();
        }
        
        public DataTable getRoleValue(int UserID)
        {
            this.c.setSql(string.Format("SELECT rolevalue, roletype FROM hm_userrole WHERE userid = {0} ORDER BY roletype", UserID));
            return this.c.FillData();
        }
        
        public DataTable getRpArchives(int DivisionID)
        {
            this.c.setSql("SELECT *, CASE WHEN militaryrankname IS NOT NULL THEN 'Cấp bậc :' ELSE '' END AS military, CASE WHEN militaryrankname IS NOT NULL THEN '- Đơn vị :' ELSE '- Địa chỉ :' END AS address FROM hm_medicalrecord_archives WHERE treatmentdivisionid = " + DivisionID);
            return this.c.FillData();
        }
        
        public DataTable getRpArchives(long MedID)
        {
            this.c.setSql("SELECT *, CASE WHEN militaryrankname IS NOT NULL THEN 'Cấp bậc :' ELSE '' END AS military, CASE WHEN militaryrankname IS NOT NULL THEN '- Đơn vị :' ELSE '- Địa chỉ :' END AS address FROM hm_medicalrecord_archives WHERE id = " + MedID);
            return this.c.FillData();
        }
        
        public DataTable getRpBackHosp(long MedID)
        {
            this.c.setSql("SELECT * FROM hm_medicalrecord_backhosp WHERE id = " + MedID);
            return this.c.FillData();
        }
        
        public DataTable getRpInHosp_General(DateTime From, DateTime To, bool isBackup)
        {
            string sql = "SELECT f.line AS divisionid, f.name, CASE WHEN f.reportid IS NULL THEN 0 ELSE f.reportid::integer END AS reportid ";
            sql = (((((((((((((((((((((((((((((((((((sql + string.Format(", SUM(CASE WHEN keys = 1 AND repdate = '{0}'::timestamp THEN 1 ELSE 0 END) AS old_sumpatient ", this.f.getDValue(From, "YMDT"))) + string.Format(", SUM(CASE WHEN keys = 1 AND repdate = '{0}'::timestamp THEN CASE WHEN c.cardid <> 0 THEN 1 ELSE 0 END ELSE 0 END) AS old_insure ", this.f.getDValue(From, "YMDT")) + string.Format(", SUM(CASE WHEN keys = 1 AND repdate = '{0}'::timestamp THEN CASE WHEN c.cardid = 0 THEN 1 ELSE 0 END ELSE 0 END) AS old_noninsure ", this.f.getDValue(From, "YMDT"))) + string.Format(", SUM(CASE WHEN keys = 1 AND repdate = '{0}'::timestamp THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 15 THEN 1 ELSE 0 END ELSE 0 END) AS old_child ", this.f.getDValue(From, "YMDT")) + string.Format(", SUM(CASE WHEN keys = 1 AND repdate = '{0}'::timestamp THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 1 THEN 1 ELSE 0 END ELSE 0 END) AS old_child1 ", this.f.getDValue(From, "YMDT"))) + string.Format(", SUM(CASE WHEN keys = 1 AND repdate = '{0}'::timestamp THEN CASE WHEN date_part('year'::text, repdate) - birthyear BETWEEN 1 AND 14 THEN 1 ELSE 0 END ELSE 0 END) AS old_child2 ", this.f.getDValue(From, "YMDT")) + string.Format(", SUM(CASE WHEN keys = 1 AND repdate = '{0}'::timestamp THEN CASE WHEN gender = 1 THEN 0 ELSE 1 END ELSE 0 END)::integer AS old_female ", this.f.getDValue(From, "YMDT"))) + ", SUM(CASE WHEN keys = 2 THEN 1 ELSE 0 END) AS in_sumpatient " + ", SUM(CASE WHEN keys = 2 THEN CASE WHEN c.cardid <> 0 THEN 1 ELSE 0 END ELSE 0 END) AS in_insure ") + ", SUM(CASE WHEN keys = 2 THEN CASE WHEN c.cardid = 0 THEN 1 ELSE 0 END ELSE 0 END) AS in_noninsure " + ", SUM(CASE WHEN keys = 2 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 15 THEN 1 ELSE 0 END ELSE 0 END) AS in_child ") + ", SUM(CASE WHEN keys = 2 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 1 THEN 1 ELSE 0 END ELSE 0 END) AS in_child1 " + ", SUM(CASE WHEN keys = 2 THEN CASE WHEN date_part('year'::text, repdate) - birthyear BETWEEN 1 AND 14 THEN 1 ELSE 0 END ELSE 0 END) AS in_child2 ") + ", SUM(CASE WHEN keys = 2 THEN CASE WHEN gender = 1 THEN 0 ELSE 1 END ELSE 0 END)::integer AS in_female " + ", SUM(CASE WHEN keys = 5 THEN 1 ELSE 0 END) AS out_sumpatient ") + ", SUM(CASE WHEN keys = 5 THEN CASE WHEN c.cardid <> 0 THEN 1 ELSE 0 END ELSE 0 END) AS out_insure " + ", SUM(CASE WHEN keys = 5 THEN CASE WHEN c.cardid = 0 THEN 1 ELSE 0 END ELSE 0 END) AS out_noninsure ") + ", SUM(CASE WHEN keys = 5 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 15 THEN 1 ELSE 0 END ELSE 0 END) AS out_child " + ", SUM(CASE WHEN keys = 5 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 1 THEN 1 ELSE 0 END ELSE 0 END) AS out_child1 ") + ", SUM(CASE WHEN keys = 5 THEN CASE WHEN date_part('year'::text, repdate) - birthyear BETWEEN 1 AND 14 THEN 1 ELSE 0 END ELSE 0 END) AS out_child2 " + ", SUM(CASE WHEN keys = 5 THEN CASE WHEN gender = 1 THEN 0 ELSE 1 END ELSE 0 END)::integer AS out_female ") + ", SUM(CASE WHEN keys = 4 THEN 1 ELSE 0 END) AS to_sumpatient " + ", SUM(CASE WHEN keys = 4 THEN CASE WHEN c.cardid <> 0 THEN 1 ELSE 0 END ELSE 0 END) AS to_insure ") + ", SUM(CASE WHEN keys = 4 THEN CASE WHEN c.cardid = 0 THEN 1 ELSE 0 END ELSE 0 END) AS to_noninsure " + ", SUM(CASE WHEN keys = 4 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 15 THEN 1 ELSE 0 END ELSE 0 END) AS to_child ") + ", SUM(CASE WHEN keys = 4 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 1 THEN 1 ELSE 0 END ELSE 0 END) AS to_child1 " + ", SUM(CASE WHEN keys = 4 THEN CASE WHEN date_part('year'::text, repdate) - birthyear BETWEEN 1 AND 14 THEN 1 ELSE 0 END ELSE 0 END) AS to_child2 ") + ", SUM(CASE WHEN keys = 4 THEN CASE WHEN gender = 1 THEN 0 ELSE 1 END ELSE 0 END)::integer AS to_female " + ", SUM(CASE WHEN keys = 3 THEN 1 ELSE 0 END) AS from_sumpatient ") + ", SUM(CASE WHEN keys = 3 THEN CASE WHEN c.cardid <> 0 THEN 1 ELSE 0 END ELSE 0 END) AS from_insure " + ", SUM(CASE WHEN keys = 3 THEN CASE WHEN c.cardid = 0 THEN 1 ELSE 0 END ELSE 0 END) AS from_noninsure ") + ", SUM(CASE WHEN keys = 3 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 15 THEN 1 ELSE 0 END ELSE 0 END) AS from_child " + ", SUM(CASE WHEN keys = 3 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 1 THEN 1 ELSE 0 END ELSE 0 END) AS from_child1 ") + ", SUM(CASE WHEN keys = 3 THEN CASE WHEN date_part('year'::text, repdate) - birthyear BETWEEN 1 AND 14 THEN 1 ELSE 0 END ELSE 0 END) AS from_child2 " + ", SUM(CASE WHEN keys = 3 THEN CASE WHEN gender = 1 THEN 0 ELSE 1 END ELSE 0 END)::integer AS from_female ") + ", SUM(CASE WHEN keys = 6 THEN 1 ELSE 0 END) AS chg_sumpatient " + ", SUM(CASE WHEN keys = 6 THEN CASE WHEN c.cardid <> 0 THEN 1 ELSE 0 END ELSE 0 END) AS chg_insure ") + ", SUM(CASE WHEN keys = 6 THEN CASE WHEN c.cardid = 0 THEN 1 ELSE 0 END ELSE 0 END) AS chg_noninsure " + ", SUM(CASE WHEN keys = 6 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 15 THEN 1 ELSE 0 END ELSE 0 END) AS chg_child ") + ", SUM(CASE WHEN keys = 6 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 1 THEN 1 ELSE 0 END ELSE 0 END) AS chg_child1 " + ", SUM(CASE WHEN keys = 6 THEN CASE WHEN date_part('year'::text, repdate) - birthyear BETWEEN 1 AND 14 THEN 1 ELSE 0 END ELSE 0 END) AS chg_child2 ") + ", SUM(CASE WHEN keys = 6 THEN CASE WHEN gender = 1 THEN 0 ELSE 1 END ELSE 0 END)::integer AS chg_female " + ", SUM(CASE WHEN keys = 7 THEN 1 ELSE 0 END) AS evs_sumpatient ") + ", SUM(CASE WHEN keys = 7 THEN CASE WHEN c.cardid <> 0 THEN 1 ELSE 0 END ELSE 0 END) AS evs_insure " + ", SUM(CASE WHEN keys = 7 THEN CASE WHEN c.cardid = 0 THEN 1 ELSE 0 END ELSE 0 END) AS evs_noninsure ") + ", SUM(CASE WHEN keys = 7 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 15 THEN 1 ELSE 0 END ELSE 0 END) AS evs_child " + ", SUM(CASE WHEN keys = 7 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 1 THEN 1 ELSE 0 END ELSE 0 END) AS evs_child1 ") + ", SUM(CASE WHEN keys = 7 THEN CASE WHEN date_part('year'::text, repdate) - birthyear BETWEEN 1 AND 14 THEN 1 ELSE 0 END ELSE 0 END) AS evs_child2 " + ", SUM(CASE WHEN keys = 7 THEN CASE WHEN gender = 1 THEN 0 ELSE 1 END ELSE 0 END)::integer AS evs_female ") + ", SUM(CASE WHEN keys = 8 THEN 1 ELSE 0 END) AS die_sumpatient " + ", SUM(CASE WHEN keys = 8 THEN CASE WHEN c.cardid <> 0 THEN 1 ELSE 0 END ELSE 0 END) AS die_insure ") + ", SUM(CASE WHEN keys = 8 THEN CASE WHEN c.cardid = 0 THEN 1 ELSE 0 END ELSE 0 END) AS die_noninsure " + ", SUM(CASE WHEN keys = 8 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 15 THEN 1 ELSE 0 END ELSE 0 END) AS die_child ") + ", SUM(CASE WHEN keys = 8 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 1 THEN 1 ELSE 0 END ELSE 0 END) AS die_child1 " + ", SUM(CASE WHEN keys = 8 THEN CASE WHEN date_part('year'::text, repdate) - birthyear BETWEEN 1 AND 14 THEN 1 ELSE 0 END ELSE 0 END) AS die_child2 ") + ", SUM(CASE WHEN keys = 8 THEN CASE WHEN gender = 1 THEN 0 ELSE 1 END ELSE 0 END)::integer AS die_female " + string.Format(", SUM(CASE WHEN keys = 9 AND repdate = '{0}'::timestamp THEN 1 ELSE 0 END) AS now_sumpatient ", this.f.getDValue(To, "YMDT"))) + string.Format(", SUM(CASE WHEN keys = 9 AND repdate = '{0}'::timestamp THEN CASE WHEN c.cardid <> 0 THEN 1 ELSE 0 END ELSE 0 END) AS now_insure ", this.f.getDValue(To, "YMDT")) + string.Format(", SUM(CASE WHEN keys = 9 AND repdate = '{0}'::timestamp THEN CASE WHEN c.cardid = 0 THEN 1 ELSE 0 END ELSE 0 END) AS now_noninsure ", this.f.getDValue(To, "YMDT"))) + string.Format(", SUM(CASE WHEN keys = 9 AND repdate = '{0}'::timestamp THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 15 THEN 1 ELSE 0 END ELSE 0 END) AS now_child ", this.f.getDValue(To, "YMDT")) + string.Format(", SUM(CASE WHEN keys = 9 AND repdate = '{0}'::timestamp THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 1 THEN 1 ELSE 0 END ELSE 0 END) AS now_child1 ", this.f.getDValue(To, "YMDT"))) + string.Format(", SUM(CASE WHEN keys = 9 AND repdate = '{0}'::timestamp THEN CASE WHEN date_part('year'::text, repdate) - birthyear BETWEEN 1 AND 14 THEN 1 ELSE 0 END ELSE 0 END) AS now_child2 ", this.f.getDValue(To, "YMDT")) + string.Format(", SUM(CASE WHEN keys = 9 AND repdate = '{0}'::timestamp THEN CASE WHEN gender = 1 THEN 0 ELSE 1 END ELSE 0 END)::integer AS now_female ", this.f.getDValue(To, "YMDT"))) + ", SUM(CASE WHEN keys = 9 THEN 1 ELSE 0 END) AS sumday_sumpatient " + ", SUM(CASE WHEN keys = 9 THEN CASE WHEN c.cardid <> 0 THEN 1 ELSE 0 END ELSE 0 END) AS sumday_insure ") + ", SUM(CASE WHEN keys = 9 THEN CASE WHEN c.cardid = 0 THEN 1 ELSE 0 END ELSE 0 END) AS sumday_noninsure " + ", SUM(CASE WHEN keys = 9 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 15 THEN 1 ELSE 0 END ELSE 0 END) AS sumday_child ") + ", SUM(CASE WHEN keys = 9 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 1 THEN 1 ELSE 0 END ELSE 0 END) AS sumday_child1 " + ", SUM(CASE WHEN keys = 9 THEN CASE WHEN date_part('year'::text, repdate) - birthyear BETWEEN 1 AND 14 THEN 1 ELSE 0 END ELSE 0 END) AS sumday_child2 ") + ", SUM(CASE WHEN keys = 9 THEN CASE WHEN gender = 1 THEN 0 ELSE 1 END ELSE 0 END)::integer AS sumday_female " + ", SUM(service)::integer AS service ";
            if (isBackup)
            {
                sql = sql + "FROM vw_rep_general a JOIN hms_patient b ON a.patientid = b.id ";
            }
            else
            {
                sql = sql + "FROM rep_general a JOIN hms_patient b ON a.patientid = b.id ";
            }
            sql = (sql + "LEFT JOIN (SELECT id, patientid, cardid FROM hms_medicalrecord UNION ALL SELECT id, patientid, cardid FROM hms_medicalrecordbackup) c ON a.id = c.id " + "RIGHT JOIN (SELECT * FROM hms_selection WHERE zone = 'general' AND sector = 'division' AND substr(note,1,1)::integer = 1) f ON a.treatmentdivisionid = f.line ") + string.Format("WHERE repdate between '{0}'::timestamp and '{1}'::timestamp ", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")) + "GROUP BY f.line, f.name, f.reportid ";
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getRpInHosp_SumDay_Division(DateTime From, DateTime To)
        {
            string sql = "SELECT f.line AS divisionid, f.name ";
            sql = ((((((sql + ", SUM(CASE WHEN keys = 9 THEN 1 ELSE 0 END) AS sumday_sumpatient " + ", SUM(CASE WHEN keys = 9 THEN CASE WHEN c.cardid <> 0 THEN 1 ELSE 0 END ELSE 0 END) AS sumday_insure ") + ", SUM(CASE WHEN keys = 9 THEN CASE WHEN c.cardid = 0 THEN 1 ELSE 0 END ELSE 0 END) AS sumday_noninsure " + ", SUM(CASE WHEN keys = 9 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 15 THEN 1 ELSE 0 END ELSE 0 END) AS sumday_child ") + ", SUM(CASE WHEN keys = 9 THEN CASE WHEN date_part('year'::text, repdate) - birthyear < 1 THEN 1 ELSE 0 END ELSE 0 END) AS sumday_child1 " + ", SUM(CASE WHEN keys = 9 THEN CASE WHEN date_part('year'::text, repdate) - birthyear BETWEEN 1 AND 14 THEN 1 ELSE 0 END ELSE 0 END) AS sumday_child2 ") + ", SUM(CASE WHEN keys = 9 THEN CASE WHEN gender = 1 THEN 0 ELSE 1 END ELSE 0 END)::integer AS sumday_female " + ", SUM(service)::integer AS service ") + "FROM vw_rep_general a JOIN hms_patient b ON a.patientid = b.id " + "LEFT JOIN (SELECT * FROM hms_medicalrecord UNION ALL SELECT * FROM hms_medicalrecordbackup) c ON a.id = c.id ") + "LEFT JOIN (SELECT * FROM hms_treatmentrecord UNION ALL SELECT * FROM hms_treatmentrecordbackup) d ON a.id = d.medicalrecordid " + "RIGHT JOIN (SELECT * FROM hms_selection WHERE zone = 'general' AND sector = 'division' AND substr(note,1,1)::integer = 1) f ON a.treatmentdivisionid = f.line ") + string.Format("WHERE repdate between '{0}'::timestamp and '{1}'::timestamp ", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")) + "GROUP BY f.line, f.name ";
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getRpInsure01_detail(long MedID, string RpNumber, string Condition, int RpType)
        {
            this.c.setSql(string.Concat(new object[] { "SELECT * FROM his_get_fee_insurance_detail('", MedID, ";", RpNumber, ";", Condition, ";", RpType, "')" }));
            return this.c.FillData();
        }
        
        public DataTable getRpInsure01_footer(long MedID, bool isTreatment)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_fee_insurance_footer('{0};{1}')", MedID, this.f.Boolean2Int(isTreatment)));
            return this.c.FillData();
        }
        
        public DataTable getRpInsure01_Title(long MedID)
        {
            this.c.setSql("SELECT * FROM hm_rpinsure02 WHERE id = " + MedID);
            return this.c.FillData();
        }
        
        public DataTable getRpInsure01_Title_Backup(long MedID)
        {
            this.c.setSql("SELECT * FROM hm_rpinsure01_bk WHERE id = " + MedID);
            return this.c.FillData();
        }
        
        public DataTable getRpQueueExam(long MedID)
        {
            this.c.setSql(string.Format("select a.id, fullname, creationdate, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, birthyear, CASE WHEN cardcode IS NOT NULL THEN 'M\x00e3 Thẻ : ' ELSE '' END || cardcode AS code, examtypename, split_part(ticketnumber,'.',1) || chr(13) || chr(10) || roomname AS roomexam, split_part(ticketnumber,'.',2) AS queue FROM hm_medicalreception_info a JOIN hm_patient_info b ON a.patientid = b.id WHERE a.id = {0}", MedID));
            return this.c.FillData();
        }
        
        public DataTable getRpQueueExam(long MedID, long ReceptionID)
        {
            if (ReceptionID == 0L)
            {
                this.c.setSql("select a.id, fullname, creationdate, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, birthyear, CASE WHEN cardcode IS NOT NULL THEN 'M\x00e3 Thẻ : ' ELSE '' END || cardcode AS code, examtypename, split_part(ticketnumber,'.',1) || chr(13) || chr(10) || roomname AS roomexam, split_part(ticketnumber,'.',2) AS queue FROM hm_medicalreception_info_alltick a JOIN hm_patient_info b ON a.patientid = b.id WHERE a.id = " + MedID);
            }
            else
            {
                this.c.setSql(string.Format("select a.id, hm_getname(fname, mname, lname) AS fullname, creationdate, CASE WHEN gender = 1 THEN 'Nam' ELSE 'Nữ' END AS sex, birthyear, CASE WHEN code IS NOT NULL THEN 'M\x00e3 Thẻ : ' ELSE '' END || code AS code, examtypename, split_part(ticketnumber,'.',1) || chr(13) || chr(10) || roomname AS roomexam, split_part(ticketnumber,'.',2) AS queue FROM (SELECT * FROM hm_medicalreception_info WHERE id = {0} AND receptionid = {1})a JOIN hms_patient b ON a.patientid = b.id LEFT JOIN hms_card c ON a.cardid = c.id", MedID, ReceptionID));
            }
            return this.c.FillData();
        }
        
        public DataTable getRpSummaryExam(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT examroomid, roomname, count(id) AS sumrecord, sum(insure) as suminsure, sum(chginhosp) as sumchginhosp, sum(inhosp) as suminhosp , sum(CASE WHEN insure = 1 THEN inhosp ELSE 0 END) AS suminhosp_insure , sum(outhosp) AS sumouthosp, sum(CASE WHEN insure = 1 THEN outhosp ELSE 0 END) AS sumouthosp_insure , sum(chgouthosp) AS sumchgouthosp, sum(CASE WHEN insure = 1 THEN chgouthosp ELSE 0 END) AS sumchgouthosp_insure FROM (SELECT b.id, a.fullname, CASE WHEN a.cardcode IS NOT NULL THEN 1 ELSE 0 END AS insure, CASE WHEN d.otherhospital <> 0 THEN 1 ELSE 0 END AS chginhosp, CASE WHEN c.note::integer IN (1) THEN 1 ELSE 0 END AS chgouthosp, CASE WHEN c.note::integer = 2 THEN 1 ELSE 0 END AS inhosp , CASE WHEN c.note::integer IN (3,5) THEN 1 ELSE 0 END AS outhosp , CASE WHEN c.note::integer IN (4,6) THEN 1 ELSE 0 END AS other , examroomid, roomname FROM hm_patient_info a JOIN hm_medicalreception_info b ON a.id = b.patientid JOIN (SELECT line, note FROM hms_selection WHERE zone ='hms' AND sector = 'ex_suggest') c ON b.examsuggestionid = c.line LEFT JOIN (SELECT medicalrecordid, otherhospital FROM hms_reception WHERE id IN (SELECT min(id) FROM hms_reception GROUP BY medicalrecordid)) d ON b.id = medicalrecordid WHERE exam_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp GROUP BY b.id, a.fullname, a.cardcode , examroomid, roomname , d.otherhospital, b.otherhospital, c.note ) GROUP BY examroomid, roomname", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getSendPatientList(DateTime From, DateTime To, int PatientObject)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_report_treatment_patient_detail('{0};{1};3;{2}')", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), PatientObject));
            return this.c.FillData();
        }
        
        public DataTable getServiceFeeList(long MedID, bool isDetail, bool isNonPay, bool isPay, bool isCallBackup, int FeeModeType)
        {
            if (!isCallBackup)
            {
                return this.ServiceFeeList(MedID, isDetail, isNonPay, isPay, FeeModeType);
            }
            return this.ServiceFeeListBackup(MedID, isDetail, isNonPay, isPay, FeeModeType);
        }
        
        public DataTable getServiceList()
        {
            this.c.setSql("SELECT CASE WHEN b.id IS NOT NULL THEN b.servicename ELSE c.name END As group_name, a.servicename AS name, a.servicegroupline, a.id, c.line, price, optprice FROM hms_service a LEFT JOIN (SELECT id, servicename FROM hms_service WHERE category = 'GROUP' AND hide = 0) b ON a.servicegroup::integer = b.id LEFT JOIN (SELECT line, name FROM hms_selection WHERE zone = 'srvcon' AND sector = 'sergrp') c ON SUBSTR(a.accesskey::text,1,2)::integer = c.line WHERE hide = 0 ORDER BY c.line");
            return this.c.FillData();
        }
        
        public DataTable getServiceList(long MedID, int TypeView, bool isFee)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_get_service_list('{0};{1};{2}')", MedID, TypeView, this.f.Boolean2Int(isFee)));
            return this.c.FillData();
        }
        
        private string getSpitName(string Name)
        {
            string str = "";
            string str2 = "";
            string str3 = "";
            string[] strArray = Name.Split(new char[] { ' ' });
            if (strArray.Length == 1)
            {
                str = this.f.getInitUpper(strArray[0]);
            }
            else if (strArray.Length == 2)
            {
                str3 = this.f.getInitUpper(strArray[0]);
                str = this.f.getInitUpper(strArray[1]);
            }
            else if (strArray.Length == 3)
            {
                str3 = this.f.getInitUpper(strArray[0]);
                str2 = this.f.getInitUpper(strArray[1]);
                str = this.f.getInitUpper(strArray[2]);
            }
            else if (strArray.Length > 3)
            {
                str3 = this.f.getInitUpper(strArray[0]);
                str = this.f.getInitUpper(strArray[strArray.Length - 1]);
                for (int i = 1; i < (strArray.Length - 1); i++)
                {
                    str2 = str2 + this.f.getInitUpper(strArray[i]);
                    if (i < (strArray.Length - 2))
                    {
                        str2 = str2 + " ";
                    }
                }
            }
            return string.Format("{0};{1};{2}", str3, str2, str);
        }
        
        public string getStockControl(int UserID)
        {
            this.c.setSql(string.Format("SELECT hm_getstockcontrol({0})", UserID));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public long getStockImexID(long MedID)
        {
            this.c.setSql("SELECT stockimexid FROM hms_patientdrug WHERE medicalrecordid = " + MedID);
            return long.Parse(this.c.FillData().Rows[0][0].ToString());
        }
        
        public DataTable getStockRole(int UserID)
        {
            this.c.setSql(string.Format("SELECT code, name, CASE WHEN b.stockid IS NULL THEN 0 ELSE 1 END AS choose FROM hms_drugselection a LEFT JOIN (SELECT * FROM hm_user_stockrole WHERE userid = {0}) b ON a.code = b.stockid WHERE zone = 'stock'", UserID));
            return this.c.FillData();
        }
        
        public DataTable getSubRp_EmergencyDie(DateTime From, DateTime To)
        {
            string sql = string.Format("SELECT a.id, hm_getname(fname, mname, lname) AS name, initialdiagnosisicd, external_icd FROM rep_general a JOIN hms_patient b ON a.patientid = b.id JOIN hms_medicalrecord c ON a.id = c.id WHERE keys = 11 AND repdate between '{0}'::timestamp and '{1}'::timestamp", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"));
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getSubRp_EmergencyNow(DateTime From, DateTime To, int ListIndex, int TopValue)
        {
            if (ListIndex == 1)
            {
                this.c.setSql(string.Format("SELECT a.id, hm_getname(fname, mname, lname) AS name FROM rep_general a JOIN hms_patient b ON a.patientid = b.id WHERE repdate between '{0}'::timestamp and '{1}'::timestamp AND keys = 10 ORDER BY a.id LIMIT {2}", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), TopValue));
            }
            else
            {
                this.c.setSql(string.Format("SELECT a.id, hm_getname(fname, mname, lname) AS name FROM rep_general a JOIN hms_patient b ON a.patientid = b.id WHERE repdate between '{0}'::timestamp and '{1}'::timestamp AND keys = 10 AND a.id NOT IN (SELECT id FROM rep_general WHERE repdate between '{0}'::timestamp and '{1}'::timestamp AND keys = 10 ORDER BY id LIMIT {2}) ORDER BY a.id", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), TopValue));
            }
            return this.c.FillData();
        }
        
        public DataTable getSubRp_FeeGeneral(long MedID, bool isBackup, int FeeType)
        {
            if (isBackup)
            {
                switch (FeeType)
                {
                    case 0:
                        this.c.setSql(string.Format("SELECT sum(summoney) AS summoney, sum(sumdiscount) AS sumdiscount, sum(sumfree) AS sumfree, sum(sumselfpay) AS sumselfpay, sum(sumoutpay) AS sumoutpay, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid FROM hm_fee_summary_backup WHERE medicalrecordid = {0}", MedID));
                        break;
                    
                    case 1:
                        this.c.setSql(string.Format("SELECT sum(summoney) AS summoney, sum(sumdiscount) AS sumdiscount, sum(sumfree) AS sumfree, sum(sumselfpay) AS sumselfpay, sum(sumoutpay) AS sumoutpay, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid FROM hm_fee_summary_drugstore_backup WHERE medicalrecordid = {0}", MedID));
                        break;
                }
            }
            else
            {
                switch (FeeType)
                {
                    case 0:
                        this.c.setSql(string.Format("SELECT sum(summoney) AS summoney, sum(sumdiscount) AS sumdiscount, sum(sumfree) AS sumfree, sum(sumselfpay) AS sumselfpay, sum(sumoutpay) AS sumoutpay, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid FROM hm_fee_summary WHERE medicalrecordid = {0}", MedID));
                        break;
                    
                    case 1:
                        this.c.setSql(string.Format("SELECT sum(summoney) AS summoney, sum(sumdiscount) AS sumdiscount, sum(sumfree) AS sumfree, sum(sumselfpay) AS sumselfpay, sum(sumoutpay) AS sumoutpay, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid FROM hm_fee_summary_drugstore WHERE medicalrecordid = {0}", MedID));
                        break;
                }
            }
            return this.c.FillData();
        }
        
        public DataTable getSubRp_FeeGeneral(long MedID, bool isBackup, int FeeType, bool isPaid)
        {
            if (isBackup)
            {
                switch (FeeType)
                {
                    case 0:
                        this.c.setSql(string.Format("SELECT sum(summoney) AS summoney, sum(sumdiscount) AS sumdiscount, sum(sumfree) AS sumfree, sum(sumselfpay) AS sumselfpay, sum(sumoutpay) AS sumoutpay, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid FROM hm_fee_summary_backup WHERE medicalrecordid = {0}", MedID));
                        break;
                    
                    case 1:
                        this.c.setSql(string.Format("SELECT sum(summoney) AS summoney, sum(sumdiscount) AS sumdiscount, sum(sumfree) AS sumfree, sum(sumselfpay) AS sumselfpay, sum(sumoutpay) AS sumoutpay, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid FROM hm_fee_summary_drugstore_backup WHERE medicalrecordid = {0}", MedID));
                        break;
                }
            }
            else
            {
                switch (FeeType)
                {
                    case 0:
                        if (!isPaid)
                        {
                            this.c.setSql(string.Format("SELECT sum(summoney) AS summoney, sum(sumdiscount) AS sumdiscount, sum(sumfree) AS sumfree, sum(sumselfpay) AS sumselfpay, sum(sumoutpay) AS sumoutpay, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid FROM hm_fee_summary_nonpaid WHERE medicalrecordid = {0}", MedID));
                            break;
                        }
                        this.c.setSql(string.Format("SELECT sum(summoney) AS summoney, sum(sumdiscount) AS sumdiscount, sum(sumfree) AS sumfree, sum(sumselfpay) AS sumselfpay, sum(sumoutpay) AS sumoutpay, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid FROM hm_fee_summary WHERE medicalrecordid = {0}", MedID));
                        break;
                    
                    case 1:
                        this.c.setSql(string.Format("SELECT sum(summoney) AS summoney, sum(sumdiscount) AS sumdiscount, sum(sumfree) AS sumfree, sum(sumselfpay) AS sumselfpay, sum(sumoutpay) AS sumoutpay, sum(sumprepaid) AS sumprepaid, sum(sumunprepaid) AS sumunprepaid FROM hm_fee_summary_drugstore WHERE medicalrecordid = {0}", MedID));
                        break;
                }
            }
            return this.c.FillData();
        }
        
        public DataTable getSubRp_FeeGeneral(long MedID, long PaidID, bool isBackup, int FeeType)
        {
            if (isBackup)
            {
                switch (FeeType)
                {
                    case 0:
                        this.c.setSql(string.Format("SELECT summoney, sumdiscount, sumfree, sumselfpay, sumoutpay, sumprepaid, sumunprepaid, invoidid FROM hm_fee_summary_backup_invoid WHERE medicalrecordid = {0} AND invoidid = {1}", MedID, PaidID));
                        break;
                    
                    case 1:
                        this.c.setSql(string.Format("SELECT summoney, sumdiscount, sumfree, sumselfpay, sumoutpay, sumprepaid, sumunprepaid, invoidid FROM hm_fee_summary_drugstore_backup WHERE medicalrecordid = {0} AND invoidid = {1}", MedID, PaidID));
                        break;
                }
            }
            else
            {
                switch (FeeType)
                {
                    case 0:
                        this.c.setSql(string.Format("SELECT summoney, sumdiscount, sumfree, sumselfpay, sumoutpay, sumprepaid, sumunprepaid, invoidid FROM hm_fee_summary_invoid WHERE medicalrecordid = {0} AND invoidid = {1}", MedID, PaidID));
                        break;
                    
                    case 1:
                        this.c.setSql(string.Format("SELECT summoney, sumdiscount, sumfree, sumselfpay, sumoutpay, sumprepaid, sumunprepaid, invoidid FROM hm_fee_summary_drugstore WHERE medicalrecordid = {0} AND invoidid = {1}", MedID, PaidID));
                        break;
                }
            }
            return this.c.FillData();
        }
        
        public DataTable getSubRp_Note(DateTime From, DateTime To)
        {
            string sql = string.Format("SELECT divisionid, '-' || report || ':' || notes AS notes FROM rep_general_notes a JOIN (SELECT * FROM hms_selection WHERE zone = 'general' AND sector = 'division') b ON a.divisionid = b.line WHERE repdate between '{0}'::timestamp and '{1}'::timestamp", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"));
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getSubRp_SumExam(DateTime From, DateTime To)
        {
            string sql = "SELECT SUM(sumexam) AS sumexam, SUM(emergency) AS emergency, SUM(sevice1) AS sevice1, SUM(sevice2) AS sevice2, SUM(insure) AS insure, SUM(emergency_import) AS emergency_import, SUM(emergency_die) AS emergency_die, SUM(emergency_out) AS emergency_out, SUM(emergency_chghosp) AS emergency_chghosp, SUM(health) AS health, SUM(sumpatient) AS sumpatient, SUM(exam_import) AS exam_import, SUM(outhosp) AS outhosp, SUM(exam_export) AS exam_export ";
            sql = sql + string.Format("FROM rep_general_exam a WHERE a.repdate between '{0}'::timestamp and '{1}'::timestamp ", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"));
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getSum_Clinic(DateTime From, DateTime To, string ConditionValue)
        {
            string sql = "";
            sql = string.Format("SELECT divisionname, repdate, count(id) AS summed, sum(insure) AS suminsure, count(id) - sum(insure) AS sumpaid, SUM(CASE WHEN treatmentdivisionid <> 0 THEN 1 ELSE 0 END) AS suminhosp, SUM(changehosp) AS sumchangehosp, SUM(outhosp) AS sumouthosp, SUM(numberdayouttreatment) AS numberdayouttreatment, count(id) - SUM(CASE WHEN gender <> 1 THEN 1 ELSE 0 END) AS summale, SUM(CASE WHEN gender = 1 THEN 1 ELSE 0 END) AS sumfemale, sum(child) AS sumchild, sum(hospitalchange) AS sumhospchg FROM hm_icd_clinic WHERE exam_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp {2} GROUP BY divisionname, repdate", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ConditionValue);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getSum_Clinic_Gen(DateTime From, DateTime To, string ConditionValue)
        {
            string sql = "";
            sql = string.Format("SELECT repdate, count(id) AS summed, SUM(gender) AS summale, SUM(CASE WHEN gender <> 1 THEN 1 ELSE 0 END) AS sumfemale, SUM(die) AS sumdie, SUM(CASE WHEN gender = 1 THEN die ELSE 0 END) AS sumdiemale, SUM(CASE WHEN gender <> 1 THEN die ELSE 0 END) AS sumdiefemale, sum(child) AS sumchild, SUM(CASE WHEN child = 1 THEN die ELSE 0 END) AS sumdiechild FROM hm_icd_clinic WHERE exam_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp {2} GROUP BY repdate", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ConditionValue);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getSum_Clinic_ICD(DateTime From, DateTime To, string ConditionValue, int ICDType)
        {
            string sql = "";
            switch (ICDType)
            {
                case 0:
                    sql = string.Format("SELECT initialdiagnosisicd, repdate, count(id) AS summed, count(id) - SUM(CASE WHEN gender <> 1 THEN 1 ELSE 0 END) AS summale, SUM(CASE WHEN gender = 1 THEN 1 ELSE 0 END) AS sumfemale, SUM(die) AS sumdie, SUM(CASE WHEN gender <> 1 THEN die ELSE 0 END) AS sumdiemale, SUM(CASE WHEN gender = 1 THEN die ELSE 0 END) AS sumdiefemale, sum(child) AS sumchild, SUM(CASE WHEN child = 1 THEN die ELSE 0 END) AS sumdiechild, vnname FROM hm_icd_clinic WHERE exam_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp {2} GROUP BY initialdiagnosisicd, repdate, vnname", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ConditionValue);
                    break;
                
                case 1:
                    sql = string.Format("SELECT b.id AS initialdiagnosisicd, repdate, count(a.id) AS summed, count(a.id) - SUM(CASE WHEN gender <> 1 THEN 1 ELSE 0 END) AS summale, SUM(CASE WHEN gender = 1 THEN 1 ELSE 0 END) AS sumfemale, SUM(die) AS sumdie, SUM(CASE WHEN gender <> 1 THEN die ELSE 0 END) AS sumdiemale, SUM(CASE WHEN gender = 1 THEN die ELSE 0 END) AS sumdiefemale, sum(child) AS sumchild, SUM(CASE WHEN child = 1 THEN die ELSE 0 END) AS sumdiechild, b.vnname FROM hm_icd_clinic a JOIN hms_icdvietnam b ON a.vncode = b.id WHERE exam_date BETWEEN '{0}'::timestamp AND '{1}'::timestamp {2} GROUP BY b.id, repdate, b.vnname", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ConditionValue);
                    break;
            }
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getSumService(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT medicalrecordid, hm_getname(fname, mname, lname) AS name, summoney, sumdiscount, sumselfpay, sumfree FROM hm_fee_summary a JOIN hms_medicalrecord b ON a.medicalrecordid = b.id JOIN hms_patient c ON b.patientid = c.id WHERE close_date::date BETWEEN '{0}' and '{1}'", this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD")));
            return this.c.FillData();
        }
        
        public DataTable getSurgeryPlanGeneral(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT medicalrecordid, fullname, year_old, initial_diagnosis, servicecode, emp_name, anaes, begin_date, begin_date::date AS repdate, room, anaes_name, diag, servicename, division_name, surg_type FROM hm_surgery_list WHERE begin_date::date BETWEEN '{0}'::timestamp AND '{1}'::timestamp AND ischeck = 1 ", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getTestCode(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT *, 0 AS chk FROM hm_testinsure WHERE exam_date BETWEEN '{0}' AND '{1}' AND SUBSTR(code,4,2) <> SUBSTR(code,16,2)", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getTestInsure(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT *, 0 AS chk FROM hm_testinsure WHERE exam_date BETWEEN '{0}' AND '{1}'", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData();
        }
        
        public DataTable getToPatientList(DateTime From, DateTime To, int PatientObject)
        {
            this.c.setSql(string.Format("SELECT * FROM his_get_report_treatment_patient_detail('{0};{1};2;{2}')", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), PatientObject));
            return this.c.FillData();
        }
        
        public DataTable getTreatementBook(DateTime From, DateTime To, int DivisionID)
        {
            this.c.setSql(string.Format("SELECT *, inhosp_date::date AS rep_date, medicalrecordid || chr(13) || chr(10) || fullname AS medicalname FROM rep_treatment WHERE inhosp_date::date BETWEEN '{0}'::date AND '{1}'::date AND treatmentdivisionid = {2}", this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD"), DivisionID));
            return this.c.FillData();
        }
        
        public DataTable getUser()
        {
            this.c.setSql("select CASE WHEN a.id IS NULL THEN 0 ELSE a.id END AS id, username, hm_getname(fname,mname,lname) as empname, pass, b.id employeeid, c.divisionid, control from hm_user a right join hm_employee b on a.employeeid = b.id right join hm_employee_task c ON b.id = c.employeeid WHERE b.status = 'O'");
            return this.c.FillData();
        }
        
        public DataTable getUserInfo(int UserID)
        {
            string sql = "";
            sql = ((sql + "select hm_getname(fname, mname, lname) AS fullname, c.name AS divisionname, d.name AS titlename, e.username, e.control " + "FROM hm_employee a JOIN hm_employee_task b ON a.id = b.employeeid ") + "JOIN (SELECT * FROM hms_selection WHERE sector = 'division') c ON b.divisionid = c.line " + "JOIN (SELECT * FROM hms_selection WHERE sector = 'title') d ON a.title = d.line ") + "JOIN hm_user e ON e.employeeid = a.id WHERE e.id = " + UserID;
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public DataTable getUserRole(int UserID)
        {
            this.c.setSql(string.Format("SELECT a.roletype || '.' || a.id, a.name, b.id || '.' || b.name AS rolegroup, c.permissionvalue, CASE WHEN c.permissionvalue IS NOT NULL THEN 1 ELSE 0 END AS chs FROM hm_role a JOIN hm_roletype b ON a.roletype = b.id LEFT JOIN (SELECT * FROM hm_user_relation WHERE userid = {0}) c ON (b.id = c.roletype AND a.id = c.role)", UserID));
            return this.c.FillData();
        }
        
        public string his_edit_medical_record_final(long Medical_ID, long Patient_ID, int Ethnic, int Work, string Relatedinfo, int Military, string Company, string Tax, string Precint_ID, string Home_Number, string Street, string ICD_From_Hospital, string ICD_Clinic, string ICD_Main, string ICD_Expand, string ICD_Outside, int Hospital_Transfer_ID, string Treatment_way, string Guide, int Treatment_Conclusion, int Treatment_Suggestion, int Division_ID, int Doctor_ID)
        {
            this.c.setSql(string.Concat(new object[] { 
                "SELECT his_edit_medical_record_final('", Medical_ID, "|", Patient_ID, "|", Ethnic, "|", Work, "|", Relatedinfo, "|", Military, "|", Company, "|", Tax,
                "|", Precint_ID, "|", Home_Number, "|", Street, "|", ICD_From_Hospital, "|", ICD_Clinic, "|", ICD_Main, "|", ICD_Expand, "|", ICD_Outside,
                "|", Hospital_Transfer_ID, "|", Treatment_way, "|", Guide, "|", Treatment_Conclusion, "|", Treatment_Suggestion, "|", Division_ID, "|", Doctor_ID, "|", this.sys_info.getSID(),
                "')"
            }));
            return this.c.ExecuteScalar();
        }
        
        public string ins_Bill_Detail(long PatID, long MedID, int StockID, int Examroom, long DrugID, int Quantity, long Price, int Doctor, string Instruction, string Daily, string Instalment, int Usage)
        {
            string sql = string.Format("SELECT pharma_NewDrugPatient_DirectStock('{0};{1};{2};{3};0;{4};{5};{5}.0;{5}.0;{6};{7};{8};{9};{10};{11};{12}')", new object[] { PatID, MedID, StockID, Examroom, DrugID, Quantity, Instalment, Daily, Usage, Instruction, Doctor, this.sys_info.getSID(), Price });
            this.c.setSql(sql);
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public int ins_Drug(string Name, string GenericName, int Drug_Type, int Drug_Group, int Content, int Unit, int Drug_Report)
        {
            this.c.setSql(string.Format("SELECT pharma_makenew_drug('{0};{1};{2};{3};{4};{5};{6}')", new object[] { GenericName, Name, Drug_Type, Drug_Group, Content, Unit, Drug_Report }));
            return int.Parse(this.c.FillData().Rows[0][0].ToString());
        }
        
        public bool ins_drugselection(string Zone, string Name)
        {
            this.c.setSql(string.Format("INSERT INTO hms_drugselection(zone, code, name) VALUES('{0}',NEXTVAL('{1}_seq'),'{2}')", Zone, Zone.ToLower(), Name));
            return this.c.RunSql();
        }
        
        public string ins_EmergCabinet(long PatID, long MedID, int StockID, long DrugID, decimal Quantity, int Doctor)
        {
            string sql = string.Format("SELECT pharma_newdrugpatient_emercabinet('{0};{1};{2};;{3};{4};{4};;{5};{6}')", new object[] { PatID, MedID, StockID, DrugID, Quantity, Doctor, this.sys_info.getSID() });
            this.c.setSql(sql);
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string ins_examroom(int ID, string Name, int Code, string Note)
        {
            this.c.setSql(string.Format("SELECT name, hide FROM hms_examroom WHERE id = {0} GROUP BY name, hide", ID));
            this.dt = this.c.FillData();
            if (this.dt.Rows.Count > 0)
            {
                if (this.dt.Rows[0]["hide"].ToString().CompareTo("1") == 0)
                {
                    this.yn.Show("M\x00e3 dịch vụ đ\x00e3 c\x00f3 trong lưu trữ, bạn kh\x00f4ng thể th\x00eam mới. Bạn c\x00f3 muốn mở lại dịch vụ?");
                    if (this.yn.DialogResult == DialogResult.OK)
                    {
                        this.c.setSql("UPDATE hms_examroom SET hide = 0 WHERE id = " + ID);
                        if (this.c.RunSql())
                        {
                            return "OK";
                        }
                        return "Err:Lỗi khi th\x00eam danh mục dịch vụ";
                    }
                    return "OK";
                }
                this.yn.Show("Bạn muốn cập nhật lại th\x00f4ng tin dịch vụ?");
                if (this.yn.DialogResult == DialogResult.OK)
                {
                    this.c.setSql(string.Format("UPDATE hms_examroom SET name = {0}, Code = {1}, Note = {2} WHERE id = {3}", new object[] { this.f.getValue(Name), Code, this.f.getValue(Note), ID }));
                    if (this.c.RunSql())
                    {
                        return "OK";
                    }
                    return "Err:Lỗi khi th\x00eam danh mục dịch vụ";
                }
                return "OK";
            }
            this.c.setSql(string.Format("INSERT INTO hms_examroom(id, divisionid, name, code, note) VALUES({0}, 1, {1}, {2}, {3})", new object[] { ID, this.f.getValue(Name), Code, this.f.getValue(Note) }));
            if (this.c.RunSql())
            {
                this.c.setSql(string.Format("CREATE SEQUENCE queue{0}_seq INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1; ", ID));
                this.c.RunSql();
                this.c.setSql(string.Format("ALTER TABLE queue{0}_seq OWNER TO postgres;", ID));
                this.c.RunSql();
                return "OK";
            }
            return "Err:Lỗi khi th\x00eam danh mục dịch vụ";
        }
        
        public string ins_ICD10(string Values)
        {
            this.c.setSql(string.Format("SELECT hm_ins_icd('{0}')", Values));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string ins_selection(string Zone, string Sector, string Name, string Note)
        {
            this.c.setSql(string.Format("SELECT max(line) FROM hms_selection WHERE zone = {0} AND sector = {1}", this.f.getValue(Zone), this.f.getValue(Sector)));
            this.dt = this.c.FillData();
            int num = 0;
            try
            {
                num = int.Parse(this.dt.Rows[0][0].ToString()) + 1;
            }
            catch
            {
                num = 1;
            }
            if (Sector.CompareTo("autotext") == 0)
            {
                this.c.setSql(string.Format("SELECT * FROM hms_selection WHERE zone = '{0}' AND sector = '{1}' AND name LIKE '%{2}%'", Zone, Sector, Name));
                this.dt = this.c.FillData();
                if (this.dt.Rows.Count > 0)
                {
                    return "Err:Tr\x00f9ng k\x00fd hiệu viết tắt";
                }
                this.c.setSql(string.Format("INSERT INTO hms_selection(zone, sector, name, line, note, report) VALUES({0}, {1}, {2}, {3}, {4}, {5})", new object[] { this.f.getValue(Zone), this.f.getValue(Sector), this.f.getValue(Name), num, this.f.getValue(Note), this.sys_info.getSub() }));
            }
            else
            {
                this.c.setSql(string.Format("INSERT INTO hms_selection(zone, sector, name, line, note) VALUES({0}, {1}, {2}, {3}, {4})", new object[] { this.f.getValue(Zone), this.f.getValue(Sector), this.f.getValue(Name), num, this.f.getValue(Note) }));
            }
            if (this.c.RunSql())
            {
                return "OK";
            }
            return "Err:Lỗi khi th\x00eam danh mục dịch vụ";
        }
        
        public string ins_selection(string Zone, string Sector, string Name, int Line, string Note)
        {
            this.c.setSql(string.Format("SELECT name, hide FROM hms_selection WHERE zone = {0} AND sector = {1} AND line = {2} GROUP BY name, hide", this.f.getValue(Zone), this.f.getValue(Sector), Line));
            this.dt = this.c.FillData();
            if (this.dt.Rows.Count > 0)
            {
                if (this.dt.Rows[0]["hide"].ToString().CompareTo("1") == 0)
                {
                    this.yn.Show("M\x00e3 dịch vụ đ\x00e3 c\x00f3 trong lưu trữ, bạn kh\x00f4ng thể th\x00eam mới. Bạn c\x00f3 muốn mở lại dịch vụ?");
                    if (this.yn.DialogResult == DialogResult.OK)
                    {
                        this.c.setSql(string.Format("UPDATE hms_selection SET hide = 0 WHERE zone = {0} AND sector = {1} AND line = {2}", this.f.getValue(Zone), this.f.getValue(Sector), Line));
                        if (this.c.RunSql())
                        {
                            return "OK";
                        }
                        return "Err:Lỗi khi th\x00eam danh mục dịch vụ";
                    }
                    return "OK";
                }
                this.yn.Show("Bạn muốn cập nhật lại th\x00f4ng tin dịch vụ?");
                if (this.yn.DialogResult == DialogResult.OK)
                {
                    this.c.setSql(string.Format("UPDATE hms_selection SET name = {0} WHERE zone = {1} AND sector = {2} AND line = {3}", new object[] { this.f.getValue(Name), this.f.getValue(Zone), this.f.getValue(Sector), Line }));
                    if (this.c.RunSql())
                    {
                        return "OK";
                    }
                    return "Err:Lỗi khi cập nhật danh mục dịch vụ";
                }
                return "OK";
            }
            if (Sector.CompareTo("autotext") == 0)
            {
                this.c.setSql(string.Format("SELECT * FROM hms_selection WHERE zone = '{0}' AND sector = '{1}' AND name LIKE '%{2}%'", Zone, Sector, Name));
                this.dt = this.c.FillData();
                if (this.dt.Rows.Count > 0)
                {
                    return "Err:Tr\x00f9ng k\x00fd hiệu viết tắt";
                }
                this.c.setSql(string.Format("INSERT INTO hms_selection(zone, sector, name, line, note, report) VALUES({0}, {1}, {2}, {3}, {4}, {5})", new object[] { this.f.getValue(Zone), this.f.getValue(Sector), this.f.getValue(Name), Line, this.f.getValue(Note), this.sys_info.getSub() }));
            }
            else
            {
                this.c.setSql(string.Format("INSERT INTO hms_selection(zone, sector, name, line, note) VALUES({0}, {1}, {2}, {3}, {4})", new object[] { this.f.getValue(Zone), this.f.getValue(Sector), this.f.getValue(Name), Line, this.f.getValue(Note) }));
            }
            if (this.c.RunSql())
            {
                return "OK";
            }
            return "Err:Lỗi khi th\x00eam danh mục dịch vụ";
        }
        
        public bool ins_stockselection(string StockType, string Name)
        {
            string str = "";
            string str2 = "";
            string str3 = "";
            switch (StockType)
            {
                case "mainstock":
                    str = "M";
                    str2 = "1";
                    str3 = "0";
                    break;
                
                case "substock":
                    str2 = "2";
                    str3 = "0";
                    str = "S";
                    break;
                
                case "emergstock":
                    str2 = "2";
                    str3 = "0";
                    str = "E";
                    break;
                
                case "issuestock":
                    str2 = "2";
                    str3 = "0";
                    str = "R";
                    break;
            }
            this.c.setSql(string.Format("INSERT INTO hms_drugselection(zone, selectionindepenid, selectiontype, code, name, signcontrol, other) VALUES('stock', 60, '{0}',hm_general_getstockid('{0}'),'{1}','{2}','{3}')", new object[] { str, Name, str2, str3 }));
            return this.c.RunSql();
        }
        
        public string insDrugClassStock(int StockID, long UsingDrugID)
        {
            this.c.setSql(string.Format("SELECT pharma_newdrugclass_stock('{0};{1}')", StockID, UsingDrugID));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string insDrugList(string Name, string Content, string Unit, int Quantity, decimal Price, string TradeName, int StockID, int Monthly)
        {
            this.c.setSql(string.Format("SELECT hm_ins_druglist('{0};{1};{2};{3};{4};{5};{6};{7};;;Viet Nam;4')", new object[] { Name, Content, Unit, Quantity, Price, TradeName, StockID, Monthly }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string insHealth(long MedID, long PatID)
        {
            this.c.setSql(string.Format("hm_new_health('{0};{1}')", MedID, PatID));
            return this.c.ExecuteScalar();
        }
        
        public bool insNote(DateTime timer, int divisionid, string notes)
        {
            this.c.setSql(string.Format("INSERT INTO rep_general_notes(id, repdate, notes, divisionid) VALUES(NEXTVAL('note_seq'), '{0}'::timestamp, '{1}', {2})", this.f.getDValue(timer, "YMDT"), notes, divisionid));
            return this.c.RunSql();
        }
        
        public string insParaclinicalDescription(long MedID, long ParaID, int ReportID, string ReportName, string Values)
        {
            this.c.setSql(string.Format("SELECT hm_insParaResult('{0};{1};{2};{3};{4};{5};{6}')", new object[] { MedID, ParaID, ReportID, ReportName, Values, this.sys_info.getSID(), this.sys_info.getIP() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string insReceivePatient(string Name, DateTime YBrith, int Sex, string HomeNumber, string Address, string PrecintID, string Relatedinfo, string Diag, string Doctor, int ExamRoom, int ExamStyle, int Emergency, int Work, int Chanel, int Hospital, string ICD, int DoubleExam, string ListExam, int Military)
        {
            string str = "";
            string str2 = "";
            string str3 = "";
            string str4 = this.getSpitName(Name);
            str3 = str4.Split(new char[] { ';' })[0];
            str2 = str4.Split(new char[] { ';' })[1];
            str = str4.Split(new char[] { ';' })[2];
            int num = DateTime.Now.Year - YBrith.Year;
            string sql = string.Format("select hm_receive_patient(';;;;;;0;{0};{1};{2};{3};{3};{4};{5};1;{6};9210318159999;9;;{7};{8};{9};{10};{11};{12};;O;-1;{13};0;{14};{15};{16};{17};{18};;{19};{20}')", new object[] { 
                str3, str2, str, this.f.getDValue(YBrith, "YMD"), num, Sex, Work, ExamRoom, ExamStyle, Emergency, this.sys_info.getSID(), HomeNumber, Address, Chanel, PrecintID, Relatedinfo,
                Hospital, ICD, DoubleExam, ListExam, Military
            });
            this.c.setSql(sql);
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string insReceivePatient(string Name, DateTime YBrith, int Sex, string CardCode, DateTime InsFrom, DateTime InsTo, int Hospital, int CardAdd, string HomeNumber, string Address, string PrecintID, string Relatedinfo, string Diag, string Doctor, int ExamRoom, int ExamStyle, int Emergency, int Work, int Chanel, int Hospital1, string ICD, int DoubleExam, string ListExam, int Military)
        {
            string str = "";
            string str2 = "";
            string str3 = "";
            string str4 = this.getSpitName(Name);
            str3 = str4.Split(new char[] { ';' })[0];
            str2 = str4.Split(new char[] { ';' })[1];
            str = str4.Split(new char[] { ';' })[2];
            int num = DateTime.Now.Year - YBrith.Year;
            string sql = string.Format("select hm_receive_patient('{0};{1};{2};;;;{3};{4};{5};{6};{7};{7};{8};{9};1;{10};9210318159999;9;;{11};{12};{13};{14};{15};{16};;O;-1;{17};0;{18};{19};{20};{21};{22};{23};{24};{25}')", new object[] { 
                CardCode, this.f.getDValue(InsFrom, "YMD"), this.f.getDValue(InsTo, "YMD"), Hospital, str3, str2, str, this.f.getDValue(YBrith, "YMD"), num, Sex, Work, ExamRoom, ExamStyle, Emergency, this.sys_info.getSID(), HomeNumber,
                Address, Chanel, PrecintID, Relatedinfo, Hospital1, ICD, DoubleExam, CardAdd, ListExam, Military
            });
            this.c.setSql(sql);
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public int insUser(string User, string Pass, int EmpID, int Division)
        {
            this.c.setSql(string.Format("select hm_new_user('{0};{1};;;;{2};{3}')", new object[] { User, this.sys_info.EncryptPass(Pass), Division, EmpID }));
            return int.Parse(this.c.FillData().Rows[0][0].ToString());
        }
        
        public int insUser(string User, string Pass, string Name, int Division)
        {
            string str = "";
            string str2 = "";
            string str3 = "";
            string str4 = this.getSpitName(Name);
            str3 = str4.Split(new char[] { ';' })[0];
            str2 = str4.Split(new char[] { ';' })[1];
            str = str4.Split(new char[] { ';' })[2];
            this.c.setSql(string.Format("select hm_new_user('{0};{1};{2};{3};{4};{5}')", new object[] { User, this.sys_info.EncryptPass(Pass), str3, str2, str, Division }));
            return int.Parse(this.c.FillData().Rows[0][0].ToString());
        }
        
        public bool isBackupMedicalrecord(long Values)
        {
            this.c.setSql(string.Format("SELECT id FROM hms_medicalrecord WHERE id = {0} LIMIT 1", Values));
            return (this.c.FillData().Rows.Count <= 0);
        }
        
        public bool isDrugInMedicalrecord(long MedID)
        {
            this.c.setSql(string.Format("SELECT id FROM hms_patientdrug WHERE medicalrecordid = {0} GROUP BY id LIMIT 1", MedID));
            return (this.c.FillData().Rows.Count > 0);
        }
        
        public bool isFeePay_InsIssue(long MedID)
        {
            this.c.setSql("SELECT id FROM hms_fee WHERE status = 'O' AND medicalrecordid = " + MedID);
            return (this.c.FillData().Rows.Count <= 0);
        }
        
        public bool isSaveInsure(long MedID)
        {
            this.c.setSql("SELECT * FROM rep_bhyt WHERE sohoso = " + MedID);
            if (this.c.FillData().Rows.Count <= 0)
            {
                return false;
            }
            return true;
        }
        
        public bool LockExam(DateTime To)
        {
            this.c.setSql(string.Format("SELECT hm_lock_exam('{0}')", this.f.getDValue(To, "YMDT")));
            return (this.c.FillData().Rows[0][0].ToString().CompareTo("OK") == 0);
        }
        
        public bool LockOutHospial(DateTime To)
        {
            this.c.setSql(string.Format("UPDATE hms_medicalrecord SET isclose = 1 WHERE archives_number IS NOT NULL AND closedate <= '{0}'::timestamp AND isclose <> 1", this.f.getDValue(To, "YMDT")));
            return this.c.RunSql();
        }
        
        public string MakeExambookReport(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT hm_insert_rep_exambook('{0}'::date, '{1}'::date)", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string MakeExamParaReport(DateTime From, DateTime To, int DivisionID)
        {
            this.c.setSql(string.Format("SELECT hm_insert_rep_para('{0}'::timestamp, '{1}'::timestamp, {2})", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), DivisionID));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string MakeParaclinicalReport(DateTime From, DateTime To, int DivisionID)
        {
            this.c.setSql(string.Format("SELECT hm_insert_rep_paraclinical('{0}'::date, '{1}'::date, {2})", this.f.getDValue(From, "YMD"), this.f.getDValue(To, "YMD"), DivisionID));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string MakeTreatmentBookReport(DateTime From, DateTime To)
        {
            this.c.setSql(string.Format("SELECT hm_insert_rep_treatment('{0}'::date, '{1}'::date)", this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT")));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        private DataTable MedicalrecordInfo(long MedID)
        {
            this.c.setSql("SELECT * FROM hm_medicalrecord_showinfo_view WHERE id = " + MedID);
            return this.c.FillData();
        }
        
        private DataTable MedicalrecordInfo(long MedID, int DivisionID)
        {
            this.c.setSql(string.Format("SELECT * FROM hm_medicalrecord_showinfo_view WHERE id = {0} AND treatmentdivisionid = {1}", MedID, DivisionID));
            return this.c.FillData();
        }
        
        private DataTable MedicalrecordInfoBackup(long MedID)
        {
            this.c.setSql("SELECT * FROM hm_medicalrecord_showinfo_view_all WHERE id = " + MedID);
            return this.c.FillData();
        }
        
        public string New_ChiDaoTuyen(long MedID, string Methods, string NowStatus, string Prognosis, string Notes)
        {
            this.c.setSql(string.Format("select hm_new_chidaotuyen('{0};{1};{2};{3};{4}')", new object[] { MedID, Methods, NowStatus, Prognosis, Notes }));
            return this.c.ExecuteScalar();
        }
        
        public string NewArchives(int DivisionID)
        {
            this.c.setSql(string.Format("SELECT hm_getarchives({0},0)", DivisionID));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string NewArchives(long MedID)
        {
            this.c.setSql(string.Format("SELECT hm_getarchives(0,{0})", MedID));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string PatientIssue(long MedID, long PatID)
        {
            this.c.setSql(string.Format("SELECT hm_patient_issue('{0};{1};{2};{3}')", new object[] { MedID, PatID, this.sys_info.getSID(), this.sys_info.getIP() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string PatientIssue(long MedID, long PatID, long StockImExID)
        {
            this.c.setSql(string.Format("SELECT hm_patient_issue('{0};{1};{2};{3};{4}')", new object[] { MedID, PatID, this.sys_info.getSID(), this.sys_info.getIP(), StockImExID }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string PatientIssueAccept(long MedID, long PatID)
        {
            this.c.setSql(string.Format("SELECT hm_patient_issueaccept('{0};{1};{2};{3}')", new object[] { MedID, PatID, this.sys_info.getSID(), this.sys_info.getIP() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string PatientIssueReject(long MedID, long PatID)
        {
            this.c.setSql(string.Format("SELECT hm_patient_issuereject('{0};{1};{2};{3}')", new object[] { MedID, PatID, this.sys_info.getSID(), this.sys_info.getIP() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string PatientNonIssue(long MedID)
        {
            this.c.setSql(string.Format("SELECT pharma_del_issue('{0};{1};{2}')", MedID, this.sys_info.getSID(), this.sys_info.getIP()));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public void PrintCard(long PatID)
        {
            this.c.setSql("UPDATE hms_patient SET cardnumber = cardnumber + 1 WHERE id = " + PatID);
            this.c.RunSql();
            this.c.setSql(string.Format("SELECT eventlog('In The BN : {0};{1};999;0;{2}')", PatID, this.sys_info.getSID(), this.sys_info.getIP()));
            this.c.RunSql();
        }
        
        public string ReMakeFee(long MedID)
        {
            this.c.setSql(string.Format("SELECT hm_remake_fee({0})", MedID));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string ReOpenFileSave(long MedID)
        {
            this.c.setSql(string.Format("SELECT hm_reopenfilesave({0},{1})", MedID, this.sys_info.getSID()));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string ReOpenMedicalrecord(long MedID, bool isInHosp, int Type)
        {
            this.c.setSql(string.Format("SELECT hm_tool_openmedicalrecord({0}, {1}, {2}, {3})", new object[] { MedID, isInHosp, Type, this.sys_info.getSID() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public bool ResetPass(int UserID)
        {
            string[] strArray = new string[] { 
                "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F",
                "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",
                "W", "X", "Y", "Z"
            };
            string str = "";
            Random random = new Random(DateTime.Now.Millisecond);
            for (int i = 0; i < 5; i++)
            {
                str = str + strArray[(random.Next() % DateTime.Now.Millisecond) % strArray.Length];
            }
            this.c.setSql(string.Format("UPDATE hm_user SET pass = {0}, control = '{1}', changenow = 1 WHERE id = {2} AND pass IS NOT NULL", this.f.getValue(this.sys_info.EncryptPass(str)), str, UserID));
            return this.c.RunSql();
        }
        
        public string send_para(long MedID)
        {
            this.c.setSql(string.Format("SELECT his_get_auto_barcode('{0};{1};{2}')", MedID, this.sys_info.getSID(), this.sys_info.getIP()));
            return this.c.ExecuteScalar();
        }
        
        private DataTable ServiceFeeList(long MedID, bool isDetail, bool isNonPay, bool isPay, int FeeModeType)
        {
            string sql = "";
            string str2 = "";
            switch (FeeModeType)
            {
                case 0:
                    str2 = " AND feemode NOT IN (599,598) ";
                    break;
                
                case 1:
                    str2 = " AND feemode IN (599,598) ";
                    break;
            }
            if (isNonPay)
            {
                sql = string.Format("select id, serviceid, servicedate, servicename, price, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE insprice END END AS insprice, quantity, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE discountvalue END END AS discountvalue, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE paidvalue END END AS paidvalue, price*quantity AS money, status, ischeck, CASE WHEN remissionvalue <> 0 THEN 1 ELSE 0 END AS choose, isservice, 0 AS chs, price * quantity - (CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE discountvalue END END + CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE paidvalue END END)::bigint AS nonpay, 0 AS ischoosefee, paidbycard FROM hms_fee WHERE medicalrecordid = {0} AND status <> 'P' {1} ORDER BY servicedate", MedID, str2);
                this.c.setSql(sql);
                return this.c.FillData();
            }
            if (isPay)
            {
                sql = string.Format("select id, serviceid, servicedate, servicename, price, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE insprice END END AS insprice, quantity, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE discountvalue END END AS discountvalue, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE paidvalue END END AS paidvalue, price*quantity AS money, status, ischeck, CASE WHEN remissionvalue <> 0 THEN 1 ELSE 0 END AS choose, isservice, 0 AS chs, price * quantity - (CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE discountvalue END END + CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE paidvalue END END)::bigint AS nonpay, 0 AS ischoosefee, paidbycard FROM hms_fee WHERE medicalrecordid = {0} AND status = 'P' {1} ORDER BY servicedate", MedID, str2);
                this.c.setSql(sql);
                return this.c.FillData();
            }
            if (isDetail)
            {
                sql = string.Format("select id, serviceid, servicedate, servicename, price, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE insprice END END AS insprice, quantity, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE discountvalue END END AS discountvalue, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE paidvalue END END AS paidvalue, price*quantity AS money, status, ischeck, CASE WHEN remissionvalue <> 0 THEN 1 ELSE 0 END AS choose, isservice, 0 AS chs, price * quantity - (CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE discountvalue END END + CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE paidvalue END END)::bigint AS nonpay, 0 AS ischoosefee, paidbycard FROM hms_fee WHERE medicalrecordid = {0} {1} ORDER BY servicedate", MedID, str2);
                this.c.setSql(sql);
                return this.c.FillData();
            }
            sql = string.Format("select servicedate, servicename, price, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE insprice END END AS insprice, quantity, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE discountvalue END END AS discountvalue, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE paidvalue END END AS paidvalue, price*quantity AS money, status, ischeck, CASE WHEN remissionvalue <> 0 THEN 1 ELSE 0 END AS choose, isservice, 0 AS chs, price * quantity - (CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE discountvalue END END + CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE paidvalue END END)::bigint AS nonpay, 0 AS ischoosefee, paidbycard FROM hms_fee WHERE medicalrecordid = {0} {1} GROUP BY servicedate, servicename, price, insprice, status, isservice ORDER BY servicedate", MedID, str2);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        private DataTable ServiceFeeListBackup(long MedID, bool isDetail, bool isNonPay, bool isPay, int FeeModeType)
        {
            string sql = "";
            string str2 = "";
            switch (FeeModeType)
            {
                case 0:
                    str2 = " AND feemode NOT IN (599,598) ";
                    break;
                
                case 1:
                    str2 = " AND feemode IN (599,598) ";
                    break;
            }
            if (isNonPay)
            {
                sql = string.Format("select id, serviceid, servicedate, servicename, price, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE insprice END END AS insprice, quantity, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE discountvalue END END AS discountvalue, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE paidvalue END END AS paidvalue, price*quantity AS money, status, ischeck, CASE WHEN remissionvalue <> 0 THEN 1 ELSE 0 END AS choose, isservice FROM hms_feebackup WHERE medicalrecordid = {0} AND status <> 'P' {1} ORDER BY servicedate", MedID, str2);
                this.c.setSql(sql);
                return this.c.FillData();
            }
            if (isPay)
            {
                sql = string.Format("select id, serviceid, servicedate, servicename, price, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE insprice END END AS insprice, quantity, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE discountvalue END END AS discountvalue, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE paidvalue END END AS paidvalue, price*quantity AS money, status, ischeck, CASE WHEN remissionvalue <> 0 THEN 1 ELSE 0 END AS choose, isservice FROM hms_feebackup WHERE medicalrecordid = {0} AND status = 'P' {1} ORDER BY servicedate", MedID, str2);
                this.c.setSql(sql);
                return this.c.FillData();
            }
            if (isDetail)
            {
                sql = string.Format("select id, serviceid, servicedate, servicename, price, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE insprice END END AS insprice, quantity, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE discountvalue END END AS discountvalue, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE paidvalue END END AS paidvalue, price*quantity AS money, status, ischeck, CASE WHEN remissionvalue <> 0 THEN 1 ELSE 0 END AS choose, isservice FROM hms_feebackup WHERE medicalrecordid = {0} {1} ORDER BY servicedate", MedID, str2);
                this.c.setSql(sql);
                return this.c.FillData();
            }
            sql = string.Format("select servicedate, servicename, price, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE insprice END END AS insprice, quantity, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE discountvalue END END AS discountvalue, CASE WHEN paidbycard = 1 AND calculate = 3 THEN 0 ELSE CASE WHEN status = 'S' AND calculate = 2 THEN 0 ELSE paidvalue END END AS paidvalue, price*quantity AS money, status, ischeck, CASE WHEN remissionvalue <> 0 THEN 1 ELSE 0 END AS choose, isservice FROM hms_feebackup WHERE medicalrecordid = {0} {1} GROUP BY servicedate, servicename, price, insprice, status, isservice ORDER BY servicedate", MedID, str2);
            this.c.setSql(sql);
            return this.c.FillData();
        }
        
        public string setChangeHospReport(long MedID, string Signal, string Status, string Reason, string Transport, string Transporter)
        {
            this.c.setSql(string.Format("SELECT hm_ins_changehosp('{0};{1};{2};{3};{4};{5};{6};{7}')", new object[] { MedID, Signal, Status, Reason, Transport, Transporter, this.sys_info.getSID(), this.sys_info.getIP() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public bool setExamRoom_ICDGeneral(string Values)
        {
            this.c.setSql(string.Format("UPDATE hms_selection SET name = {0} WHERE zone = 'default' AND sector = 'config' AND line = 4", this.f.getValue(Values)));
            return this.c.RunSql();
        }
        
        public bool setMain_ICD(long MedID, string Main_ICD)
        {
            this.c.setSql(string.Format("SELECT his_set_main_icd('{0};{1};{2};{3}')", new object[] { MedID, Main_ICD, this.sys_info.getSID(), this.sys_info.getIP() }));
            return this.c.RunSql();
        }
        
        public string setNonCardMedical(long MedID)
        {
            this.c.setSql(string.Format("SELECT hm_tool_noncard_med('{0};{1};{2}')", MedID, this.sys_info.getSID(), this.sys_info.getIP()));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string setPara_CheckResult(long MedID, long ParaGroupID, bool isCheckNonFull)
        {
            this.c.setSql(string.Format("SELECT hm_para_upd_checkresult('{0};{1};{2};{3}')", new object[] { MedID, ParaGroupID, this.sys_info.getSID(), this.f.Boolean2Int(isCheckNonFull) }));
            return this.c.ExecuteScalar();
        }
        
        public bool setPermission(int UserID, int RoleValue, int RoleType, int Permission)
        {
            this.c.setSql(string.Format("INSERT INTO hm_user_relation(userid, role, roletype, permissionvalue) VALUES({0}, {1}, {2}, {3})", new object[] { UserID, RoleValue, RoleType, Permission }));
            return this.c.RunSql();
        }
        
        public string setQueueListPaid(long MedID, long PatID, int zoneplace)
        {
            this.c.setSql(string.Format("SELECT hm_make_numberreception('{0};{1};{2};{3}')", new object[] { zoneplace, MedID, PatID, this.pinfo.getNumQueue() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public bool setRole(int UserID, string RoleValue, int RoleType)
        {
            this.c.setSql(string.Format("INSERT INTO hm_userrole(rolevalue, userid, roletype) VALUES({0}, {1}, {2})", this.f.getValue(RoleValue), UserID, RoleType));
            return this.c.RunSql();
        }
        
        public bool setStockPermission(int UserID, int StockID)
        {
            this.c.setSql(string.Format("INSERT INTO hm_user_stockrole(userid, stockid) VALUES({0}, {1})", UserID, StockID));
            return this.c.RunSql();
        }
        
        public string setUndoCardMedical(long MedID, long PatID)
        {
            this.c.setSql(string.Format("SELECT hm_tool_undocard_med('{0};{1};{2};{3}')", new object[] { MedID, PatID, this.sys_info.getSID(), this.sys_info.getIP() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string SetUpdPatient(long PatientID, string Name, DateTime YBrith, int Sex, string HomeNumber, string Address, string PrecintID, string Relatedinfo, int Work, int Ethnic, int Military, string Company, string Tax)
        {
            string str = "";
            string str2 = "";
            string str3 = "";
            string str4 = this.getSpitName(Name);
            str3 = str4.Split(new char[] { ';' })[0];
            str2 = str4.Split(new char[] { ';' })[1];
            str = str4.Split(new char[] { ';' })[2];
            int num = DateTime.Now.Year - YBrith.Year;
            this.c.setSql(string.Format("SELECT hm_medical_EditPatient('{0};{1};{2};{3};{4};{4};{5};{6};{7};{8};929208151301;9;;;{9};{10};{11};{12};{13};{14};{15};{16}')", new object[] { 
                PatientID, str3, str2, str, this.f.getDValue(YBrith, "YMD"), num, Sex, Ethnic, Work, this.sys_info.getSID(), HomeNumber, Address, PrecintID, Relatedinfo, Military, Company,
                Tax
            }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string SumaryExamICD(DateTime From, DateTime To, int ExamRoomID)
        {
            this.c.setSql(string.Format("SELECT hm_insert_rep_exam('{0}'::timestamp,'{1}'::timestamp,{2},{3})", new object[] { this.f.getDValue(From, "YMDT"), this.f.getDValue(To, "YMDT"), ExamRoomID, this.sys_info.getSID() }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public string test_drug_in(long MedID, long DrugID)
        {
            this.c.setSql(string.Concat(new object[] { "SELECT * FROM his_test_drug_in('", DrugID, ";", MedID, "')" }));
            return this.c.ExecuteScalar();
        }
        
        public bool upd_drug(int ID, string GenericName, int Drug_Type, int Drug_Group, int Content, int Unit, int Drug_Report)
        {
            this.c.setSql(string.Format("SELECT pharma_upd_drug('{0};{1};{2};{3};{4};{5};{6}')", new object[] { GenericName, ID, Drug_Type, Drug_Group, Content, Unit, Drug_Report }));
            return this.c.RunSql();
        }
        
        public bool Update_ChiDaoTuyen(long MedID, string Methods, string NowStatus, string Prognosis, string Notes)
        {
            this.c.setSql(string.Format("update hm_chidaotuyen set status='E', methods='{1}',nowstatus='{2}',prognosis='{3}',notes='{4}' where medicalrecordid={0}", new object[] { MedID, Methods, NowStatus, Prognosis, Notes }));
            return this.c.RunSql();
        }
        
        public bool updateHinhAnh(long MedID, string ultrasound, string ecg, string lungxray)
        {
            string sql = string.Format("UPDATE hm_healthexamination set ultrasound={0},ecg={1},lungxray={2} WHERE id={3}", new object[] { this.f.getValue(ultrasound), this.f.getValue(ecg), this.f.getValue(lungxray), MedID });
            this.c.setSql(sql);
            return this.c.RunSql();
        }
        
        public bool updateKetLuan(long MedID, string diagnosis1, string diagnosis2, string diagnosis3, string diagnosis4, string levels, short strong, string conclusions, string solutions, string note)
        {
            string sql = string.Format("UPDATE hm_healthexamination set diagnosis1={0},diagnosis2={1},diagnosis3={2},diagnosis4={3},levels={4},strong={5},conclusions={6},solutions={7},note={8} WHERE id={9}", new object[] { this.f.getValue(diagnosis1), this.f.getValue(diagnosis2), this.f.getValue(diagnosis3), this.f.getValue(diagnosis4), this.f.getValue(levels), strong, this.f.getValue(conclusions), this.f.getValue(solutions), this.f.getValue(note), MedID });
            this.c.setSql(sql);
            return this.c.RunSql();
        }
        
        public bool updateLamSang(long MedID, string cyclic, string respiratory, string digest, string kidney_urology_genital, string neuro, string mental, string motionsystem, string hormonal, string dermatology, string gynecology)
        {
            string sql = string.Format("UPDATE hm_healthexamination set cyclic={0},respiratory={1},digest={2},kidney_urology_genital={3},neuro={4},mental={5},motionsystem={6},hormonal={7},dermatology={8},gynecology={9} WHERE id={10}", new object[] { this.f.getValue(cyclic), this.f.getValue(respiratory), this.f.getValue(digest), this.f.getValue(kidney_urology_genital), this.f.getValue(neuro), this.f.getValue(mental), this.f.getValue(motionsystem), this.f.getValue(hormonal), this.f.getValue(dermatology), this.f.getValue(gynecology), MedID });
            this.c.setSql(sql);
            return this.c.RunSql();
        }
        
        public bool updateMat_TaiMuiHong_RangHamMat(long MedID, string left_eye_with_glasses, string left_eye_without_glasses, string right_eye_with_glasses, string right_eye_without_glasses, string eyediseases, string left_ear_with_whisper, string left_ear_without_whisper, string right_ear_with_whisper, string right_ear_without_whisper, string eardiseases, string oral)
        {
            string sql = string.Format("UPDATE hm_healthexamination set left_eye_with_glasses={0},left_eye_without_glasses={1},right_eye_with_glasses={2},right_eye_without_glasses={3},eyediseases={4}',left_ear_with_whisper={5},left_ear_without_whisper={6},right_ear_with_whisper={7},right_ear_without_whisper={8},eardiseases={9},oral={10} WHERE id={11}", new object[] { this.f.getValue(left_eye_with_glasses), this.f.getValue(left_eye_without_glasses), this.f.getValue(right_eye_with_glasses), this.f.getValue(right_eye_without_glasses), this.f.getValue(eyediseases), this.f.getValue(left_ear_with_whisper), this.f.getValue(left_ear_without_whisper), this.f.getValue(right_ear_with_whisper), this.f.getValue(right_ear_without_whisper), this.f.getValue(eardiseases), this.f.getValue(oral), MedID });
            this.c.setSql(sql);
            return this.c.RunSql();
        }
        
        public bool updateMau(long MedID, string bloodtype, string erythrocyte, string leukemia, string platelet, string bloodglucose, string neutrophil, string lymphocyte, string monocyte, string eosinophil, string blooddiseases)
        {
            string sql = string.Format("UPDATE hm_healthexamination set bloodtype={0},erythrocyte={1},leukemia={2},platelet={3},bloodglucose={4},neutrophil={5},lymphocyte={6},monocyte={7},eosinophil={8},blooddiseases={9} WHERE id={10}", new object[] { this.f.getValue(bloodtype), this.f.getValue(erythrocyte), this.f.getValue(leukemia), this.f.getValue(platelet), this.f.getValue(bloodglucose), this.f.getValue(neutrophil), this.f.getValue(lymphocyte), this.f.getValue(monocyte), this.f.getValue(eosinophil), this.f.getValue(blooddiseases), MedID });
            this.c.setSql(sql);
            return this.c.RunSql();
        }
        
        public bool updateNuocTieu(long MedID, string urineglucose, string urineProtein, string urinediseases, string urine)
        {
            string sql = string.Format("UPDATE hm_healthexamination set urineglucose={0},urineProtein={1},urinediseases={2},urine={3} WHERE id={4}", new object[] { this.f.getValue(urineglucose), this.f.getValue(urineProtein), this.f.getValue(urinediseases), this.f.getValue(urine), MedID });
            this.c.setSql(sql);
            return this.c.RunSql();
        }
        
        public bool updateSinhHoa(long MedID, string gluco, string ast, string alt, string ure, string creatinin, string auric, string cholesterol, string triglycerit, string ldl, string hdl)
        {
            string sql = string.Format("UPDATE hm_healthexamination set gluco={0},ast={1},alt={2},ure={3},creatinin={4},auric={5}',cholesterol={6},triglycerit={7},ldl={8},hdl={9} WHERE id={10}", new object[] { this.f.getValue(gluco), this.f.getValue(ast), this.f.getValue(alt), this.f.getValue(ure), this.f.getValue(creatinin), this.f.getValue(auric), this.f.getValue(cholesterol), this.f.getValue(triglycerit), this.f.getValue(ldl), this.f.getValue(hdl), MedID });
            this.c.setSql(sql);
            return this.c.RunSql();
        }
        
        public bool updateTaiMuiHong(long MedID, string left_ear_with_whisper, string left_ear_without_whisper, string right_ear_with_whisper, string right_ear_without_whisper, string eardiseases)
        {
            string sql = string.Format("UPDATE hm_healthexamination set left_ear_with_whisper={0},left_ear_without_whisper={1},right_ear_with_whisper={2},right_ear_without_whisper={3},eardiseases={4} WHERE id={5}", new object[] { this.f.getValue(left_ear_with_whisper), this.f.getValue(left_ear_without_whisper), this.f.getValue(right_ear_with_whisper), this.f.getValue(right_ear_without_whisper), this.f.getValue(eardiseases), MedID });
            this.c.setSql(sql);
            return this.c.RunSql();
        }
        
        public bool updateTheLuc(long MedID, string height, string weight, string pulse, string bloodpressure_max, string bloodpressure_min, string bust, string waist, string butt, string heat, string bmi, string breath)
        {
            string sql = string.Format("UPDATE hm_healthexamination set height={0},weight={1},bloodpressure_max={2},bloodpressure_min={3},pulse={4},bust={5},waist={6},butt={7},heat={8},bmi={9},breath={10} WHERE id={11}", new object[] { this.f.getValue(height), this.f.getValue(weight), this.f.getValue(bloodpressure_max), this.f.getValue(bloodpressure_min), this.f.getValue(pulse), this.f.getValue(bust), this.f.getValue(waist), this.f.getValue(butt), this.f.getValue(heat), this.f.getValue(bmi), this.f.getValue(breath), MedID });
            this.c.setSql(sql);
            return this.c.RunSql();
        }
        
        public bool UpdConfig(string Zone, string Sector, int LineValue)
        {
            this.c.setSql(string.Format("UPDATE hms_selection SET line = {0} WHERE zone = {1} AND sector = {2}", LineValue, this.f.getValue(Zone), this.f.getValue(Sector)));
            return this.c.RunSql();
        }
        
        public bool UpdConfig(string Zone, string Sector, int Line, string NameValue)
        {
            this.c.setSql(string.Format("UPDATE hms_selection SET name = {0} WHERE zone = {1} AND sector = {2} AND line = {3}", new object[] { this.f.getValue(NameValue), this.f.getValue(Zone), this.f.getValue(Sector), Line }));
            return this.c.RunSql();
        }
        
        public string updMedicalrecordArchives(long MedID, int FromHospial, string FromHospICD, string FirstICD, string ExternalICD, string MainICD, string MoreICD, int ToHospital, string Medthod, string Guide, int Suggest, int Conclusion)
        {
            string sql = string.Format("SELECT hm_medical_upd_archives('{0};{1};{2};{3};{4};{5};{6};{7};{8};{9};{10};{11};{12}')", new object[] { MedID, FromHospial, FromHospICD, ExternalICD, MainICD, MoreICD, ToHospital, Medthod, Guide, this.sys_info.getSID(), Suggest, Conclusion, FirstICD });
            this.c.setSql(sql);
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public bool updNote(long ID, DateTime timer, int divisionid, string notes)
        {
            this.c.setSql(string.Format("UPDATE rep_general_notes SET repdate = '{0}'::timestamp, notes = '{1}', divisionid = {2} WHERE id = {3}", new object[] { this.f.getDValue(timer, "YMDT"), notes, divisionid, ID }));
            return this.c.RunSql();
        }
        
        public bool updParaclinicalResult(long MedID, long ParaclinicID, string Result, string Tech, string Description)
        {
            this.c.setSql(string.Format("SELECT hm_upd_pararesult('{0};{4};{1};{2};{3};{5};{6}')", new object[] { MedID, Result, Tech, Description, ParaclinicID, this.sys_info.getSID(), this.sys_info.getIP() }));
            return this.c.RunSql();
        }
        
        public bool updParaclinicalResult(long MedID, long ParaclinicID, string Result, string Tech, string Description, DateTime Result_Date)
        {
            this.c.setSql(string.Format("SELECT hm_upd_pararesult('{0};{4};{1};{2};{3};{5};{6};{7}')", new object[] { MedID, Result, Tech, Description, ParaclinicID, this.sys_info.getSID(), this.sys_info.getIP(), this.f.getDValue(Result_Date, "YMDT") }));
            return this.c.RunSql();
        }
        
        public string updPatientDrug(long MedicalrecordID, long UsingdrugID, int DrugNow, int DrugNew, string Instruction, int Doctor, string Daily, string Instalment, int Usage)
        {
            this.c.setSql(string.Format("SELECT pharma_upd_patientdrug('{0};{1};{2};{3};{4};{5};{6};{7};{8}')", new object[] { MedicalrecordID, UsingdrugID, DrugNow, DrugNew, Instruction, Doctor, Instalment, Daily, Usage }));
            return this.c.FillData().Rows[0][0].ToString();
        }
        
        public bool updStockRole(int UserID, string StockRoleValue)
        {
            this.c.setSql(string.Format("UPDATE hm_user SET stock = {0} WHERE id = {1}", this.f.getValue(StockRoleValue), UserID));
            return this.c.RunSql();
        }
    }
}

    }
}

        #endregion

    }
}
